// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
//import ProtocolBuffers

struct PackmsgRoot {
  static var sharedInstance : PackmsgRoot {
   struct Static {
       static let instance : PackmsgRoot = PackmsgRoot()
   }
   return Static.instance
  }
  var extensionRegistry:ExtensionRegistry

  init() {
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(extensionRegistry)
  }
  func registerAllExtensions(registry:ExtensionRegistry) {
  }
}

func == (lhs: PkgMsg, rhs: PkgMsg) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasMsgtype == rhs.hasMsgtype) && (!lhs.hasMsgtype || lhs.msgtype == rhs.msgtype)
  fieldCheck = fieldCheck && (lhs.hasIssuc == rhs.hasIssuc) && (!lhs.hasIssuc || lhs.issuc == rhs.issuc)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  fieldCheck = fieldCheck && (lhs.hasErrdevdesc == rhs.hasErrdevdesc) && (!lhs.hasErrdevdesc || lhs.errdevdesc == rhs.errdevdesc)
  fieldCheck = fieldCheck && (lhs.hasMsgdirection == rhs.hasMsgdirection) && (!lhs.hasMsgdirection || lhs.msgdirection == rhs.msgdirection)
  fieldCheck = fieldCheck && (lhs.hasMsgreplyflag == rhs.hasMsgreplyflag) && (!lhs.hasMsgreplyflag || lhs.msgreplyflag == rhs.msgreplyflag)
  fieldCheck = fieldCheck && (lhs.hasReqmsgtype == rhs.hasReqmsgtype) && (!lhs.hasReqmsgtype || lhs.reqmsgtype == rhs.reqmsgtype)
  fieldCheck = fieldCheck && (lhs.hasReqmsgdata == rhs.hasReqmsgdata) && (!lhs.hasReqmsgdata || lhs.reqmsgdata == rhs.reqmsgdata)
  fieldCheck = fieldCheck && (lhs.hasResmsgtype == rhs.hasResmsgtype) && (!lhs.hasResmsgtype || lhs.resmsgtype == rhs.resmsgtype)
  fieldCheck = fieldCheck && (lhs.hasResmsgdata == rhs.hasResmsgdata) && (!lhs.hasResmsgdata || lhs.resmsgdata == rhs.resmsgdata)
  fieldCheck = fieldCheck && (lhs.hasMsguuid == rhs.hasMsguuid) && (!lhs.hasMsguuid || lhs.msguuid == rhs.msguuid)
  fieldCheck = fieldCheck && (lhs.hasEnmsgstatuscode == rhs.hasEnmsgstatuscode) && (!lhs.hasEnmsgstatuscode || lhs.enmsgstatuscode == rhs.enmsgstatuscode)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: PkgSessionUser, rhs: PkgSessionUser) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasUseruuid == rhs.hasUseruuid) && (!lhs.hasUseruuid || lhs.useruuid == rhs.useruuid)
  fieldCheck = fieldCheck && (lhs.hasIslogined == rhs.hasIslogined) && (!lhs.hasIslogined || lhs.islogined == rhs.islogined)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

final public class PkgMsg : GeneratedMessage {


    //Enum type declaration start 

    enum EnMsgType:Int32 {
      case MsgNone = 0
      case MsgReq = 1
      case MsgRes = 2
      case MsgAll = 3

      static func IsValidValue(value:EnMsgType) ->Bool {
        switch value {
          case .MsgNone, .MsgReq, .MsgRes, .MsgAll:
            return true;
          default:
            return false;
        }
      }
    }



    //Enum type declaration end 



    //Enum type declaration start 

    enum EnMsgDirection:Int32 {
      case MsgCs = 1
      case MsgSc = 2
      case MsgC2C = 3
      case MsgS2S = 4

      static func IsValidValue(value:EnMsgDirection) ->Bool {
        switch value {
          case .MsgCs, .MsgSc, .MsgC2C, .MsgS2S:
            return true;
          default:
            return false;
        }
      }
    }



    //Enum type declaration end 



    //Enum type declaration start 

    enum EnMsgReplyFlag:Int32 {
      case MsgReplyNormal = 1
      case MsgReplyWithReq = 2
      case MsgReplyNo = 3

      static func IsValidValue(value:EnMsgReplyFlag) ->Bool {
        switch value {
          case .MsgReplyNormal, .MsgReplyWithReq, .MsgReplyNo:
            return true;
          default:
            return false;
        }
      }
    }



    //Enum type declaration end 



    //Enum type declaration start 

    enum EnMsgStatusCode:Int32 {
      case MsgStatusnone = 0
      case MsgConnected = 1
      case MsgClosed = 2

      static func IsValidValue(value:EnMsgStatusCode) ->Bool {
        switch value {
          case .MsgStatusnone, .MsgConnected, .MsgClosed:
            return true;
          default:
            return false;
        }
      }
    }



    //Enum type declaration end 

  private(set) var msgtype:PkgMsg.EnMsgType = PkgMsg.EnMsgType.MsgReq
  private(set) var hasMsgtype:Bool = false
  private(set) var hasIssuc:Bool = false
  private(set) var issuc:Bool = false

  private(set) var hasErr:Bool = false
  private(set) var err:String = ""

  private(set) var hasErrdevdesc:Bool = false
  private(set) var errdevdesc:String = ""

  private(set) var msgdirection:PkgMsg.EnMsgDirection = PkgMsg.EnMsgDirection.MsgCs
  private(set) var hasMsgdirection:Bool = false
  private(set) var msgreplyflag:PkgMsg.EnMsgReplyFlag = PkgMsg.EnMsgReplyFlag.MsgReplyNormal
  private(set) var hasMsgreplyflag:Bool = false
  private(set) var hasReqmsgtype:Bool = false
  private(set) var reqmsgtype:String = ""

  private(set) var hasReqmsgdata:Bool = false
  private(set) var reqmsgdata:String = ""

  private(set) var hasResmsgtype:Bool = false
  private(set) var resmsgtype:String = ""

  private(set) var hasResmsgdata:Bool = false
  private(set) var resmsgdata:String = ""

  private(set) var hasMsguuid:Bool = false
  private(set) var msguuid:String = ""

  private(set) var enmsgstatuscode:PkgMsg.EnMsgStatusCode = PkgMsg.EnMsgStatusCode.MsgStatusnone
  private(set) var hasEnmsgstatuscode:Bool = false
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasMsgtype {
      output.writeEnum(1, value:msgtype.rawValue)
    }
    if hasIssuc {
      output.writeBool(2, value:issuc)
    }
    if hasErr {
      output.writeString(3, value:err)
    }
    if hasErrdevdesc {
      output.writeString(4, value:errdevdesc)
    }
    if hasMsgdirection {
      output.writeEnum(5, value:msgdirection.rawValue)
    }
    if hasMsgreplyflag {
      output.writeEnum(6, value:msgreplyflag.rawValue)
    }
    if hasReqmsgtype {
      output.writeString(11, value:reqmsgtype)
    }
    if hasReqmsgdata {
      output.writeString(12, value:reqmsgdata)
    }
    if hasResmsgtype {
      output.writeString(13, value:resmsgtype)
    }
    if hasResmsgdata {
      output.writeString(14, value:resmsgdata)
    }
    if hasMsguuid {
      output.writeString(50, value:msguuid)
    }
    if hasEnmsgstatuscode {
      output.writeEnum(100, value:enmsgstatuscode.rawValue)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if (hasMsgtype) {
      size += WireFormat.computeEnumSize(1, value:msgtype.rawValue)
    }
    if hasIssuc {
      size += WireFormat.computeBoolSize(2, value:issuc)
    }
    if hasErr {
      size += WireFormat.computeStringSize(3, value:err)
    }
    if hasErrdevdesc {
      size += WireFormat.computeStringSize(4, value:errdevdesc)
    }
    if (hasMsgdirection) {
      size += WireFormat.computeEnumSize(5, value:msgdirection.rawValue)
    }
    if (hasMsgreplyflag) {
      size += WireFormat.computeEnumSize(6, value:msgreplyflag.rawValue)
    }
    if hasReqmsgtype {
      size += WireFormat.computeStringSize(11, value:reqmsgtype)
    }
    if hasReqmsgdata {
      size += WireFormat.computeStringSize(12, value:reqmsgdata)
    }
    if hasResmsgtype {
      size += WireFormat.computeStringSize(13, value:resmsgtype)
    }
    if hasResmsgdata {
      size += WireFormat.computeStringSize(14, value:resmsgdata)
    }
    if hasMsguuid {
      size += WireFormat.computeStringSize(50, value:msguuid)
    }
    if (hasEnmsgstatuscode) {
      size += WireFormat.computeEnumSize(100, value:enmsgstatuscode.rawValue)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> PkgMsg {
    return PkgMsg.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> PkgMsg {
    return PkgMsg.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> PkgMsg {
    return PkgMsg.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PkgMsg {
    return PkgMsg.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> PkgMsg {
    return PkgMsg.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PkgMsg {
    return PkgMsg.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> PkgMsgBuilder {
    return PkgMsgBuilder()
  }
  class func builderWithPrototype(prototype:PkgMsg) -> PkgMsgBuilder {
    return PkgMsg.builder().mergeFrom(prototype)
  }
  func builder() -> PkgMsgBuilder {
    return PkgMsg.builder()
  }
  func toBuilder() -> PkgMsgBuilder {
    return PkgMsg.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if (hasMsgtype) {
      output += "\(indent) msgtype: \(msgtype.rawValue)\n"
    }
    if hasIssuc {
      output += "\(indent) issuc: \(issuc) \n"
    }
    if hasErr {
      output += "\(indent) err: \(err) \n"
    }
    if hasErrdevdesc {
      output += "\(indent) errdevdesc: \(errdevdesc) \n"
    }
    if (hasMsgdirection) {
      output += "\(indent) msgdirection: \(msgdirection.rawValue)\n"
    }
    if (hasMsgreplyflag) {
      output += "\(indent) msgreplyflag: \(msgreplyflag.rawValue)\n"
    }
    if hasReqmsgtype {
      output += "\(indent) reqmsgtype: \(reqmsgtype) \n"
    }
    if hasReqmsgdata {
      output += "\(indent) reqmsgdata: \(reqmsgdata) \n"
    }
    if hasResmsgtype {
      output += "\(indent) resmsgtype: \(resmsgtype) \n"
    }
    if hasResmsgdata {
      output += "\(indent) resmsgdata: \(resmsgdata) \n"
    }
    if hasMsguuid {
      output += "\(indent) msguuid: \(msguuid) \n"
    }
    if (hasEnmsgstatuscode) {
      output += "\(indent) enmsgstatuscode: \(enmsgstatuscode.rawValue)\n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasMsgtype {
             hashCode = (hashCode &* 31) &+ Int(msgtype.rawValue)
          }
          if hasIssuc {
             hashCode = (hashCode &* 31) &+ issuc.hashValue
          }
          if hasErr {
             hashCode = (hashCode &* 31) &+ err.hashValue
          }
          if hasErrdevdesc {
             hashCode = (hashCode &* 31) &+ errdevdesc.hashValue
          }
          if hasMsgdirection {
             hashCode = (hashCode &* 31) &+ Int(msgdirection.rawValue)
          }
          if hasMsgreplyflag {
             hashCode = (hashCode &* 31) &+ Int(msgreplyflag.rawValue)
          }
          if hasReqmsgtype {
             hashCode = (hashCode &* 31) &+ reqmsgtype.hashValue
          }
          if hasReqmsgdata {
             hashCode = (hashCode &* 31) &+ reqmsgdata.hashValue
          }
          if hasResmsgtype {
             hashCode = (hashCode &* 31) &+ resmsgtype.hashValue
          }
          if hasResmsgdata {
             hashCode = (hashCode &* 31) &+ resmsgdata.hashValue
          }
          if hasMsguuid {
             hashCode = (hashCode &* 31) &+ msguuid.hashValue
          }
          if hasEnmsgstatuscode {
             hashCode = (hashCode &* 31) &+ Int(enmsgstatuscode.rawValue)
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "PkgMsg"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return PkgMsg.self
  }


  //Meta information declaration end

}

final class PkgMsgBuilder : GeneratedMessageBuilder {
  private var builderResult:PkgMsg

  required override init () {
     builderResult = PkgMsg()
     super.init()
  }
    var hasMsgtype:Bool{
        get {
            return builderResult.hasMsgtype
        }
    }
    var msgtype:PkgMsg.EnMsgType {
        get {
            return builderResult.msgtype
        }
        set (value) {
            builderResult.hasMsgtype = true
            builderResult.msgtype = value
        }
    }
    func clearMsgtype() -> PkgMsgBuilder {
       builderResult.hasMsgtype = false
       builderResult.msgtype = .MsgReq
       return self
    }
  var hasIssuc:Bool {
       get {
            return builderResult.hasIssuc
       }
  }
  var issuc:Bool {
       get {
            return builderResult.issuc
       }
       set (value) {
           builderResult.hasIssuc = true
           builderResult.issuc = value
       }
  }
  func clearIssuc() -> PkgMsgBuilder{
       builderResult.hasIssuc = false
       builderResult.issuc = false
       return self
  }
  var hasErr:Bool {
       get {
            return builderResult.hasErr
       }
  }
  var err:String {
       get {
            return builderResult.err
       }
       set (value) {
           builderResult.hasErr = true
           builderResult.err = value
       }
  }
  func clearErr() -> PkgMsgBuilder{
       builderResult.hasErr = false
       builderResult.err = ""
       return self
  }
  var hasErrdevdesc:Bool {
       get {
            return builderResult.hasErrdevdesc
       }
  }
  var errdevdesc:String {
       get {
            return builderResult.errdevdesc
       }
       set (value) {
           builderResult.hasErrdevdesc = true
           builderResult.errdevdesc = value
       }
  }
  func clearErrdevdesc() -> PkgMsgBuilder{
       builderResult.hasErrdevdesc = false
       builderResult.errdevdesc = ""
       return self
  }
    var hasMsgdirection:Bool{
        get {
            return builderResult.hasMsgdirection
        }
    }
    var msgdirection:PkgMsg.EnMsgDirection {
        get {
            return builderResult.msgdirection
        }
        set (value) {
            builderResult.hasMsgdirection = true
            builderResult.msgdirection = value
        }
    }
    func clearMsgdirection() -> PkgMsgBuilder {
       builderResult.hasMsgdirection = false
       builderResult.msgdirection = .MsgCs
       return self
    }
    var hasMsgreplyflag:Bool{
        get {
            return builderResult.hasMsgreplyflag
        }
    }
    var msgreplyflag:PkgMsg.EnMsgReplyFlag {
        get {
            return builderResult.msgreplyflag
        }
        set (value) {
            builderResult.hasMsgreplyflag = true
            builderResult.msgreplyflag = value
        }
    }
    func clearMsgreplyflag() -> PkgMsgBuilder {
       builderResult.hasMsgreplyflag = false
       builderResult.msgreplyflag = .MsgReplyNormal
       return self
    }
  var hasReqmsgtype:Bool {
       get {
            return builderResult.hasReqmsgtype
       }
  }
  var reqmsgtype:String {
       get {
            return builderResult.reqmsgtype
       }
       set (value) {
           builderResult.hasReqmsgtype = true
           builderResult.reqmsgtype = value
       }
  }
  func clearReqmsgtype() -> PkgMsgBuilder{
       builderResult.hasReqmsgtype = false
       builderResult.reqmsgtype = ""
       return self
  }
  var hasReqmsgdata:Bool {
       get {
            return builderResult.hasReqmsgdata
       }
  }
  var reqmsgdata:String {
       get {
            return builderResult.reqmsgdata
       }
       set (value) {
           builderResult.hasReqmsgdata = true
           builderResult.reqmsgdata = value
       }
  }
  func clearReqmsgdata() -> PkgMsgBuilder{
       builderResult.hasReqmsgdata = false
       builderResult.reqmsgdata = ""
       return self
  }
  var hasResmsgtype:Bool {
       get {
            return builderResult.hasResmsgtype
       }
  }
  var resmsgtype:String {
       get {
            return builderResult.resmsgtype
       }
       set (value) {
           builderResult.hasResmsgtype = true
           builderResult.resmsgtype = value
       }
  }
  func clearResmsgtype() -> PkgMsgBuilder{
       builderResult.hasResmsgtype = false
       builderResult.resmsgtype = ""
       return self
  }
  var hasResmsgdata:Bool {
       get {
            return builderResult.hasResmsgdata
       }
  }
  var resmsgdata:String {
       get {
            return builderResult.resmsgdata
       }
       set (value) {
           builderResult.hasResmsgdata = true
           builderResult.resmsgdata = value
       }
  }
  func clearResmsgdata() -> PkgMsgBuilder{
       builderResult.hasResmsgdata = false
       builderResult.resmsgdata = ""
       return self
  }
  var hasMsguuid:Bool {
       get {
            return builderResult.hasMsguuid
       }
  }
  var msguuid:String {
       get {
            return builderResult.msguuid
       }
       set (value) {
           builderResult.hasMsguuid = true
           builderResult.msguuid = value
       }
  }
  func clearMsguuid() -> PkgMsgBuilder{
       builderResult.hasMsguuid = false
       builderResult.msguuid = ""
       return self
  }
    var hasEnmsgstatuscode:Bool{
        get {
            return builderResult.hasEnmsgstatuscode
        }
    }
    var enmsgstatuscode:PkgMsg.EnMsgStatusCode {
        get {
            return builderResult.enmsgstatuscode
        }
        set (value) {
            builderResult.hasEnmsgstatuscode = true
            builderResult.enmsgstatuscode = value
        }
    }
    func clearEnmsgstatuscode() -> PkgMsgBuilder {
       builderResult.hasEnmsgstatuscode = false
       builderResult.enmsgstatuscode = .MsgStatusnone
       return self
    }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> PkgMsgBuilder {
    builderResult = PkgMsg()
    return self
  }
  override func clone() -> PkgMsgBuilder {
    return PkgMsg.builderWithPrototype(builderResult)
  }
  override func build() -> PkgMsg {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> PkgMsg {
    var returnMe:PkgMsg = builderResult
    return returnMe
  }
  func mergeFrom(other:PkgMsg) -> PkgMsgBuilder {
    if (other == PkgMsg()) {
     return self
    }
    if other.hasMsgtype {
         msgtype = other.msgtype
    }
    if other.hasIssuc {
         issuc = other.issuc
    }
    if other.hasErr {
         err = other.err
    }
    if other.hasErrdevdesc {
         errdevdesc = other.errdevdesc
    }
    if other.hasMsgdirection {
         msgdirection = other.msgdirection
    }
    if other.hasMsgreplyflag {
         msgreplyflag = other.msgreplyflag
    }
    if other.hasReqmsgtype {
         reqmsgtype = other.reqmsgtype
    }
    if other.hasReqmsgdata {
         reqmsgdata = other.reqmsgdata
    }
    if other.hasResmsgtype {
         resmsgtype = other.resmsgtype
    }
    if other.hasResmsgdata {
         resmsgdata = other.resmsgdata
    }
    if other.hasMsguuid {
         msguuid = other.msguuid
    }
    if other.hasEnmsgstatuscode {
         enmsgstatuscode = other.enmsgstatuscode
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->PkgMsgBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PkgMsgBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 8 :
        var value = input.readEnum()
        var enumMergResult:PkgMsg.EnMsgType = PkgMsg.EnMsgType(rawValue:value)!
        if (PkgMsg.EnMsgType.IsValidValue(enumMergResult)) {
             msgtype = enumMergResult
        } else {
             unknownFieldsBuilder.mergeVarintField(1, value:Int64(value))
        }

      case 16 :
        issuc = input.readBool()

      case 26 :
        err = input.readString()

      case 34 :
        errdevdesc = input.readString()

      case 40 :
        var value = input.readEnum()
        var enumMergResult:PkgMsg.EnMsgDirection = PkgMsg.EnMsgDirection(rawValue:value)!
        if (PkgMsg.EnMsgDirection.IsValidValue(enumMergResult)) {
             msgdirection = enumMergResult
        } else {
             unknownFieldsBuilder.mergeVarintField(5, value:Int64(value))
        }

      case 48 :
        var value = input.readEnum()
        var enumMergResult:PkgMsg.EnMsgReplyFlag = PkgMsg.EnMsgReplyFlag(rawValue:value)!
        if (PkgMsg.EnMsgReplyFlag.IsValidValue(enumMergResult)) {
             msgreplyflag = enumMergResult
        } else {
             unknownFieldsBuilder.mergeVarintField(6, value:Int64(value))
        }

      case 90 :
        reqmsgtype = input.readString()

      case 98 :
        reqmsgdata = input.readString()

      case 106 :
        resmsgtype = input.readString()

      case 114 :
        resmsgdata = input.readString()

      case 402 :
        msguuid = input.readString()

      case 800 :
        var value = input.readEnum()
        var enumMergResult:PkgMsg.EnMsgStatusCode = PkgMsg.EnMsgStatusCode(rawValue:value)!
        if (PkgMsg.EnMsgStatusCode.IsValidValue(enumMergResult)) {
             enmsgstatuscode = enumMergResult
        } else {
             unknownFieldsBuilder.mergeVarintField(100, value:Int64(value))
        }

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class PkgSessionUser : GeneratedMessage {
  private(set) var hasUseruuid:Bool = false
  private(set) var useruuid:String = ""

  private(set) var hasIslogined:Bool = false
  private(set) var islogined:Bool = false

  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasUseruuid {
      output.writeString(1, value:useruuid)
    }
    if hasIslogined {
      output.writeBool(10, value:islogined)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasUseruuid {
      size += WireFormat.computeStringSize(1, value:useruuid)
    }
    if hasIslogined {
      size += WireFormat.computeBoolSize(10, value:islogined)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> PkgSessionUser {
    return PkgSessionUser.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> PkgSessionUser {
    return PkgSessionUser.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> PkgSessionUser {
    return PkgSessionUser.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PkgSessionUser {
    return PkgSessionUser.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> PkgSessionUser {
    return PkgSessionUser.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PkgSessionUser {
    return PkgSessionUser.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> PkgSessionUserBuilder {
    return PkgSessionUserBuilder()
  }
  class func builderWithPrototype(prototype:PkgSessionUser) -> PkgSessionUserBuilder {
    return PkgSessionUser.builder().mergeFrom(prototype)
  }
  func builder() -> PkgSessionUserBuilder {
    return PkgSessionUser.builder()
  }
  func toBuilder() -> PkgSessionUserBuilder {
    return PkgSessionUser.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if hasUseruuid {
      output += "\(indent) useruuid: \(useruuid) \n"
    }
    if hasIslogined {
      output += "\(indent) islogined: \(islogined) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasUseruuid {
             hashCode = (hashCode &* 31) &+ useruuid.hashValue
          }
          if hasIslogined {
             hashCode = (hashCode &* 31) &+ islogined.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "PkgSessionUser"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return PkgSessionUser.self
  }


  //Meta information declaration end

}

final class PkgSessionUserBuilder : GeneratedMessageBuilder {
  private var builderResult:PkgSessionUser

  required override init () {
     builderResult = PkgSessionUser()
     super.init()
  }
  var hasUseruuid:Bool {
       get {
            return builderResult.hasUseruuid
       }
  }
  var useruuid:String {
       get {
            return builderResult.useruuid
       }
       set (value) {
           builderResult.hasUseruuid = true
           builderResult.useruuid = value
       }
  }
  func clearUseruuid() -> PkgSessionUserBuilder{
       builderResult.hasUseruuid = false
       builderResult.useruuid = ""
       return self
  }
  var hasIslogined:Bool {
       get {
            return builderResult.hasIslogined
       }
  }
  var islogined:Bool {
       get {
            return builderResult.islogined
       }
       set (value) {
           builderResult.hasIslogined = true
           builderResult.islogined = value
       }
  }
  func clearIslogined() -> PkgSessionUserBuilder{
       builderResult.hasIslogined = false
       builderResult.islogined = false
       return self
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> PkgSessionUserBuilder {
    builderResult = PkgSessionUser()
    return self
  }
  override func clone() -> PkgSessionUserBuilder {
    return PkgSessionUser.builderWithPrototype(builderResult)
  }
  override func build() -> PkgSessionUser {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> PkgSessionUser {
    var returnMe:PkgSessionUser = builderResult
    return returnMe
  }
  func mergeFrom(other:PkgSessionUser) -> PkgSessionUserBuilder {
    if (other == PkgSessionUser()) {
     return self
    }
    if other.hasUseruuid {
         useruuid = other.useruuid
    }
    if other.hasIslogined {
         islogined = other.islogined
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->PkgSessionUserBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PkgSessionUserBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 10 :
        useruuid = input.readString()

      case 80 :
        islogined = input.readBool()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

//Class extensions: NSData


extension PkgMsg {
    class func parseFromNSData(data:NSData) -> PkgMsg {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return PkgMsg.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> PkgMsg {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return PkgMsg.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension PkgSessionUser {
    class func parseFromNSData(data:NSData) -> PkgSessionUser {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return PkgSessionUser.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> PkgSessionUser {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return PkgSessionUser.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}

// @@protoc_insertion_point(global_scope)
