// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
//import ProtocolBuffers

struct XkcrmRoot {
  static var sharedInstance : XkcrmRoot {
   struct Static {
       static let instance : XkcrmRoot = XkcrmRoot()
   }
   return Static.instance
  }
  var extensionRegistry:ExtensionRegistry

  init() {
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(extensionRegistry)
    NosqldbRoot.sharedInstance.registerAllExtensions(extensionRegistry)
  }
  func registerAllExtensions(registry:ExtensionRegistry) {
  }
}



//Enum type declaration start 

enum EnGetType:Int32 {
  case GtPhone = 0
  case GtEmail = 1
  case GtUserid = 2
  case GtUsername = 3

  static func IsValidValue(value:EnGetType) ->Bool {
    switch value {
      case .GtPhone, .GtEmail, .GtUserid, .GtUsername:
        return true;
      default:
        return false;
    }
  }
}



//Enum type declaration end 



//Enum type declaration start 

enum EnOperation:Int32 {
  case ToInsert = 1
  case ToUpdate = 16
  case ToDelete = 64

  static func IsValidValue(value:EnOperation) ->Bool {
    switch value {
      case .ToInsert, .ToUpdate, .ToDelete:
        return true;
      default:
        return false;
    }
  }
}



//Enum type declaration end 



//Enum type declaration start 

enum EnQueryCondition:Int32 {
  case TqcDatestart = 1
  case TqcDateend = 2
  case TqcKeyforname = 4
  case TqcKeyforcontent = 8
  case TqcPartneruuid = 16
  case TqcLeaduuid = 32
  case TqcSelfuuid = 64

  static func IsValidValue(value:EnQueryCondition) ->Bool {
    switch value {
      case .TqcDatestart, .TqcDateend, .TqcKeyforname, .TqcKeyforcontent, .TqcPartneruuid, .TqcLeaduuid, .TqcSelfuuid:
        return true;
      default:
        return false;
    }
  }
}



//Enum type declaration end 



//Enum type declaration start 

enum EnPageFlag:Int32 {
  case POnlynum = 1
  case PReturnall = 2
  case PReturnpage = 3

  static func IsValidValue(value:EnPageFlag) ->Bool {
    switch value {
      case .POnlynum, .PReturnall, .PReturnpage:
        return true;
      default:
        return false;
    }
  }
}



//Enum type declaration end 

func == (lhs: PkgUserLoginReq, rhs: PkgUserLoginReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasGettype == rhs.hasGettype) && (!lhs.hasGettype || lhs.gettype == rhs.gettype)
  fieldCheck = fieldCheck && (lhs.hasUserid == rhs.hasUserid) && (!lhs.hasUserid || lhs.userid == rhs.userid)
  fieldCheck = fieldCheck && (lhs.hasPhonenumber == rhs.hasPhonenumber) && (!lhs.hasPhonenumber || lhs.phonenumber == rhs.phonenumber)
  fieldCheck = fieldCheck && (lhs.hasEmailaddress == rhs.hasEmailaddress) && (!lhs.hasEmailaddress || lhs.emailaddress == rhs.emailaddress)
  fieldCheck = fieldCheck && (lhs.hasUsername == rhs.hasUsername) && (!lhs.hasUsername || lhs.username == rhs.username)
  fieldCheck = fieldCheck && (lhs.hasPassword == rhs.hasPassword) && (!lhs.hasPassword || lhs.password == rhs.password)
  fieldCheck = fieldCheck && (lhs.hasHashedserversn == rhs.hasHashedserversn) && (!lhs.hasHashedserversn || lhs.hashedserversn == rhs.hashedserversn)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: PkgUserLoginReply, rhs: PkgUserLoginReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  fieldCheck = fieldCheck && (lhs.hasUserinfo == rhs.hasUserinfo) && (!lhs.hasUserinfo || lhs.userinfo == rhs.userinfo)
  fieldCheck = fieldCheck && (lhs.hasCompanyinfo == rhs.hasCompanyinfo) && (!lhs.hasCompanyinfo || lhs.companyinfo == rhs.companyinfo)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: PkgOptPartnerReq, rhs: PkgOptPartnerReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasOpt == rhs.hasOpt) && (!lhs.hasOpt || lhs.opt == rhs.opt)
  fieldCheck = fieldCheck && (lhs.hasPartner == rhs.hasPartner) && (!lhs.hasPartner || lhs.partner == rhs.partner)
  fieldCheck = fieldCheck && (lhs.hasUuidpartner == rhs.hasUuidpartner) && (!lhs.hasUuidpartner || lhs.uuidpartner == rhs.uuidpartner)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: PkgOptPartnerReply, rhs: PkgOptPartnerReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: PkgOptLeadReq, rhs: PkgOptLeadReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasOpt == rhs.hasOpt) && (!lhs.hasOpt || lhs.opt == rhs.opt)
  fieldCheck = fieldCheck && (lhs.hasLead == rhs.hasLead) && (!lhs.hasLead || lhs.lead == rhs.lead)
  fieldCheck = fieldCheck && (lhs.hasUuidleadid == rhs.hasUuidleadid) && (!lhs.hasUuidleadid || lhs.uuidleadid == rhs.uuidleadid)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: PkgOptLeadReply, rhs: PkgOptLeadReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: PkgOptPhonecallReq, rhs: PkgOptPhonecallReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasOpt == rhs.hasOpt) && (!lhs.hasOpt || lhs.opt == rhs.opt)
  fieldCheck = fieldCheck && (lhs.hasPhonecall == rhs.hasPhonecall) && (!lhs.hasPhonecall || lhs.phonecall == rhs.phonecall)
  fieldCheck = fieldCheck && (lhs.hasUuidphonecallid == rhs.hasUuidphonecallid) && (!lhs.hasUuidphonecallid || lhs.uuidphonecallid == rhs.uuidphonecallid)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: PkgOptPhonecallReply, rhs: PkgOptPhonecallReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: PkgQueryCondition, rhs: PkgQueryCondition) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasTaskdatestart == rhs.hasTaskdatestart) && (!lhs.hasTaskdatestart || lhs.taskdatestart == rhs.taskdatestart)
  fieldCheck = fieldCheck && (lhs.hasTaskdateend == rhs.hasTaskdateend) && (!lhs.hasTaskdateend || lhs.taskdateend == rhs.taskdateend)
  fieldCheck = fieldCheck && (lhs.hasKeyforname == rhs.hasKeyforname) && (!lhs.hasKeyforname || lhs.keyforname == rhs.keyforname)
  fieldCheck = fieldCheck && (lhs.hasKeyforcontent == rhs.hasKeyforcontent) && (!lhs.hasKeyforcontent || lhs.keyforcontent == rhs.keyforcontent)
  fieldCheck = fieldCheck && (lhs.hasPartneruuid == rhs.hasPartneruuid) && (!lhs.hasPartneruuid || lhs.partneruuid == rhs.partneruuid)
  fieldCheck = fieldCheck && (lhs.hasLeaduuid == rhs.hasLeaduuid) && (!lhs.hasLeaduuid || lhs.leaduuid == rhs.leaduuid)
  fieldCheck = fieldCheck && (lhs.hasSelfuuid == rhs.hasSelfuuid) && (!lhs.hasSelfuuid || lhs.selfuuid == rhs.selfuuid)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: PkgPageQueryPartnerReq, rhs: PkgPageQueryPartnerReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasEnconditon == rhs.hasEnconditon) && (!lhs.hasEnconditon || lhs.enconditon == rhs.enconditon)
  fieldCheck = fieldCheck && (lhs.hasPkgquerycondition == rhs.hasPkgquerycondition) && (!lhs.hasPkgquerycondition || lhs.pkgquerycondition == rhs.pkgquerycondition)
  fieldCheck = fieldCheck && (lhs.hasPageflag == rhs.hasPageflag) && (!lhs.hasPageflag || lhs.pageflag == rhs.pageflag)
  fieldCheck = fieldCheck && (lhs.hasIndexstart == rhs.hasIndexstart) && (!lhs.hasIndexstart || lhs.indexstart == rhs.indexstart)
  fieldCheck = fieldCheck && (lhs.hasIndexend == rhs.hasIndexend) && (!lhs.hasIndexend || lhs.indexend == rhs.indexend)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: PkgPageQueryPartnerReply, rhs: PkgPageQueryPartnerReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  fieldCheck = fieldCheck && (lhs.rows == rhs.rows)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: PkgPageQueryLeadReq, rhs: PkgPageQueryLeadReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasEnconditon == rhs.hasEnconditon) && (!lhs.hasEnconditon || lhs.enconditon == rhs.enconditon)
  fieldCheck = fieldCheck && (lhs.hasPkgquerycondition == rhs.hasPkgquerycondition) && (!lhs.hasPkgquerycondition || lhs.pkgquerycondition == rhs.pkgquerycondition)
  fieldCheck = fieldCheck && (lhs.hasPageflag == rhs.hasPageflag) && (!lhs.hasPageflag || lhs.pageflag == rhs.pageflag)
  fieldCheck = fieldCheck && (lhs.hasIndexstart == rhs.hasIndexstart) && (!lhs.hasIndexstart || lhs.indexstart == rhs.indexstart)
  fieldCheck = fieldCheck && (lhs.hasIndexend == rhs.hasIndexend) && (!lhs.hasIndexend || lhs.indexend == rhs.indexend)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: PkgPageQueryLeadReply, rhs: PkgPageQueryLeadReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  fieldCheck = fieldCheck && (lhs.rows == rhs.rows)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: PkgPageQueryPhonecallReq, rhs: PkgPageQueryPhonecallReq) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasEnconditon == rhs.hasEnconditon) && (!lhs.hasEnconditon || lhs.enconditon == rhs.enconditon)
  fieldCheck = fieldCheck && (lhs.hasPkgquerycondition == rhs.hasPkgquerycondition) && (!lhs.hasPkgquerycondition || lhs.pkgquerycondition == rhs.pkgquerycondition)
  fieldCheck = fieldCheck && (lhs.hasPageflag == rhs.hasPageflag) && (!lhs.hasPageflag || lhs.pageflag == rhs.pageflag)
  fieldCheck = fieldCheck && (lhs.hasIndexstart == rhs.hasIndexstart) && (!lhs.hasIndexstart || lhs.indexstart == rhs.indexstart)
  fieldCheck = fieldCheck && (lhs.hasIndexend == rhs.hasIndexend) && (!lhs.hasIndexend || lhs.indexend == rhs.indexend)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: PkgPageQueryPhonecallReply, rhs: PkgPageQueryPhonecallReply) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasIssuccess == rhs.hasIssuccess) && (!lhs.hasIssuccess || lhs.issuccess == rhs.issuccess)
  fieldCheck = fieldCheck && (lhs.hasErr == rhs.hasErr) && (!lhs.hasErr || lhs.err == rhs.err)
  fieldCheck = fieldCheck && (lhs.rows == rhs.rows)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

final public class PkgUserLoginReq : GeneratedMessage {
  private(set) var gettype:EnGetType = EnGetType.GtPhone
  private(set) var hasGettype:Bool = false
  private(set) var hasUserid:Bool = false
  private(set) var userid:Int32 = Int32(0)

  private(set) var hasPhonenumber:Bool = false
  private(set) var phonenumber:String = ""

  private(set) var hasEmailaddress:Bool = false
  private(set) var emailaddress:String = ""

  private(set) var hasUsername:Bool = false
  private(set) var username:String = ""

  private(set) var hasPassword:Bool = false
  private(set) var password:String = ""

  private(set) var hasHashedserversn:Bool = false
  private(set) var hashedserversn:String = ""

  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
    if !hasGettype {
      return false
    }
    if !hasPassword {
      return false
    }
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasGettype {
      output.writeEnum(1, value:gettype.rawValue)
    }
    if hasUserid {
      output.writeInt32(2, value:userid)
    }
    if hasPhonenumber {
      output.writeString(3, value:phonenumber)
    }
    if hasEmailaddress {
      output.writeString(4, value:emailaddress)
    }
    if hasUsername {
      output.writeString(5, value:username)
    }
    if hasPassword {
      output.writeString(10, value:password)
    }
    if hasHashedserversn {
      output.writeString(100, value:hashedserversn)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if (hasGettype) {
      size += WireFormat.computeEnumSize(1, value:gettype.rawValue)
    }
    if hasUserid {
      size += WireFormat.computeInt32Size(2, value:userid)
    }
    if hasPhonenumber {
      size += WireFormat.computeStringSize(3, value:phonenumber)
    }
    if hasEmailaddress {
      size += WireFormat.computeStringSize(4, value:emailaddress)
    }
    if hasUsername {
      size += WireFormat.computeStringSize(5, value:username)
    }
    if hasPassword {
      size += WireFormat.computeStringSize(10, value:password)
    }
    if hasHashedserversn {
      size += WireFormat.computeStringSize(100, value:hashedserversn)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> PkgUserLoginReq {
    return PkgUserLoginReq.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> PkgUserLoginReq {
    return PkgUserLoginReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> PkgUserLoginReq {
    return PkgUserLoginReq.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PkgUserLoginReq {
    return PkgUserLoginReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> PkgUserLoginReq {
    return PkgUserLoginReq.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PkgUserLoginReq {
    return PkgUserLoginReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> PkgUserLoginReqBuilder {
    return PkgUserLoginReqBuilder()
  }
  class func builderWithPrototype(prototype:PkgUserLoginReq) -> PkgUserLoginReqBuilder {
    return PkgUserLoginReq.builder().mergeFrom(prototype)
  }
  func builder() -> PkgUserLoginReqBuilder {
    return PkgUserLoginReq.builder()
  }
  func toBuilder() -> PkgUserLoginReqBuilder {
    return PkgUserLoginReq.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if (hasGettype) {
      output += "\(indent) gettype: \(gettype.rawValue)\n"
    }
    if hasUserid {
      output += "\(indent) userid: \(userid) \n"
    }
    if hasPhonenumber {
      output += "\(indent) phonenumber: \(phonenumber) \n"
    }
    if hasEmailaddress {
      output += "\(indent) emailaddress: \(emailaddress) \n"
    }
    if hasUsername {
      output += "\(indent) username: \(username) \n"
    }
    if hasPassword {
      output += "\(indent) password: \(password) \n"
    }
    if hasHashedserversn {
      output += "\(indent) hashedserversn: \(hashedserversn) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasGettype {
             hashCode = (hashCode &* 31) &+ Int(gettype.rawValue)
          }
          if hasUserid {
             hashCode = (hashCode &* 31) &+ userid.hashValue
          }
          if hasPhonenumber {
             hashCode = (hashCode &* 31) &+ phonenumber.hashValue
          }
          if hasEmailaddress {
             hashCode = (hashCode &* 31) &+ emailaddress.hashValue
          }
          if hasUsername {
             hashCode = (hashCode &* 31) &+ username.hashValue
          }
          if hasPassword {
             hashCode = (hashCode &* 31) &+ password.hashValue
          }
          if hasHashedserversn {
             hashCode = (hashCode &* 31) &+ hashedserversn.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "PkgUserLoginReq"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return PkgUserLoginReq.self
  }


  //Meta information declaration end

}

final class PkgUserLoginReqBuilder : GeneratedMessageBuilder {
  private var builderResult:PkgUserLoginReq

  required override init () {
     builderResult = PkgUserLoginReq()
     super.init()
  }
    var hasGettype:Bool{
        get {
            return builderResult.hasGettype
        }
    }
    var gettype:EnGetType {
        get {
            return builderResult.gettype
        }
        set (value) {
            builderResult.hasGettype = true
            builderResult.gettype = value
        }
    }
    func clearGettype() -> PkgUserLoginReqBuilder {
       builderResult.hasGettype = false
       builderResult.gettype = .GtPhone
       return self
    }
  var hasUserid:Bool {
       get {
            return builderResult.hasUserid
       }
  }
  var userid:Int32 {
       get {
            return builderResult.userid
       }
       set (value) {
           builderResult.hasUserid = true
           builderResult.userid = value
       }
  }
  func clearUserid() -> PkgUserLoginReqBuilder{
       builderResult.hasUserid = false
       builderResult.userid = Int32(0)
       return self
  }
  var hasPhonenumber:Bool {
       get {
            return builderResult.hasPhonenumber
       }
  }
  var phonenumber:String {
       get {
            return builderResult.phonenumber
       }
       set (value) {
           builderResult.hasPhonenumber = true
           builderResult.phonenumber = value
       }
  }
  func clearPhonenumber() -> PkgUserLoginReqBuilder{
       builderResult.hasPhonenumber = false
       builderResult.phonenumber = ""
       return self
  }
  var hasEmailaddress:Bool {
       get {
            return builderResult.hasEmailaddress
       }
  }
  var emailaddress:String {
       get {
            return builderResult.emailaddress
       }
       set (value) {
           builderResult.hasEmailaddress = true
           builderResult.emailaddress = value
       }
  }
  func clearEmailaddress() -> PkgUserLoginReqBuilder{
       builderResult.hasEmailaddress = false
       builderResult.emailaddress = ""
       return self
  }
  var hasUsername:Bool {
       get {
            return builderResult.hasUsername
       }
  }
  var username:String {
       get {
            return builderResult.username
       }
       set (value) {
           builderResult.hasUsername = true
           builderResult.username = value
       }
  }
  func clearUsername() -> PkgUserLoginReqBuilder{
       builderResult.hasUsername = false
       builderResult.username = ""
       return self
  }
  var hasPassword:Bool {
       get {
            return builderResult.hasPassword
       }
  }
  var password:String {
       get {
            return builderResult.password
       }
       set (value) {
           builderResult.hasPassword = true
           builderResult.password = value
       }
  }
  func clearPassword() -> PkgUserLoginReqBuilder{
       builderResult.hasPassword = false
       builderResult.password = ""
       return self
  }
  var hasHashedserversn:Bool {
       get {
            return builderResult.hasHashedserversn
       }
  }
  var hashedserversn:String {
       get {
            return builderResult.hashedserversn
       }
       set (value) {
           builderResult.hasHashedserversn = true
           builderResult.hashedserversn = value
       }
  }
  func clearHashedserversn() -> PkgUserLoginReqBuilder{
       builderResult.hasHashedserversn = false
       builderResult.hashedserversn = ""
       return self
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> PkgUserLoginReqBuilder {
    builderResult = PkgUserLoginReq()
    return self
  }
  override func clone() -> PkgUserLoginReqBuilder {
    return PkgUserLoginReq.builderWithPrototype(builderResult)
  }
  override func build() -> PkgUserLoginReq {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> PkgUserLoginReq {
    var returnMe:PkgUserLoginReq = builderResult
    return returnMe
  }
  func mergeFrom(other:PkgUserLoginReq) -> PkgUserLoginReqBuilder {
    if (other == PkgUserLoginReq()) {
     return self
    }
    if other.hasGettype {
         gettype = other.gettype
    }
    if other.hasUserid {
         userid = other.userid
    }
    if other.hasPhonenumber {
         phonenumber = other.phonenumber
    }
    if other.hasEmailaddress {
         emailaddress = other.emailaddress
    }
    if other.hasUsername {
         username = other.username
    }
    if other.hasPassword {
         password = other.password
    }
    if other.hasHashedserversn {
         hashedserversn = other.hashedserversn
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->PkgUserLoginReqBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PkgUserLoginReqBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 8 :
        var value = input.readEnum()
        var enumMergResult:EnGetType = EnGetType(rawValue:value)!
        if (EnGetType.IsValidValue(enumMergResult)) {
             gettype = enumMergResult
        } else {
             unknownFieldsBuilder.mergeVarintField(1, value:Int64(value))
        }

      case 16 :
        userid = input.readInt32()

      case 26 :
        phonenumber = input.readString()

      case 34 :
        emailaddress = input.readString()

      case 42 :
        username = input.readString()

      case 82 :
        password = input.readString()

      case 802 :
        hashedserversn = input.readString()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class PkgUserLoginReply : GeneratedMessage {
  private(set) var hasIssuccess:Bool = false
  private(set) var issuccess:Bool = true

  private(set) var hasErr:Bool = false
  private(set) var err:String = ""

  private(set) var hasUserinfo:Bool = false
  private(set) var userinfo:db_res_users = db_res_users()
  private(set) var hasCompanyinfo:Bool = false
  private(set) var companyinfo:db_res_company = db_res_company()
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
    if !hasIssuccess {
      return false
    }
    if hasUserinfo {
     if !userinfo.isInitialized() {
       return false
     }
    }
    if hasCompanyinfo {
     if !companyinfo.isInitialized() {
       return false
     }
    }
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasIssuccess {
      output.writeBool(1, value:issuccess)
    }
    if hasErr {
      output.writeString(2, value:err)
    }
    if hasUserinfo {
      output.writeMessage(11, value:userinfo)
    }
    if hasCompanyinfo {
      output.writeMessage(12, value:companyinfo)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasIssuccess {
      size += WireFormat.computeBoolSize(1, value:issuccess)
    }
    if hasErr {
      size += WireFormat.computeStringSize(2, value:err)
    }
    if hasUserinfo {
      size += WireFormat.computeMessageSize(11, value:userinfo)
    }
    if hasCompanyinfo {
      size += WireFormat.computeMessageSize(12, value:companyinfo)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> PkgUserLoginReply {
    return PkgUserLoginReply.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> PkgUserLoginReply {
    return PkgUserLoginReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> PkgUserLoginReply {
    return PkgUserLoginReply.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PkgUserLoginReply {
    return PkgUserLoginReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> PkgUserLoginReply {
    return PkgUserLoginReply.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PkgUserLoginReply {
    return PkgUserLoginReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> PkgUserLoginReplyBuilder {
    return PkgUserLoginReplyBuilder()
  }
  class func builderWithPrototype(prototype:PkgUserLoginReply) -> PkgUserLoginReplyBuilder {
    return PkgUserLoginReply.builder().mergeFrom(prototype)
  }
  func builder() -> PkgUserLoginReplyBuilder {
    return PkgUserLoginReply.builder()
  }
  func toBuilder() -> PkgUserLoginReplyBuilder {
    return PkgUserLoginReply.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if hasIssuccess {
      output += "\(indent) issuccess: \(issuccess) \n"
    }
    if hasErr {
      output += "\(indent) err: \(err) \n"
    }
    if hasUserinfo {
      output += "\(indent) userinfo {\n"
      userinfo.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    if hasCompanyinfo {
      output += "\(indent) companyinfo {\n"
      companyinfo.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasIssuccess {
             hashCode = (hashCode &* 31) &+ issuccess.hashValue
          }
          if hasErr {
             hashCode = (hashCode &* 31) &+ err.hashValue
          }
          if hasUserinfo {
            hashCode = (hashCode &* 31) &+ userinfo.hashValue
          }
          if hasCompanyinfo {
            hashCode = (hashCode &* 31) &+ companyinfo.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "PkgUserLoginReply"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return PkgUserLoginReply.self
  }


  //Meta information declaration end

}

final class PkgUserLoginReplyBuilder : GeneratedMessageBuilder {
  private var builderResult:PkgUserLoginReply

  required override init () {
     builderResult = PkgUserLoginReply()
     super.init()
  }
  var hasIssuccess:Bool {
       get {
            return builderResult.hasIssuccess
       }
  }
  var issuccess:Bool {
       get {
            return builderResult.issuccess
       }
       set (value) {
           builderResult.hasIssuccess = true
           builderResult.issuccess = value
       }
  }
  func clearIssuccess() -> PkgUserLoginReplyBuilder{
       builderResult.hasIssuccess = false
       builderResult.issuccess = true
       return self
  }
  var hasErr:Bool {
       get {
            return builderResult.hasErr
       }
  }
  var err:String {
       get {
            return builderResult.err
       }
       set (value) {
           builderResult.hasErr = true
           builderResult.err = value
       }
  }
  func clearErr() -> PkgUserLoginReplyBuilder{
       builderResult.hasErr = false
       builderResult.err = ""
       return self
  }
  var hasUserinfo:Bool {
       get {
           return builderResult.hasUserinfo
       }
  }
  var userinfo:db_res_users {
       get {
           return builderResult.userinfo
       }
       set (value) {
           builderResult.hasUserinfo = true
           builderResult.userinfo = value
       }
  }
  func setUserinfoBuilder(builderForValue:db_res_usersBuilder) -> PkgUserLoginReplyBuilder {
    userinfo = builderForValue.build()
    return self
  }
  func mergeUserinfo(value:db_res_users) -> PkgUserLoginReplyBuilder {
    if (builderResult.hasUserinfo && builderResult.userinfo != db_res_users()) {
      builderResult.userinfo = db_res_users.builderWithPrototype(builderResult.userinfo).mergeFrom(value).buildPartial()
    } else {
      builderResult.userinfo = value
    }
    builderResult.hasUserinfo = true
    return self
  }
  func clearUserinfo() -> PkgUserLoginReplyBuilder {
    builderResult.hasUserinfo = false
    builderResult.userinfo = db_res_users()
    return self
  }
  var hasCompanyinfo:Bool {
       get {
           return builderResult.hasCompanyinfo
       }
  }
  var companyinfo:db_res_company {
       get {
           return builderResult.companyinfo
       }
       set (value) {
           builderResult.hasCompanyinfo = true
           builderResult.companyinfo = value
       }
  }
  func setCompanyinfoBuilder(builderForValue:db_res_companyBuilder) -> PkgUserLoginReplyBuilder {
    companyinfo = builderForValue.build()
    return self
  }
  func mergeCompanyinfo(value:db_res_company) -> PkgUserLoginReplyBuilder {
    if (builderResult.hasCompanyinfo && builderResult.companyinfo != db_res_company()) {
      builderResult.companyinfo = db_res_company.builderWithPrototype(builderResult.companyinfo).mergeFrom(value).buildPartial()
    } else {
      builderResult.companyinfo = value
    }
    builderResult.hasCompanyinfo = true
    return self
  }
  func clearCompanyinfo() -> PkgUserLoginReplyBuilder {
    builderResult.hasCompanyinfo = false
    builderResult.companyinfo = db_res_company()
    return self
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> PkgUserLoginReplyBuilder {
    builderResult = PkgUserLoginReply()
    return self
  }
  override func clone() -> PkgUserLoginReplyBuilder {
    return PkgUserLoginReply.builderWithPrototype(builderResult)
  }
  override func build() -> PkgUserLoginReply {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> PkgUserLoginReply {
    var returnMe:PkgUserLoginReply = builderResult
    return returnMe
  }
  func mergeFrom(other:PkgUserLoginReply) -> PkgUserLoginReplyBuilder {
    if (other == PkgUserLoginReply()) {
     return self
    }
    if other.hasIssuccess {
         issuccess = other.issuccess
    }
    if other.hasErr {
         err = other.err
    }
    if (other.hasUserinfo) {
        mergeUserinfo(other.userinfo)
    }
    if (other.hasCompanyinfo) {
        mergeCompanyinfo(other.companyinfo)
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->PkgUserLoginReplyBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PkgUserLoginReplyBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 8 :
        issuccess = input.readBool()

      case 18 :
        err = input.readString()

      case 90 :
        var subBuilder:db_res_usersBuilder = db_res_users.builder()
        if hasUserinfo {
          subBuilder.mergeFrom(userinfo)
        }
        input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
        userinfo = subBuilder.buildPartial()

      case 98 :
        var subBuilder:db_res_companyBuilder = db_res_company.builder()
        if hasCompanyinfo {
          subBuilder.mergeFrom(companyinfo)
        }
        input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
        companyinfo = subBuilder.buildPartial()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class PkgOptPartnerReq : GeneratedMessage {
  private(set) var opt:EnOperation = EnOperation.ToInsert
  private(set) var hasOpt:Bool = false
  private(set) var hasPartner:Bool = false
  private(set) var partner:db_res_partner = db_res_partner()
  private(set) var hasUuidpartner:Bool = false
  private(set) var uuidpartner:String = ""

  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
    if !hasOpt {
      return false
    }
    if hasPartner {
     if !partner.isInitialized() {
       return false
     }
    }
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasOpt {
      output.writeEnum(1, value:opt.rawValue)
    }
    if hasPartner {
      output.writeMessage(2, value:partner)
    }
    if hasUuidpartner {
      output.writeString(3, value:uuidpartner)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if (hasOpt) {
      size += WireFormat.computeEnumSize(1, value:opt.rawValue)
    }
    if hasPartner {
      size += WireFormat.computeMessageSize(2, value:partner)
    }
    if hasUuidpartner {
      size += WireFormat.computeStringSize(3, value:uuidpartner)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> PkgOptPartnerReq {
    return PkgOptPartnerReq.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> PkgOptPartnerReq {
    return PkgOptPartnerReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> PkgOptPartnerReq {
    return PkgOptPartnerReq.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PkgOptPartnerReq {
    return PkgOptPartnerReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> PkgOptPartnerReq {
    return PkgOptPartnerReq.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PkgOptPartnerReq {
    return PkgOptPartnerReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> PkgOptPartnerReqBuilder {
    return PkgOptPartnerReqBuilder()
  }
  class func builderWithPrototype(prototype:PkgOptPartnerReq) -> PkgOptPartnerReqBuilder {
    return PkgOptPartnerReq.builder().mergeFrom(prototype)
  }
  func builder() -> PkgOptPartnerReqBuilder {
    return PkgOptPartnerReq.builder()
  }
  func toBuilder() -> PkgOptPartnerReqBuilder {
    return PkgOptPartnerReq.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if (hasOpt) {
      output += "\(indent) opt: \(opt.rawValue)\n"
    }
    if hasPartner {
      output += "\(indent) partner {\n"
      partner.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    if hasUuidpartner {
      output += "\(indent) uuidpartner: \(uuidpartner) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasOpt {
             hashCode = (hashCode &* 31) &+ Int(opt.rawValue)
          }
          if hasPartner {
            hashCode = (hashCode &* 31) &+ partner.hashValue
          }
          if hasUuidpartner {
             hashCode = (hashCode &* 31) &+ uuidpartner.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "PkgOptPartnerReq"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return PkgOptPartnerReq.self
  }


  //Meta information declaration end

}

final class PkgOptPartnerReqBuilder : GeneratedMessageBuilder {
  private var builderResult:PkgOptPartnerReq

  required override init () {
     builderResult = PkgOptPartnerReq()
     super.init()
  }
    var hasOpt:Bool{
        get {
            return builderResult.hasOpt
        }
    }
    var opt:EnOperation {
        get {
            return builderResult.opt
        }
        set (value) {
            builderResult.hasOpt = true
            builderResult.opt = value
        }
    }
    func clearOpt() -> PkgOptPartnerReqBuilder {
       builderResult.hasOpt = false
       builderResult.opt = .ToInsert
       return self
    }
  var hasPartner:Bool {
       get {
           return builderResult.hasPartner
       }
  }
  var partner:db_res_partner {
       get {
           return builderResult.partner
       }
       set (value) {
           builderResult.hasPartner = true
           builderResult.partner = value
       }
  }
  func setPartnerBuilder(builderForValue:db_res_partnerBuilder) -> PkgOptPartnerReqBuilder {
    partner = builderForValue.build()
    return self
  }
  func mergePartner(value:db_res_partner) -> PkgOptPartnerReqBuilder {
    if (builderResult.hasPartner && builderResult.partner != db_res_partner()) {
      builderResult.partner = db_res_partner.builderWithPrototype(builderResult.partner).mergeFrom(value).buildPartial()
    } else {
      builderResult.partner = value
    }
    builderResult.hasPartner = true
    return self
  }
  func clearPartner() -> PkgOptPartnerReqBuilder {
    builderResult.hasPartner = false
    builderResult.partner = db_res_partner()
    return self
  }
  var hasUuidpartner:Bool {
       get {
            return builderResult.hasUuidpartner
       }
  }
  var uuidpartner:String {
       get {
            return builderResult.uuidpartner
       }
       set (value) {
           builderResult.hasUuidpartner = true
           builderResult.uuidpartner = value
       }
  }
  func clearUuidpartner() -> PkgOptPartnerReqBuilder{
       builderResult.hasUuidpartner = false
       builderResult.uuidpartner = ""
       return self
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> PkgOptPartnerReqBuilder {
    builderResult = PkgOptPartnerReq()
    return self
  }
  override func clone() -> PkgOptPartnerReqBuilder {
    return PkgOptPartnerReq.builderWithPrototype(builderResult)
  }
  override func build() -> PkgOptPartnerReq {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> PkgOptPartnerReq {
    var returnMe:PkgOptPartnerReq = builderResult
    return returnMe
  }
  func mergeFrom(other:PkgOptPartnerReq) -> PkgOptPartnerReqBuilder {
    if (other == PkgOptPartnerReq()) {
     return self
    }
    if other.hasOpt {
         opt = other.opt
    }
    if (other.hasPartner) {
        mergePartner(other.partner)
    }
    if other.hasUuidpartner {
         uuidpartner = other.uuidpartner
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->PkgOptPartnerReqBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PkgOptPartnerReqBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 8 :
        var value = input.readEnum()
        var enumMergResult:EnOperation = EnOperation(rawValue:value)!
        if (EnOperation.IsValidValue(enumMergResult)) {
             opt = enumMergResult
        } else {
             unknownFieldsBuilder.mergeVarintField(1, value:Int64(value))
        }

      case 18 :
        var subBuilder:db_res_partnerBuilder = db_res_partner.builder()
        if hasPartner {
          subBuilder.mergeFrom(partner)
        }
        input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
        partner = subBuilder.buildPartial()

      case 26 :
        uuidpartner = input.readString()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class PkgOptPartnerReply : GeneratedMessage {
  private(set) var hasIssuccess:Bool = false
  private(set) var issuccess:Bool = false

  private(set) var hasErr:Bool = false
  private(set) var err:String = ""

  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
    if !hasIssuccess {
      return false
    }
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasIssuccess {
      output.writeBool(1, value:issuccess)
    }
    if hasErr {
      output.writeString(2, value:err)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasIssuccess {
      size += WireFormat.computeBoolSize(1, value:issuccess)
    }
    if hasErr {
      size += WireFormat.computeStringSize(2, value:err)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> PkgOptPartnerReply {
    return PkgOptPartnerReply.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> PkgOptPartnerReply {
    return PkgOptPartnerReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> PkgOptPartnerReply {
    return PkgOptPartnerReply.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PkgOptPartnerReply {
    return PkgOptPartnerReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> PkgOptPartnerReply {
    return PkgOptPartnerReply.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PkgOptPartnerReply {
    return PkgOptPartnerReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> PkgOptPartnerReplyBuilder {
    return PkgOptPartnerReplyBuilder()
  }
  class func builderWithPrototype(prototype:PkgOptPartnerReply) -> PkgOptPartnerReplyBuilder {
    return PkgOptPartnerReply.builder().mergeFrom(prototype)
  }
  func builder() -> PkgOptPartnerReplyBuilder {
    return PkgOptPartnerReply.builder()
  }
  func toBuilder() -> PkgOptPartnerReplyBuilder {
    return PkgOptPartnerReply.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if hasIssuccess {
      output += "\(indent) issuccess: \(issuccess) \n"
    }
    if hasErr {
      output += "\(indent) err: \(err) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasIssuccess {
             hashCode = (hashCode &* 31) &+ issuccess.hashValue
          }
          if hasErr {
             hashCode = (hashCode &* 31) &+ err.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "PkgOptPartnerReply"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return PkgOptPartnerReply.self
  }


  //Meta information declaration end

}

final class PkgOptPartnerReplyBuilder : GeneratedMessageBuilder {
  private var builderResult:PkgOptPartnerReply

  required override init () {
     builderResult = PkgOptPartnerReply()
     super.init()
  }
  var hasIssuccess:Bool {
       get {
            return builderResult.hasIssuccess
       }
  }
  var issuccess:Bool {
       get {
            return builderResult.issuccess
       }
       set (value) {
           builderResult.hasIssuccess = true
           builderResult.issuccess = value
       }
  }
  func clearIssuccess() -> PkgOptPartnerReplyBuilder{
       builderResult.hasIssuccess = false
       builderResult.issuccess = false
       return self
  }
  var hasErr:Bool {
       get {
            return builderResult.hasErr
       }
  }
  var err:String {
       get {
            return builderResult.err
       }
       set (value) {
           builderResult.hasErr = true
           builderResult.err = value
       }
  }
  func clearErr() -> PkgOptPartnerReplyBuilder{
       builderResult.hasErr = false
       builderResult.err = ""
       return self
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> PkgOptPartnerReplyBuilder {
    builderResult = PkgOptPartnerReply()
    return self
  }
  override func clone() -> PkgOptPartnerReplyBuilder {
    return PkgOptPartnerReply.builderWithPrototype(builderResult)
  }
  override func build() -> PkgOptPartnerReply {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> PkgOptPartnerReply {
    var returnMe:PkgOptPartnerReply = builderResult
    return returnMe
  }
  func mergeFrom(other:PkgOptPartnerReply) -> PkgOptPartnerReplyBuilder {
    if (other == PkgOptPartnerReply()) {
     return self
    }
    if other.hasIssuccess {
         issuccess = other.issuccess
    }
    if other.hasErr {
         err = other.err
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->PkgOptPartnerReplyBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PkgOptPartnerReplyBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 8 :
        issuccess = input.readBool()

      case 18 :
        err = input.readString()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class PkgOptLeadReq : GeneratedMessage {
  private(set) var opt:EnOperation = EnOperation.ToInsert
  private(set) var hasOpt:Bool = false
  private(set) var hasLead:Bool = false
  private(set) var lead:db_crm_lead = db_crm_lead()
  private(set) var hasUuidleadid:Bool = false
  private(set) var uuidleadid:String = ""

  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
    if !hasOpt {
      return false
    }
    if hasLead {
     if !lead.isInitialized() {
       return false
     }
    }
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasOpt {
      output.writeEnum(1, value:opt.rawValue)
    }
    if hasLead {
      output.writeMessage(2, value:lead)
    }
    if hasUuidleadid {
      output.writeString(3, value:uuidleadid)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if (hasOpt) {
      size += WireFormat.computeEnumSize(1, value:opt.rawValue)
    }
    if hasLead {
      size += WireFormat.computeMessageSize(2, value:lead)
    }
    if hasUuidleadid {
      size += WireFormat.computeStringSize(3, value:uuidleadid)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> PkgOptLeadReq {
    return PkgOptLeadReq.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> PkgOptLeadReq {
    return PkgOptLeadReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> PkgOptLeadReq {
    return PkgOptLeadReq.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PkgOptLeadReq {
    return PkgOptLeadReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> PkgOptLeadReq {
    return PkgOptLeadReq.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PkgOptLeadReq {
    return PkgOptLeadReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> PkgOptLeadReqBuilder {
    return PkgOptLeadReqBuilder()
  }
  class func builderWithPrototype(prototype:PkgOptLeadReq) -> PkgOptLeadReqBuilder {
    return PkgOptLeadReq.builder().mergeFrom(prototype)
  }
  func builder() -> PkgOptLeadReqBuilder {
    return PkgOptLeadReq.builder()
  }
  func toBuilder() -> PkgOptLeadReqBuilder {
    return PkgOptLeadReq.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if (hasOpt) {
      output += "\(indent) opt: \(opt.rawValue)\n"
    }
    if hasLead {
      output += "\(indent) lead {\n"
      lead.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    if hasUuidleadid {
      output += "\(indent) uuidleadid: \(uuidleadid) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasOpt {
             hashCode = (hashCode &* 31) &+ Int(opt.rawValue)
          }
          if hasLead {
            hashCode = (hashCode &* 31) &+ lead.hashValue
          }
          if hasUuidleadid {
             hashCode = (hashCode &* 31) &+ uuidleadid.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "PkgOptLeadReq"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return PkgOptLeadReq.self
  }


  //Meta information declaration end

}

final class PkgOptLeadReqBuilder : GeneratedMessageBuilder {
  private var builderResult:PkgOptLeadReq

  required override init () {
     builderResult = PkgOptLeadReq()
     super.init()
  }
    var hasOpt:Bool{
        get {
            return builderResult.hasOpt
        }
    }
    var opt:EnOperation {
        get {
            return builderResult.opt
        }
        set (value) {
            builderResult.hasOpt = true
            builderResult.opt = value
        }
    }
    func clearOpt() -> PkgOptLeadReqBuilder {
       builderResult.hasOpt = false
       builderResult.opt = .ToInsert
       return self
    }
  var hasLead:Bool {
       get {
           return builderResult.hasLead
       }
  }
  var lead:db_crm_lead {
       get {
           return builderResult.lead
       }
       set (value) {
           builderResult.hasLead = true
           builderResult.lead = value
       }
  }
  func setLeadBuilder(builderForValue:db_crm_leadBuilder) -> PkgOptLeadReqBuilder {
    lead = builderForValue.build()
    return self
  }
  func mergeLead(value:db_crm_lead) -> PkgOptLeadReqBuilder {
    if (builderResult.hasLead && builderResult.lead != db_crm_lead()) {
      builderResult.lead = db_crm_lead.builderWithPrototype(builderResult.lead).mergeFrom(value).buildPartial()
    } else {
      builderResult.lead = value
    }
    builderResult.hasLead = true
    return self
  }
  func clearLead() -> PkgOptLeadReqBuilder {
    builderResult.hasLead = false
    builderResult.lead = db_crm_lead()
    return self
  }
  var hasUuidleadid:Bool {
       get {
            return builderResult.hasUuidleadid
       }
  }
  var uuidleadid:String {
       get {
            return builderResult.uuidleadid
       }
       set (value) {
           builderResult.hasUuidleadid = true
           builderResult.uuidleadid = value
       }
  }
  func clearUuidleadid() -> PkgOptLeadReqBuilder{
       builderResult.hasUuidleadid = false
       builderResult.uuidleadid = ""
       return self
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> PkgOptLeadReqBuilder {
    builderResult = PkgOptLeadReq()
    return self
  }
  override func clone() -> PkgOptLeadReqBuilder {
    return PkgOptLeadReq.builderWithPrototype(builderResult)
  }
  override func build() -> PkgOptLeadReq {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> PkgOptLeadReq {
    var returnMe:PkgOptLeadReq = builderResult
    return returnMe
  }
  func mergeFrom(other:PkgOptLeadReq) -> PkgOptLeadReqBuilder {
    if (other == PkgOptLeadReq()) {
     return self
    }
    if other.hasOpt {
         opt = other.opt
    }
    if (other.hasLead) {
        mergeLead(other.lead)
    }
    if other.hasUuidleadid {
         uuidleadid = other.uuidleadid
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->PkgOptLeadReqBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PkgOptLeadReqBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 8 :
        var value = input.readEnum()
        var enumMergResult:EnOperation = EnOperation(rawValue:value)!
        if (EnOperation.IsValidValue(enumMergResult)) {
             opt = enumMergResult
        } else {
             unknownFieldsBuilder.mergeVarintField(1, value:Int64(value))
        }

      case 18 :
        var subBuilder:db_crm_leadBuilder = db_crm_lead.builder()
        if hasLead {
          subBuilder.mergeFrom(lead)
        }
        input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
        lead = subBuilder.buildPartial()

      case 26 :
        uuidleadid = input.readString()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class PkgOptLeadReply : GeneratedMessage {
  private(set) var hasIssuccess:Bool = false
  private(set) var issuccess:Bool = false

  private(set) var hasErr:Bool = false
  private(set) var err:String = ""

  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
    if !hasIssuccess {
      return false
    }
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasIssuccess {
      output.writeBool(1, value:issuccess)
    }
    if hasErr {
      output.writeString(2, value:err)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasIssuccess {
      size += WireFormat.computeBoolSize(1, value:issuccess)
    }
    if hasErr {
      size += WireFormat.computeStringSize(2, value:err)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> PkgOptLeadReply {
    return PkgOptLeadReply.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> PkgOptLeadReply {
    return PkgOptLeadReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> PkgOptLeadReply {
    return PkgOptLeadReply.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PkgOptLeadReply {
    return PkgOptLeadReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> PkgOptLeadReply {
    return PkgOptLeadReply.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PkgOptLeadReply {
    return PkgOptLeadReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> PkgOptLeadReplyBuilder {
    return PkgOptLeadReplyBuilder()
  }
  class func builderWithPrototype(prototype:PkgOptLeadReply) -> PkgOptLeadReplyBuilder {
    return PkgOptLeadReply.builder().mergeFrom(prototype)
  }
  func builder() -> PkgOptLeadReplyBuilder {
    return PkgOptLeadReply.builder()
  }
  func toBuilder() -> PkgOptLeadReplyBuilder {
    return PkgOptLeadReply.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if hasIssuccess {
      output += "\(indent) issuccess: \(issuccess) \n"
    }
    if hasErr {
      output += "\(indent) err: \(err) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasIssuccess {
             hashCode = (hashCode &* 31) &+ issuccess.hashValue
          }
          if hasErr {
             hashCode = (hashCode &* 31) &+ err.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "PkgOptLeadReply"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return PkgOptLeadReply.self
  }


  //Meta information declaration end

}

final class PkgOptLeadReplyBuilder : GeneratedMessageBuilder {
  private var builderResult:PkgOptLeadReply

  required override init () {
     builderResult = PkgOptLeadReply()
     super.init()
  }
  var hasIssuccess:Bool {
       get {
            return builderResult.hasIssuccess
       }
  }
  var issuccess:Bool {
       get {
            return builderResult.issuccess
       }
       set (value) {
           builderResult.hasIssuccess = true
           builderResult.issuccess = value
       }
  }
  func clearIssuccess() -> PkgOptLeadReplyBuilder{
       builderResult.hasIssuccess = false
       builderResult.issuccess = false
       return self
  }
  var hasErr:Bool {
       get {
            return builderResult.hasErr
       }
  }
  var err:String {
       get {
            return builderResult.err
       }
       set (value) {
           builderResult.hasErr = true
           builderResult.err = value
       }
  }
  func clearErr() -> PkgOptLeadReplyBuilder{
       builderResult.hasErr = false
       builderResult.err = ""
       return self
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> PkgOptLeadReplyBuilder {
    builderResult = PkgOptLeadReply()
    return self
  }
  override func clone() -> PkgOptLeadReplyBuilder {
    return PkgOptLeadReply.builderWithPrototype(builderResult)
  }
  override func build() -> PkgOptLeadReply {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> PkgOptLeadReply {
    var returnMe:PkgOptLeadReply = builderResult
    return returnMe
  }
  func mergeFrom(other:PkgOptLeadReply) -> PkgOptLeadReplyBuilder {
    if (other == PkgOptLeadReply()) {
     return self
    }
    if other.hasIssuccess {
         issuccess = other.issuccess
    }
    if other.hasErr {
         err = other.err
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->PkgOptLeadReplyBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PkgOptLeadReplyBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 8 :
        issuccess = input.readBool()

      case 18 :
        err = input.readString()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class PkgOptPhonecallReq : GeneratedMessage {
  private(set) var opt:EnOperation = EnOperation.ToInsert
  private(set) var hasOpt:Bool = false
  private(set) var hasPhonecall:Bool = false
  private(set) var phonecall:db_crm_phonecall = db_crm_phonecall()
  private(set) var hasUuidphonecallid:Bool = false
  private(set) var uuidphonecallid:String = ""

  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
    if !hasOpt {
      return false
    }
    if hasPhonecall {
     if !phonecall.isInitialized() {
       return false
     }
    }
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasOpt {
      output.writeEnum(1, value:opt.rawValue)
    }
    if hasPhonecall {
      output.writeMessage(2, value:phonecall)
    }
    if hasUuidphonecallid {
      output.writeString(3, value:uuidphonecallid)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if (hasOpt) {
      size += WireFormat.computeEnumSize(1, value:opt.rawValue)
    }
    if hasPhonecall {
      size += WireFormat.computeMessageSize(2, value:phonecall)
    }
    if hasUuidphonecallid {
      size += WireFormat.computeStringSize(3, value:uuidphonecallid)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> PkgOptPhonecallReq {
    return PkgOptPhonecallReq.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> PkgOptPhonecallReq {
    return PkgOptPhonecallReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> PkgOptPhonecallReq {
    return PkgOptPhonecallReq.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PkgOptPhonecallReq {
    return PkgOptPhonecallReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> PkgOptPhonecallReq {
    return PkgOptPhonecallReq.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PkgOptPhonecallReq {
    return PkgOptPhonecallReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> PkgOptPhonecallReqBuilder {
    return PkgOptPhonecallReqBuilder()
  }
  class func builderWithPrototype(prototype:PkgOptPhonecallReq) -> PkgOptPhonecallReqBuilder {
    return PkgOptPhonecallReq.builder().mergeFrom(prototype)
  }
  func builder() -> PkgOptPhonecallReqBuilder {
    return PkgOptPhonecallReq.builder()
  }
  func toBuilder() -> PkgOptPhonecallReqBuilder {
    return PkgOptPhonecallReq.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if (hasOpt) {
      output += "\(indent) opt: \(opt.rawValue)\n"
    }
    if hasPhonecall {
      output += "\(indent) phonecall {\n"
      phonecall.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    if hasUuidphonecallid {
      output += "\(indent) uuidphonecallid: \(uuidphonecallid) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasOpt {
             hashCode = (hashCode &* 31) &+ Int(opt.rawValue)
          }
          if hasPhonecall {
            hashCode = (hashCode &* 31) &+ phonecall.hashValue
          }
          if hasUuidphonecallid {
             hashCode = (hashCode &* 31) &+ uuidphonecallid.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "PkgOptPhonecallReq"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return PkgOptPhonecallReq.self
  }


  //Meta information declaration end

}

final class PkgOptPhonecallReqBuilder : GeneratedMessageBuilder {
  private var builderResult:PkgOptPhonecallReq

  required override init () {
     builderResult = PkgOptPhonecallReq()
     super.init()
  }
    var hasOpt:Bool{
        get {
            return builderResult.hasOpt
        }
    }
    var opt:EnOperation {
        get {
            return builderResult.opt
        }
        set (value) {
            builderResult.hasOpt = true
            builderResult.opt = value
        }
    }
    func clearOpt() -> PkgOptPhonecallReqBuilder {
       builderResult.hasOpt = false
       builderResult.opt = .ToInsert
       return self
    }
  var hasPhonecall:Bool {
       get {
           return builderResult.hasPhonecall
       }
  }
  var phonecall:db_crm_phonecall {
       get {
           return builderResult.phonecall
       }
       set (value) {
           builderResult.hasPhonecall = true
           builderResult.phonecall = value
       }
  }
  func setPhonecallBuilder(builderForValue:db_crm_phonecallBuilder) -> PkgOptPhonecallReqBuilder {
    phonecall = builderForValue.build()
    return self
  }
  func mergePhonecall(value:db_crm_phonecall) -> PkgOptPhonecallReqBuilder {
    if (builderResult.hasPhonecall && builderResult.phonecall != db_crm_phonecall()) {
      builderResult.phonecall = db_crm_phonecall.builderWithPrototype(builderResult.phonecall).mergeFrom(value).buildPartial()
    } else {
      builderResult.phonecall = value
    }
    builderResult.hasPhonecall = true
    return self
  }
  func clearPhonecall() -> PkgOptPhonecallReqBuilder {
    builderResult.hasPhonecall = false
    builderResult.phonecall = db_crm_phonecall()
    return self
  }
  var hasUuidphonecallid:Bool {
       get {
            return builderResult.hasUuidphonecallid
       }
  }
  var uuidphonecallid:String {
       get {
            return builderResult.uuidphonecallid
       }
       set (value) {
           builderResult.hasUuidphonecallid = true
           builderResult.uuidphonecallid = value
       }
  }
  func clearUuidphonecallid() -> PkgOptPhonecallReqBuilder{
       builderResult.hasUuidphonecallid = false
       builderResult.uuidphonecallid = ""
       return self
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> PkgOptPhonecallReqBuilder {
    builderResult = PkgOptPhonecallReq()
    return self
  }
  override func clone() -> PkgOptPhonecallReqBuilder {
    return PkgOptPhonecallReq.builderWithPrototype(builderResult)
  }
  override func build() -> PkgOptPhonecallReq {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> PkgOptPhonecallReq {
    var returnMe:PkgOptPhonecallReq = builderResult
    return returnMe
  }
  func mergeFrom(other:PkgOptPhonecallReq) -> PkgOptPhonecallReqBuilder {
    if (other == PkgOptPhonecallReq()) {
     return self
    }
    if other.hasOpt {
         opt = other.opt
    }
    if (other.hasPhonecall) {
        mergePhonecall(other.phonecall)
    }
    if other.hasUuidphonecallid {
         uuidphonecallid = other.uuidphonecallid
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->PkgOptPhonecallReqBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PkgOptPhonecallReqBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 8 :
        var value = input.readEnum()
        var enumMergResult:EnOperation = EnOperation(rawValue:value)!
        if (EnOperation.IsValidValue(enumMergResult)) {
             opt = enumMergResult
        } else {
             unknownFieldsBuilder.mergeVarintField(1, value:Int64(value))
        }

      case 18 :
        var subBuilder:db_crm_phonecallBuilder = db_crm_phonecall.builder()
        if hasPhonecall {
          subBuilder.mergeFrom(phonecall)
        }
        input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
        phonecall = subBuilder.buildPartial()

      case 26 :
        uuidphonecallid = input.readString()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class PkgOptPhonecallReply : GeneratedMessage {
  private(set) var hasIssuccess:Bool = false
  private(set) var issuccess:Bool = false

  private(set) var hasErr:Bool = false
  private(set) var err:String = ""

  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
    if !hasIssuccess {
      return false
    }
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasIssuccess {
      output.writeBool(1, value:issuccess)
    }
    if hasErr {
      output.writeString(2, value:err)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasIssuccess {
      size += WireFormat.computeBoolSize(1, value:issuccess)
    }
    if hasErr {
      size += WireFormat.computeStringSize(2, value:err)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> PkgOptPhonecallReply {
    return PkgOptPhonecallReply.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> PkgOptPhonecallReply {
    return PkgOptPhonecallReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> PkgOptPhonecallReply {
    return PkgOptPhonecallReply.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PkgOptPhonecallReply {
    return PkgOptPhonecallReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> PkgOptPhonecallReply {
    return PkgOptPhonecallReply.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PkgOptPhonecallReply {
    return PkgOptPhonecallReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> PkgOptPhonecallReplyBuilder {
    return PkgOptPhonecallReplyBuilder()
  }
  class func builderWithPrototype(prototype:PkgOptPhonecallReply) -> PkgOptPhonecallReplyBuilder {
    return PkgOptPhonecallReply.builder().mergeFrom(prototype)
  }
  func builder() -> PkgOptPhonecallReplyBuilder {
    return PkgOptPhonecallReply.builder()
  }
  func toBuilder() -> PkgOptPhonecallReplyBuilder {
    return PkgOptPhonecallReply.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if hasIssuccess {
      output += "\(indent) issuccess: \(issuccess) \n"
    }
    if hasErr {
      output += "\(indent) err: \(err) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasIssuccess {
             hashCode = (hashCode &* 31) &+ issuccess.hashValue
          }
          if hasErr {
             hashCode = (hashCode &* 31) &+ err.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "PkgOptPhonecallReply"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return PkgOptPhonecallReply.self
  }


  //Meta information declaration end

}

final class PkgOptPhonecallReplyBuilder : GeneratedMessageBuilder {
  private var builderResult:PkgOptPhonecallReply

  required override init () {
     builderResult = PkgOptPhonecallReply()
     super.init()
  }
  var hasIssuccess:Bool {
       get {
            return builderResult.hasIssuccess
       }
  }
  var issuccess:Bool {
       get {
            return builderResult.issuccess
       }
       set (value) {
           builderResult.hasIssuccess = true
           builderResult.issuccess = value
       }
  }
  func clearIssuccess() -> PkgOptPhonecallReplyBuilder{
       builderResult.hasIssuccess = false
       builderResult.issuccess = false
       return self
  }
  var hasErr:Bool {
       get {
            return builderResult.hasErr
       }
  }
  var err:String {
       get {
            return builderResult.err
       }
       set (value) {
           builderResult.hasErr = true
           builderResult.err = value
       }
  }
  func clearErr() -> PkgOptPhonecallReplyBuilder{
       builderResult.hasErr = false
       builderResult.err = ""
       return self
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> PkgOptPhonecallReplyBuilder {
    builderResult = PkgOptPhonecallReply()
    return self
  }
  override func clone() -> PkgOptPhonecallReplyBuilder {
    return PkgOptPhonecallReply.builderWithPrototype(builderResult)
  }
  override func build() -> PkgOptPhonecallReply {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> PkgOptPhonecallReply {
    var returnMe:PkgOptPhonecallReply = builderResult
    return returnMe
  }
  func mergeFrom(other:PkgOptPhonecallReply) -> PkgOptPhonecallReplyBuilder {
    if (other == PkgOptPhonecallReply()) {
     return self
    }
    if other.hasIssuccess {
         issuccess = other.issuccess
    }
    if other.hasErr {
         err = other.err
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->PkgOptPhonecallReplyBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PkgOptPhonecallReplyBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 8 :
        issuccess = input.readBool()

      case 18 :
        err = input.readString()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class PkgQueryCondition : GeneratedMessage {
  private(set) var hasTaskdatestart:Bool = false
  private(set) var taskdatestart:String = ""

  private(set) var hasTaskdateend:Bool = false
  private(set) var taskdateend:String = ""

  private(set) var hasKeyforname:Bool = false
  private(set) var keyforname:String = ""

  private(set) var hasKeyforcontent:Bool = false
  private(set) var keyforcontent:String = ""

  private(set) var hasPartneruuid:Bool = false
  private(set) var partneruuid:String = ""

  private(set) var hasLeaduuid:Bool = false
  private(set) var leaduuid:String = ""

  private(set) var hasSelfuuid:Bool = false
  private(set) var selfuuid:String = ""

  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasTaskdatestart {
      output.writeString(2, value:taskdatestart)
    }
    if hasTaskdateend {
      output.writeString(3, value:taskdateend)
    }
    if hasKeyforname {
      output.writeString(4, value:keyforname)
    }
    if hasKeyforcontent {
      output.writeString(5, value:keyforcontent)
    }
    if hasPartneruuid {
      output.writeString(10, value:partneruuid)
    }
    if hasLeaduuid {
      output.writeString(11, value:leaduuid)
    }
    if hasSelfuuid {
      output.writeString(100, value:selfuuid)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasTaskdatestart {
      size += WireFormat.computeStringSize(2, value:taskdatestart)
    }
    if hasTaskdateend {
      size += WireFormat.computeStringSize(3, value:taskdateend)
    }
    if hasKeyforname {
      size += WireFormat.computeStringSize(4, value:keyforname)
    }
    if hasKeyforcontent {
      size += WireFormat.computeStringSize(5, value:keyforcontent)
    }
    if hasPartneruuid {
      size += WireFormat.computeStringSize(10, value:partneruuid)
    }
    if hasLeaduuid {
      size += WireFormat.computeStringSize(11, value:leaduuid)
    }
    if hasSelfuuid {
      size += WireFormat.computeStringSize(100, value:selfuuid)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> PkgQueryCondition {
    return PkgQueryCondition.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> PkgQueryCondition {
    return PkgQueryCondition.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> PkgQueryCondition {
    return PkgQueryCondition.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PkgQueryCondition {
    return PkgQueryCondition.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> PkgQueryCondition {
    return PkgQueryCondition.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PkgQueryCondition {
    return PkgQueryCondition.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> PkgQueryConditionBuilder {
    return PkgQueryConditionBuilder()
  }
  class func builderWithPrototype(prototype:PkgQueryCondition) -> PkgQueryConditionBuilder {
    return PkgQueryCondition.builder().mergeFrom(prototype)
  }
  func builder() -> PkgQueryConditionBuilder {
    return PkgQueryCondition.builder()
  }
  func toBuilder() -> PkgQueryConditionBuilder {
    return PkgQueryCondition.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if hasTaskdatestart {
      output += "\(indent) taskdatestart: \(taskdatestart) \n"
    }
    if hasTaskdateend {
      output += "\(indent) taskdateend: \(taskdateend) \n"
    }
    if hasKeyforname {
      output += "\(indent) keyforname: \(keyforname) \n"
    }
    if hasKeyforcontent {
      output += "\(indent) keyforcontent: \(keyforcontent) \n"
    }
    if hasPartneruuid {
      output += "\(indent) partneruuid: \(partneruuid) \n"
    }
    if hasLeaduuid {
      output += "\(indent) leaduuid: \(leaduuid) \n"
    }
    if hasSelfuuid {
      output += "\(indent) selfuuid: \(selfuuid) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasTaskdatestart {
             hashCode = (hashCode &* 31) &+ taskdatestart.hashValue
          }
          if hasTaskdateend {
             hashCode = (hashCode &* 31) &+ taskdateend.hashValue
          }
          if hasKeyforname {
             hashCode = (hashCode &* 31) &+ keyforname.hashValue
          }
          if hasKeyforcontent {
             hashCode = (hashCode &* 31) &+ keyforcontent.hashValue
          }
          if hasPartneruuid {
             hashCode = (hashCode &* 31) &+ partneruuid.hashValue
          }
          if hasLeaduuid {
             hashCode = (hashCode &* 31) &+ leaduuid.hashValue
          }
          if hasSelfuuid {
             hashCode = (hashCode &* 31) &+ selfuuid.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "PkgQueryCondition"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return PkgQueryCondition.self
  }


  //Meta information declaration end

}

final class PkgQueryConditionBuilder : GeneratedMessageBuilder {
  private var builderResult:PkgQueryCondition

  required override init () {
     builderResult = PkgQueryCondition()
     super.init()
  }
  var hasTaskdatestart:Bool {
       get {
            return builderResult.hasTaskdatestart
       }
  }
  var taskdatestart:String {
       get {
            return builderResult.taskdatestart
       }
       set (value) {
           builderResult.hasTaskdatestart = true
           builderResult.taskdatestart = value
       }
  }
  func clearTaskdatestart() -> PkgQueryConditionBuilder{
       builderResult.hasTaskdatestart = false
       builderResult.taskdatestart = ""
       return self
  }
  var hasTaskdateend:Bool {
       get {
            return builderResult.hasTaskdateend
       }
  }
  var taskdateend:String {
       get {
            return builderResult.taskdateend
       }
       set (value) {
           builderResult.hasTaskdateend = true
           builderResult.taskdateend = value
       }
  }
  func clearTaskdateend() -> PkgQueryConditionBuilder{
       builderResult.hasTaskdateend = false
       builderResult.taskdateend = ""
       return self
  }
  var hasKeyforname:Bool {
       get {
            return builderResult.hasKeyforname
       }
  }
  var keyforname:String {
       get {
            return builderResult.keyforname
       }
       set (value) {
           builderResult.hasKeyforname = true
           builderResult.keyforname = value
       }
  }
  func clearKeyforname() -> PkgQueryConditionBuilder{
       builderResult.hasKeyforname = false
       builderResult.keyforname = ""
       return self
  }
  var hasKeyforcontent:Bool {
       get {
            return builderResult.hasKeyforcontent
       }
  }
  var keyforcontent:String {
       get {
            return builderResult.keyforcontent
       }
       set (value) {
           builderResult.hasKeyforcontent = true
           builderResult.keyforcontent = value
       }
  }
  func clearKeyforcontent() -> PkgQueryConditionBuilder{
       builderResult.hasKeyforcontent = false
       builderResult.keyforcontent = ""
       return self
  }
  var hasPartneruuid:Bool {
       get {
            return builderResult.hasPartneruuid
       }
  }
  var partneruuid:String {
       get {
            return builderResult.partneruuid
       }
       set (value) {
           builderResult.hasPartneruuid = true
           builderResult.partneruuid = value
       }
  }
  func clearPartneruuid() -> PkgQueryConditionBuilder{
       builderResult.hasPartneruuid = false
       builderResult.partneruuid = ""
       return self
  }
  var hasLeaduuid:Bool {
       get {
            return builderResult.hasLeaduuid
       }
  }
  var leaduuid:String {
       get {
            return builderResult.leaduuid
       }
       set (value) {
           builderResult.hasLeaduuid = true
           builderResult.leaduuid = value
       }
  }
  func clearLeaduuid() -> PkgQueryConditionBuilder{
       builderResult.hasLeaduuid = false
       builderResult.leaduuid = ""
       return self
  }
  var hasSelfuuid:Bool {
       get {
            return builderResult.hasSelfuuid
       }
  }
  var selfuuid:String {
       get {
            return builderResult.selfuuid
       }
       set (value) {
           builderResult.hasSelfuuid = true
           builderResult.selfuuid = value
       }
  }
  func clearSelfuuid() -> PkgQueryConditionBuilder{
       builderResult.hasSelfuuid = false
       builderResult.selfuuid = ""
       return self
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> PkgQueryConditionBuilder {
    builderResult = PkgQueryCondition()
    return self
  }
  override func clone() -> PkgQueryConditionBuilder {
    return PkgQueryCondition.builderWithPrototype(builderResult)
  }
  override func build() -> PkgQueryCondition {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> PkgQueryCondition {
    var returnMe:PkgQueryCondition = builderResult
    return returnMe
  }
  func mergeFrom(other:PkgQueryCondition) -> PkgQueryConditionBuilder {
    if (other == PkgQueryCondition()) {
     return self
    }
    if other.hasTaskdatestart {
         taskdatestart = other.taskdatestart
    }
    if other.hasTaskdateend {
         taskdateend = other.taskdateend
    }
    if other.hasKeyforname {
         keyforname = other.keyforname
    }
    if other.hasKeyforcontent {
         keyforcontent = other.keyforcontent
    }
    if other.hasPartneruuid {
         partneruuid = other.partneruuid
    }
    if other.hasLeaduuid {
         leaduuid = other.leaduuid
    }
    if other.hasSelfuuid {
         selfuuid = other.selfuuid
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->PkgQueryConditionBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PkgQueryConditionBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 18 :
        taskdatestart = input.readString()

      case 26 :
        taskdateend = input.readString()

      case 34 :
        keyforname = input.readString()

      case 42 :
        keyforcontent = input.readString()

      case 82 :
        partneruuid = input.readString()

      case 90 :
        leaduuid = input.readString()

      case 802 :
        selfuuid = input.readString()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class PkgPageQueryPartnerReq : GeneratedMessage {
  private(set) var hasEnconditon:Bool = false
  private(set) var enconditon:Int32 = Int32(0)

  private(set) var hasPkgquerycondition:Bool = false
  private(set) var pkgquerycondition:PkgQueryCondition = PkgQueryCondition()
  private(set) var pageflag:EnPageFlag = EnPageFlag.PReturnall
  private(set) var hasPageflag:Bool = false
  private(set) var hasIndexstart:Bool = false
  private(set) var indexstart:Int32 = Int32(0)

  private(set) var hasIndexend:Bool = false
  private(set) var indexend:Int32 = Int32(0)

  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasEnconditon {
      output.writeInt32(2, value:enconditon)
    }
    if hasPkgquerycondition {
      output.writeMessage(3, value:pkgquerycondition)
    }
    if hasPageflag {
      output.writeEnum(4, value:pageflag.rawValue)
    }
    if hasIndexstart {
      output.writeInt32(5, value:indexstart)
    }
    if hasIndexend {
      output.writeInt32(6, value:indexend)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasEnconditon {
      size += WireFormat.computeInt32Size(2, value:enconditon)
    }
    if hasPkgquerycondition {
      size += WireFormat.computeMessageSize(3, value:pkgquerycondition)
    }
    if (hasPageflag) {
      size += WireFormat.computeEnumSize(4, value:pageflag.rawValue)
    }
    if hasIndexstart {
      size += WireFormat.computeInt32Size(5, value:indexstart)
    }
    if hasIndexend {
      size += WireFormat.computeInt32Size(6, value:indexend)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> PkgPageQueryPartnerReq {
    return PkgPageQueryPartnerReq.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> PkgPageQueryPartnerReq {
    return PkgPageQueryPartnerReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> PkgPageQueryPartnerReq {
    return PkgPageQueryPartnerReq.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PkgPageQueryPartnerReq {
    return PkgPageQueryPartnerReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> PkgPageQueryPartnerReq {
    return PkgPageQueryPartnerReq.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PkgPageQueryPartnerReq {
    return PkgPageQueryPartnerReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> PkgPageQueryPartnerReqBuilder {
    return PkgPageQueryPartnerReqBuilder()
  }
  class func builderWithPrototype(prototype:PkgPageQueryPartnerReq) -> PkgPageQueryPartnerReqBuilder {
    return PkgPageQueryPartnerReq.builder().mergeFrom(prototype)
  }
  func builder() -> PkgPageQueryPartnerReqBuilder {
    return PkgPageQueryPartnerReq.builder()
  }
  func toBuilder() -> PkgPageQueryPartnerReqBuilder {
    return PkgPageQueryPartnerReq.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if hasEnconditon {
      output += "\(indent) enconditon: \(enconditon) \n"
    }
    if hasPkgquerycondition {
      output += "\(indent) pkgquerycondition {\n"
      pkgquerycondition.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    if (hasPageflag) {
      output += "\(indent) pageflag: \(pageflag.rawValue)\n"
    }
    if hasIndexstart {
      output += "\(indent) indexstart: \(indexstart) \n"
    }
    if hasIndexend {
      output += "\(indent) indexend: \(indexend) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasEnconditon {
             hashCode = (hashCode &* 31) &+ enconditon.hashValue
          }
          if hasPkgquerycondition {
            hashCode = (hashCode &* 31) &+ pkgquerycondition.hashValue
          }
          if hasPageflag {
             hashCode = (hashCode &* 31) &+ Int(pageflag.rawValue)
          }
          if hasIndexstart {
             hashCode = (hashCode &* 31) &+ indexstart.hashValue
          }
          if hasIndexend {
             hashCode = (hashCode &* 31) &+ indexend.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "PkgPageQueryPartnerReq"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return PkgPageQueryPartnerReq.self
  }


  //Meta information declaration end

}

final class PkgPageQueryPartnerReqBuilder : GeneratedMessageBuilder {
  private var builderResult:PkgPageQueryPartnerReq

  required override init () {
     builderResult = PkgPageQueryPartnerReq()
     super.init()
  }
  var hasEnconditon:Bool {
       get {
            return builderResult.hasEnconditon
       }
  }
  var enconditon:Int32 {
       get {
            return builderResult.enconditon
       }
       set (value) {
           builderResult.hasEnconditon = true
           builderResult.enconditon = value
       }
  }
  func clearEnconditon() -> PkgPageQueryPartnerReqBuilder{
       builderResult.hasEnconditon = false
       builderResult.enconditon = Int32(0)
       return self
  }
  var hasPkgquerycondition:Bool {
       get {
           return builderResult.hasPkgquerycondition
       }
  }
  var pkgquerycondition:PkgQueryCondition {
       get {
           return builderResult.pkgquerycondition
       }
       set (value) {
           builderResult.hasPkgquerycondition = true
           builderResult.pkgquerycondition = value
       }
  }
  func setPkgqueryconditionBuilder(builderForValue:PkgQueryConditionBuilder) -> PkgPageQueryPartnerReqBuilder {
    pkgquerycondition = builderForValue.build()
    return self
  }
  func mergePkgquerycondition(value:PkgQueryCondition) -> PkgPageQueryPartnerReqBuilder {
    if (builderResult.hasPkgquerycondition && builderResult.pkgquerycondition != PkgQueryCondition()) {
      builderResult.pkgquerycondition = PkgQueryCondition.builderWithPrototype(builderResult.pkgquerycondition).mergeFrom(value).buildPartial()
    } else {
      builderResult.pkgquerycondition = value
    }
    builderResult.hasPkgquerycondition = true
    return self
  }
  func clearPkgquerycondition() -> PkgPageQueryPartnerReqBuilder {
    builderResult.hasPkgquerycondition = false
    builderResult.pkgquerycondition = PkgQueryCondition()
    return self
  }
    var hasPageflag:Bool{
        get {
            return builderResult.hasPageflag
        }
    }
    var pageflag:EnPageFlag {
        get {
            return builderResult.pageflag
        }
        set (value) {
            builderResult.hasPageflag = true
            builderResult.pageflag = value
        }
    }
    func clearPageflag() -> PkgPageQueryPartnerReqBuilder {
       builderResult.hasPageflag = false
       builderResult.pageflag = .PReturnall
       return self
    }
  var hasIndexstart:Bool {
       get {
            return builderResult.hasIndexstart
       }
  }
  var indexstart:Int32 {
       get {
            return builderResult.indexstart
       }
       set (value) {
           builderResult.hasIndexstart = true
           builderResult.indexstart = value
       }
  }
  func clearIndexstart() -> PkgPageQueryPartnerReqBuilder{
       builderResult.hasIndexstart = false
       builderResult.indexstart = Int32(0)
       return self
  }
  var hasIndexend:Bool {
       get {
            return builderResult.hasIndexend
       }
  }
  var indexend:Int32 {
       get {
            return builderResult.indexend
       }
       set (value) {
           builderResult.hasIndexend = true
           builderResult.indexend = value
       }
  }
  func clearIndexend() -> PkgPageQueryPartnerReqBuilder{
       builderResult.hasIndexend = false
       builderResult.indexend = Int32(0)
       return self
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> PkgPageQueryPartnerReqBuilder {
    builderResult = PkgPageQueryPartnerReq()
    return self
  }
  override func clone() -> PkgPageQueryPartnerReqBuilder {
    return PkgPageQueryPartnerReq.builderWithPrototype(builderResult)
  }
  override func build() -> PkgPageQueryPartnerReq {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> PkgPageQueryPartnerReq {
    var returnMe:PkgPageQueryPartnerReq = builderResult
    return returnMe
  }
  func mergeFrom(other:PkgPageQueryPartnerReq) -> PkgPageQueryPartnerReqBuilder {
    if (other == PkgPageQueryPartnerReq()) {
     return self
    }
    if other.hasEnconditon {
         enconditon = other.enconditon
    }
    if (other.hasPkgquerycondition) {
        mergePkgquerycondition(other.pkgquerycondition)
    }
    if other.hasPageflag {
         pageflag = other.pageflag
    }
    if other.hasIndexstart {
         indexstart = other.indexstart
    }
    if other.hasIndexend {
         indexend = other.indexend
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->PkgPageQueryPartnerReqBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PkgPageQueryPartnerReqBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 16 :
        enconditon = input.readInt32()

      case 26 :
        var subBuilder:PkgQueryConditionBuilder = PkgQueryCondition.builder()
        if hasPkgquerycondition {
          subBuilder.mergeFrom(pkgquerycondition)
        }
        input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
        pkgquerycondition = subBuilder.buildPartial()

      case 32 :
        var value = input.readEnum()
        var enumMergResult:EnPageFlag = EnPageFlag(rawValue:value)!
        if (EnPageFlag.IsValidValue(enumMergResult)) {
             pageflag = enumMergResult
        } else {
             unknownFieldsBuilder.mergeVarintField(4, value:Int64(value))
        }

      case 40 :
        indexstart = input.readInt32()

      case 48 :
        indexend = input.readInt32()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class PkgPageQueryPartnerReply : GeneratedMessage {
  private(set) var hasIssuccess:Bool = false
  private(set) var issuccess:Bool = false

  private(set) var hasErr:Bool = false
  private(set) var err:String = ""

  private(set) var rows:Array<db_res_partner>  = Array<db_res_partner>()
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
    if !hasIssuccess {
      return false
    }
    var isInitrows:Bool = true
    for element in rows {
        if (!element.isInitialized()) {
            isInitrows = false
            break 
        }
    }
    if !isInitrows {
     return isInitrows
     }
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasIssuccess {
      output.writeBool(1, value:issuccess)
    }
    if hasErr {
      output.writeString(2, value:err)
    }
    for element in rows {
        output.writeMessage(10, value:element)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasIssuccess {
      size += WireFormat.computeBoolSize(1, value:issuccess)
    }
    if hasErr {
      size += WireFormat.computeStringSize(2, value:err)
    }
    for element in rows {
        size += WireFormat.computeMessageSize(10, value:element)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> PkgPageQueryPartnerReply {
    return PkgPageQueryPartnerReply.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> PkgPageQueryPartnerReply {
    return PkgPageQueryPartnerReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> PkgPageQueryPartnerReply {
    return PkgPageQueryPartnerReply.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PkgPageQueryPartnerReply {
    return PkgPageQueryPartnerReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> PkgPageQueryPartnerReply {
    return PkgPageQueryPartnerReply.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PkgPageQueryPartnerReply {
    return PkgPageQueryPartnerReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> PkgPageQueryPartnerReplyBuilder {
    return PkgPageQueryPartnerReplyBuilder()
  }
  class func builderWithPrototype(prototype:PkgPageQueryPartnerReply) -> PkgPageQueryPartnerReplyBuilder {
    return PkgPageQueryPartnerReply.builder().mergeFrom(prototype)
  }
  func builder() -> PkgPageQueryPartnerReplyBuilder {
    return PkgPageQueryPartnerReply.builder()
  }
  func toBuilder() -> PkgPageQueryPartnerReplyBuilder {
    return PkgPageQueryPartnerReply.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if hasIssuccess {
      output += "\(indent) issuccess: \(issuccess) \n"
    }
    if hasErr {
      output += "\(indent) err: \(err) \n"
    }
    var rowsElementIndex:Int = 0
    for element in rows {
        output += "\(indent) rows[\(rowsElementIndex)] {\n"
        element.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent)}\n"
        rowsElementIndex++
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasIssuccess {
             hashCode = (hashCode &* 31) &+ issuccess.hashValue
          }
          if hasErr {
             hashCode = (hashCode &* 31) &+ err.hashValue
          }
          for element in rows {
              hashCode = (hashCode &* 31) &+ element.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "PkgPageQueryPartnerReply"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return PkgPageQueryPartnerReply.self
  }


  //Meta information declaration end

}

final class PkgPageQueryPartnerReplyBuilder : GeneratedMessageBuilder {
  private var builderResult:PkgPageQueryPartnerReply

  required override init () {
     builderResult = PkgPageQueryPartnerReply()
     super.init()
  }
  var hasIssuccess:Bool {
       get {
            return builderResult.hasIssuccess
       }
  }
  var issuccess:Bool {
       get {
            return builderResult.issuccess
       }
       set (value) {
           builderResult.hasIssuccess = true
           builderResult.issuccess = value
       }
  }
  func clearIssuccess() -> PkgPageQueryPartnerReplyBuilder{
       builderResult.hasIssuccess = false
       builderResult.issuccess = false
       return self
  }
  var hasErr:Bool {
       get {
            return builderResult.hasErr
       }
  }
  var err:String {
       get {
            return builderResult.err
       }
       set (value) {
           builderResult.hasErr = true
           builderResult.err = value
       }
  }
  func clearErr() -> PkgPageQueryPartnerReplyBuilder{
       builderResult.hasErr = false
       builderResult.err = ""
       return self
  }
  var rows:Array<db_res_partner> {
       get {
           return builderResult.rows
       }
       set (value) {
           builderResult.rows = value
       }
  }
  func clearRows() -> PkgPageQueryPartnerReplyBuilder {
    builderResult.rows.removeAll(keepCapacity: false)
    return self
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> PkgPageQueryPartnerReplyBuilder {
    builderResult = PkgPageQueryPartnerReply()
    return self
  }
  override func clone() -> PkgPageQueryPartnerReplyBuilder {
    return PkgPageQueryPartnerReply.builderWithPrototype(builderResult)
  }
  override func build() -> PkgPageQueryPartnerReply {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> PkgPageQueryPartnerReply {
    var returnMe:PkgPageQueryPartnerReply = builderResult
    return returnMe
  }
  func mergeFrom(other:PkgPageQueryPartnerReply) -> PkgPageQueryPartnerReplyBuilder {
    if (other == PkgPageQueryPartnerReply()) {
     return self
    }
    if other.hasIssuccess {
         issuccess = other.issuccess
    }
    if other.hasErr {
         err = other.err
    }
    if !other.rows.isEmpty  {
       builderResult.rows += other.rows
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->PkgPageQueryPartnerReplyBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PkgPageQueryPartnerReplyBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 8 :
        issuccess = input.readBool()

      case 18 :
        err = input.readString()

      case 82 :
        var subBuilder = db_res_partner.builder()
        input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
        rows += [subBuilder.buildPartial()]

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class PkgPageQueryLeadReq : GeneratedMessage {
  private(set) var hasEnconditon:Bool = false
  private(set) var enconditon:Int32 = Int32(0)

  private(set) var hasPkgquerycondition:Bool = false
  private(set) var pkgquerycondition:PkgQueryCondition = PkgQueryCondition()
  private(set) var pageflag:EnPageFlag = EnPageFlag.PReturnall
  private(set) var hasPageflag:Bool = false
  private(set) var hasIndexstart:Bool = false
  private(set) var indexstart:Int32 = Int32(0)

  private(set) var hasIndexend:Bool = false
  private(set) var indexend:Int32 = Int32(0)

  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasEnconditon {
      output.writeInt32(2, value:enconditon)
    }
    if hasPkgquerycondition {
      output.writeMessage(3, value:pkgquerycondition)
    }
    if hasPageflag {
      output.writeEnum(4, value:pageflag.rawValue)
    }
    if hasIndexstart {
      output.writeInt32(5, value:indexstart)
    }
    if hasIndexend {
      output.writeInt32(6, value:indexend)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasEnconditon {
      size += WireFormat.computeInt32Size(2, value:enconditon)
    }
    if hasPkgquerycondition {
      size += WireFormat.computeMessageSize(3, value:pkgquerycondition)
    }
    if (hasPageflag) {
      size += WireFormat.computeEnumSize(4, value:pageflag.rawValue)
    }
    if hasIndexstart {
      size += WireFormat.computeInt32Size(5, value:indexstart)
    }
    if hasIndexend {
      size += WireFormat.computeInt32Size(6, value:indexend)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> PkgPageQueryLeadReq {
    return PkgPageQueryLeadReq.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> PkgPageQueryLeadReq {
    return PkgPageQueryLeadReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> PkgPageQueryLeadReq {
    return PkgPageQueryLeadReq.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PkgPageQueryLeadReq {
    return PkgPageQueryLeadReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> PkgPageQueryLeadReq {
    return PkgPageQueryLeadReq.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PkgPageQueryLeadReq {
    return PkgPageQueryLeadReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> PkgPageQueryLeadReqBuilder {
    return PkgPageQueryLeadReqBuilder()
  }
  class func builderWithPrototype(prototype:PkgPageQueryLeadReq) -> PkgPageQueryLeadReqBuilder {
    return PkgPageQueryLeadReq.builder().mergeFrom(prototype)
  }
  func builder() -> PkgPageQueryLeadReqBuilder {
    return PkgPageQueryLeadReq.builder()
  }
  func toBuilder() -> PkgPageQueryLeadReqBuilder {
    return PkgPageQueryLeadReq.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if hasEnconditon {
      output += "\(indent) enconditon: \(enconditon) \n"
    }
    if hasPkgquerycondition {
      output += "\(indent) pkgquerycondition {\n"
      pkgquerycondition.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    if (hasPageflag) {
      output += "\(indent) pageflag: \(pageflag.rawValue)\n"
    }
    if hasIndexstart {
      output += "\(indent) indexstart: \(indexstart) \n"
    }
    if hasIndexend {
      output += "\(indent) indexend: \(indexend) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasEnconditon {
             hashCode = (hashCode &* 31) &+ enconditon.hashValue
          }
          if hasPkgquerycondition {
            hashCode = (hashCode &* 31) &+ pkgquerycondition.hashValue
          }
          if hasPageflag {
             hashCode = (hashCode &* 31) &+ Int(pageflag.rawValue)
          }
          if hasIndexstart {
             hashCode = (hashCode &* 31) &+ indexstart.hashValue
          }
          if hasIndexend {
             hashCode = (hashCode &* 31) &+ indexend.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "PkgPageQueryLeadReq"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return PkgPageQueryLeadReq.self
  }


  //Meta information declaration end

}

final class PkgPageQueryLeadReqBuilder : GeneratedMessageBuilder {
  private var builderResult:PkgPageQueryLeadReq

  required override init () {
     builderResult = PkgPageQueryLeadReq()
     super.init()
  }
  var hasEnconditon:Bool {
       get {
            return builderResult.hasEnconditon
       }
  }
  var enconditon:Int32 {
       get {
            return builderResult.enconditon
       }
       set (value) {
           builderResult.hasEnconditon = true
           builderResult.enconditon = value
       }
  }
  func clearEnconditon() -> PkgPageQueryLeadReqBuilder{
       builderResult.hasEnconditon = false
       builderResult.enconditon = Int32(0)
       return self
  }
  var hasPkgquerycondition:Bool {
       get {
           return builderResult.hasPkgquerycondition
       }
  }
  var pkgquerycondition:PkgQueryCondition {
       get {
           return builderResult.pkgquerycondition
       }
       set (value) {
           builderResult.hasPkgquerycondition = true
           builderResult.pkgquerycondition = value
       }
  }
  func setPkgqueryconditionBuilder(builderForValue:PkgQueryConditionBuilder) -> PkgPageQueryLeadReqBuilder {
    pkgquerycondition = builderForValue.build()
    return self
  }
  func mergePkgquerycondition(value:PkgQueryCondition) -> PkgPageQueryLeadReqBuilder {
    if (builderResult.hasPkgquerycondition && builderResult.pkgquerycondition != PkgQueryCondition()) {
      builderResult.pkgquerycondition = PkgQueryCondition.builderWithPrototype(builderResult.pkgquerycondition).mergeFrom(value).buildPartial()
    } else {
      builderResult.pkgquerycondition = value
    }
    builderResult.hasPkgquerycondition = true
    return self
  }
  func clearPkgquerycondition() -> PkgPageQueryLeadReqBuilder {
    builderResult.hasPkgquerycondition = false
    builderResult.pkgquerycondition = PkgQueryCondition()
    return self
  }
    var hasPageflag:Bool{
        get {
            return builderResult.hasPageflag
        }
    }
    var pageflag:EnPageFlag {
        get {
            return builderResult.pageflag
        }
        set (value) {
            builderResult.hasPageflag = true
            builderResult.pageflag = value
        }
    }
    func clearPageflag() -> PkgPageQueryLeadReqBuilder {
       builderResult.hasPageflag = false
       builderResult.pageflag = .PReturnall
       return self
    }
  var hasIndexstart:Bool {
       get {
            return builderResult.hasIndexstart
       }
  }
  var indexstart:Int32 {
       get {
            return builderResult.indexstart
       }
       set (value) {
           builderResult.hasIndexstart = true
           builderResult.indexstart = value
       }
  }
  func clearIndexstart() -> PkgPageQueryLeadReqBuilder{
       builderResult.hasIndexstart = false
       builderResult.indexstart = Int32(0)
       return self
  }
  var hasIndexend:Bool {
       get {
            return builderResult.hasIndexend
       }
  }
  var indexend:Int32 {
       get {
            return builderResult.indexend
       }
       set (value) {
           builderResult.hasIndexend = true
           builderResult.indexend = value
       }
  }
  func clearIndexend() -> PkgPageQueryLeadReqBuilder{
       builderResult.hasIndexend = false
       builderResult.indexend = Int32(0)
       return self
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> PkgPageQueryLeadReqBuilder {
    builderResult = PkgPageQueryLeadReq()
    return self
  }
  override func clone() -> PkgPageQueryLeadReqBuilder {
    return PkgPageQueryLeadReq.builderWithPrototype(builderResult)
  }
  override func build() -> PkgPageQueryLeadReq {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> PkgPageQueryLeadReq {
    var returnMe:PkgPageQueryLeadReq = builderResult
    return returnMe
  }
  func mergeFrom(other:PkgPageQueryLeadReq) -> PkgPageQueryLeadReqBuilder {
    if (other == PkgPageQueryLeadReq()) {
     return self
    }
    if other.hasEnconditon {
         enconditon = other.enconditon
    }
    if (other.hasPkgquerycondition) {
        mergePkgquerycondition(other.pkgquerycondition)
    }
    if other.hasPageflag {
         pageflag = other.pageflag
    }
    if other.hasIndexstart {
         indexstart = other.indexstart
    }
    if other.hasIndexend {
         indexend = other.indexend
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->PkgPageQueryLeadReqBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PkgPageQueryLeadReqBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 16 :
        enconditon = input.readInt32()

      case 26 :
        var subBuilder:PkgQueryConditionBuilder = PkgQueryCondition.builder()
        if hasPkgquerycondition {
          subBuilder.mergeFrom(pkgquerycondition)
        }
        input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
        pkgquerycondition = subBuilder.buildPartial()

      case 32 :
        var value = input.readEnum()
        var enumMergResult:EnPageFlag = EnPageFlag(rawValue:value)!
        if (EnPageFlag.IsValidValue(enumMergResult)) {
             pageflag = enumMergResult
        } else {
             unknownFieldsBuilder.mergeVarintField(4, value:Int64(value))
        }

      case 40 :
        indexstart = input.readInt32()

      case 48 :
        indexend = input.readInt32()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class PkgPageQueryLeadReply : GeneratedMessage {
  private(set) var hasIssuccess:Bool = false
  private(set) var issuccess:Bool = false

  private(set) var hasErr:Bool = false
  private(set) var err:String = ""

  private(set) var rows:Array<db_crm_lead>  = Array<db_crm_lead>()
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
    if !hasIssuccess {
      return false
    }
    var isInitrows:Bool = true
    for element in rows {
        if (!element.isInitialized()) {
            isInitrows = false
            break 
        }
    }
    if !isInitrows {
     return isInitrows
     }
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasIssuccess {
      output.writeBool(1, value:issuccess)
    }
    if hasErr {
      output.writeString(2, value:err)
    }
    for element in rows {
        output.writeMessage(10, value:element)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasIssuccess {
      size += WireFormat.computeBoolSize(1, value:issuccess)
    }
    if hasErr {
      size += WireFormat.computeStringSize(2, value:err)
    }
    for element in rows {
        size += WireFormat.computeMessageSize(10, value:element)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> PkgPageQueryLeadReply {
    return PkgPageQueryLeadReply.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> PkgPageQueryLeadReply {
    return PkgPageQueryLeadReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> PkgPageQueryLeadReply {
    return PkgPageQueryLeadReply.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PkgPageQueryLeadReply {
    return PkgPageQueryLeadReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> PkgPageQueryLeadReply {
    return PkgPageQueryLeadReply.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PkgPageQueryLeadReply {
    return PkgPageQueryLeadReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> PkgPageQueryLeadReplyBuilder {
    return PkgPageQueryLeadReplyBuilder()
  }
  class func builderWithPrototype(prototype:PkgPageQueryLeadReply) -> PkgPageQueryLeadReplyBuilder {
    return PkgPageQueryLeadReply.builder().mergeFrom(prototype)
  }
  func builder() -> PkgPageQueryLeadReplyBuilder {
    return PkgPageQueryLeadReply.builder()
  }
  func toBuilder() -> PkgPageQueryLeadReplyBuilder {
    return PkgPageQueryLeadReply.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if hasIssuccess {
      output += "\(indent) issuccess: \(issuccess) \n"
    }
    if hasErr {
      output += "\(indent) err: \(err) \n"
    }
    var rowsElementIndex:Int = 0
    for element in rows {
        output += "\(indent) rows[\(rowsElementIndex)] {\n"
        element.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent)}\n"
        rowsElementIndex++
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasIssuccess {
             hashCode = (hashCode &* 31) &+ issuccess.hashValue
          }
          if hasErr {
             hashCode = (hashCode &* 31) &+ err.hashValue
          }
          for element in rows {
              hashCode = (hashCode &* 31) &+ element.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "PkgPageQueryLeadReply"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return PkgPageQueryLeadReply.self
  }


  //Meta information declaration end

}

final class PkgPageQueryLeadReplyBuilder : GeneratedMessageBuilder {
  private var builderResult:PkgPageQueryLeadReply

  required override init () {
     builderResult = PkgPageQueryLeadReply()
     super.init()
  }
  var hasIssuccess:Bool {
       get {
            return builderResult.hasIssuccess
       }
  }
  var issuccess:Bool {
       get {
            return builderResult.issuccess
       }
       set (value) {
           builderResult.hasIssuccess = true
           builderResult.issuccess = value
       }
  }
  func clearIssuccess() -> PkgPageQueryLeadReplyBuilder{
       builderResult.hasIssuccess = false
       builderResult.issuccess = false
       return self
  }
  var hasErr:Bool {
       get {
            return builderResult.hasErr
       }
  }
  var err:String {
       get {
            return builderResult.err
       }
       set (value) {
           builderResult.hasErr = true
           builderResult.err = value
       }
  }
  func clearErr() -> PkgPageQueryLeadReplyBuilder{
       builderResult.hasErr = false
       builderResult.err = ""
       return self
  }
  var rows:Array<db_crm_lead> {
       get {
           return builderResult.rows
       }
       set (value) {
           builderResult.rows = value
       }
  }
  func clearRows() -> PkgPageQueryLeadReplyBuilder {
    builderResult.rows.removeAll(keepCapacity: false)
    return self
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> PkgPageQueryLeadReplyBuilder {
    builderResult = PkgPageQueryLeadReply()
    return self
  }
  override func clone() -> PkgPageQueryLeadReplyBuilder {
    return PkgPageQueryLeadReply.builderWithPrototype(builderResult)
  }
  override func build() -> PkgPageQueryLeadReply {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> PkgPageQueryLeadReply {
    var returnMe:PkgPageQueryLeadReply = builderResult
    return returnMe
  }
  func mergeFrom(other:PkgPageQueryLeadReply) -> PkgPageQueryLeadReplyBuilder {
    if (other == PkgPageQueryLeadReply()) {
     return self
    }
    if other.hasIssuccess {
         issuccess = other.issuccess
    }
    if other.hasErr {
         err = other.err
    }
    if !other.rows.isEmpty  {
       builderResult.rows += other.rows
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->PkgPageQueryLeadReplyBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PkgPageQueryLeadReplyBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 8 :
        issuccess = input.readBool()

      case 18 :
        err = input.readString()

      case 82 :
        var subBuilder = db_crm_lead.builder()
        input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
        rows += [subBuilder.buildPartial()]

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class PkgPageQueryPhonecallReq : GeneratedMessage {
  private(set) var hasEnconditon:Bool = false
  private(set) var enconditon:Int32 = Int32(0)

  private(set) var hasPkgquerycondition:Bool = false
  private(set) var pkgquerycondition:PkgQueryCondition = PkgQueryCondition()
  private(set) var pageflag:EnPageFlag = EnPageFlag.PReturnall
  private(set) var hasPageflag:Bool = false
  private(set) var hasIndexstart:Bool = false
  private(set) var indexstart:Int32 = Int32(0)

  private(set) var hasIndexend:Bool = false
  private(set) var indexend:Int32 = Int32(0)

  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasEnconditon {
      output.writeInt32(2, value:enconditon)
    }
    if hasPkgquerycondition {
      output.writeMessage(3, value:pkgquerycondition)
    }
    if hasPageflag {
      output.writeEnum(4, value:pageflag.rawValue)
    }
    if hasIndexstart {
      output.writeInt32(5, value:indexstart)
    }
    if hasIndexend {
      output.writeInt32(6, value:indexend)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasEnconditon {
      size += WireFormat.computeInt32Size(2, value:enconditon)
    }
    if hasPkgquerycondition {
      size += WireFormat.computeMessageSize(3, value:pkgquerycondition)
    }
    if (hasPageflag) {
      size += WireFormat.computeEnumSize(4, value:pageflag.rawValue)
    }
    if hasIndexstart {
      size += WireFormat.computeInt32Size(5, value:indexstart)
    }
    if hasIndexend {
      size += WireFormat.computeInt32Size(6, value:indexend)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> PkgPageQueryPhonecallReq {
    return PkgPageQueryPhonecallReq.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> PkgPageQueryPhonecallReq {
    return PkgPageQueryPhonecallReq.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> PkgPageQueryPhonecallReq {
    return PkgPageQueryPhonecallReq.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PkgPageQueryPhonecallReq {
    return PkgPageQueryPhonecallReq.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> PkgPageQueryPhonecallReq {
    return PkgPageQueryPhonecallReq.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PkgPageQueryPhonecallReq {
    return PkgPageQueryPhonecallReq.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> PkgPageQueryPhonecallReqBuilder {
    return PkgPageQueryPhonecallReqBuilder()
  }
  class func builderWithPrototype(prototype:PkgPageQueryPhonecallReq) -> PkgPageQueryPhonecallReqBuilder {
    return PkgPageQueryPhonecallReq.builder().mergeFrom(prototype)
  }
  func builder() -> PkgPageQueryPhonecallReqBuilder {
    return PkgPageQueryPhonecallReq.builder()
  }
  func toBuilder() -> PkgPageQueryPhonecallReqBuilder {
    return PkgPageQueryPhonecallReq.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if hasEnconditon {
      output += "\(indent) enconditon: \(enconditon) \n"
    }
    if hasPkgquerycondition {
      output += "\(indent) pkgquerycondition {\n"
      pkgquerycondition.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    if (hasPageflag) {
      output += "\(indent) pageflag: \(pageflag.rawValue)\n"
    }
    if hasIndexstart {
      output += "\(indent) indexstart: \(indexstart) \n"
    }
    if hasIndexend {
      output += "\(indent) indexend: \(indexend) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasEnconditon {
             hashCode = (hashCode &* 31) &+ enconditon.hashValue
          }
          if hasPkgquerycondition {
            hashCode = (hashCode &* 31) &+ pkgquerycondition.hashValue
          }
          if hasPageflag {
             hashCode = (hashCode &* 31) &+ Int(pageflag.rawValue)
          }
          if hasIndexstart {
             hashCode = (hashCode &* 31) &+ indexstart.hashValue
          }
          if hasIndexend {
             hashCode = (hashCode &* 31) &+ indexend.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "PkgPageQueryPhonecallReq"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return PkgPageQueryPhonecallReq.self
  }


  //Meta information declaration end

}

final class PkgPageQueryPhonecallReqBuilder : GeneratedMessageBuilder {
  private var builderResult:PkgPageQueryPhonecallReq

  required override init () {
     builderResult = PkgPageQueryPhonecallReq()
     super.init()
  }
  var hasEnconditon:Bool {
       get {
            return builderResult.hasEnconditon
       }
  }
  var enconditon:Int32 {
       get {
            return builderResult.enconditon
       }
       set (value) {
           builderResult.hasEnconditon = true
           builderResult.enconditon = value
       }
  }
  func clearEnconditon() -> PkgPageQueryPhonecallReqBuilder{
       builderResult.hasEnconditon = false
       builderResult.enconditon = Int32(0)
       return self
  }
  var hasPkgquerycondition:Bool {
       get {
           return builderResult.hasPkgquerycondition
       }
  }
  var pkgquerycondition:PkgQueryCondition {
       get {
           return builderResult.pkgquerycondition
       }
       set (value) {
           builderResult.hasPkgquerycondition = true
           builderResult.pkgquerycondition = value
       }
  }
  func setPkgqueryconditionBuilder(builderForValue:PkgQueryConditionBuilder) -> PkgPageQueryPhonecallReqBuilder {
    pkgquerycondition = builderForValue.build()
    return self
  }
  func mergePkgquerycondition(value:PkgQueryCondition) -> PkgPageQueryPhonecallReqBuilder {
    if (builderResult.hasPkgquerycondition && builderResult.pkgquerycondition != PkgQueryCondition()) {
      builderResult.pkgquerycondition = PkgQueryCondition.builderWithPrototype(builderResult.pkgquerycondition).mergeFrom(value).buildPartial()
    } else {
      builderResult.pkgquerycondition = value
    }
    builderResult.hasPkgquerycondition = true
    return self
  }
  func clearPkgquerycondition() -> PkgPageQueryPhonecallReqBuilder {
    builderResult.hasPkgquerycondition = false
    builderResult.pkgquerycondition = PkgQueryCondition()
    return self
  }
    var hasPageflag:Bool{
        get {
            return builderResult.hasPageflag
        }
    }
    var pageflag:EnPageFlag {
        get {
            return builderResult.pageflag
        }
        set (value) {
            builderResult.hasPageflag = true
            builderResult.pageflag = value
        }
    }
    func clearPageflag() -> PkgPageQueryPhonecallReqBuilder {
       builderResult.hasPageflag = false
       builderResult.pageflag = .PReturnall
       return self
    }
  var hasIndexstart:Bool {
       get {
            return builderResult.hasIndexstart
       }
  }
  var indexstart:Int32 {
       get {
            return builderResult.indexstart
       }
       set (value) {
           builderResult.hasIndexstart = true
           builderResult.indexstart = value
       }
  }
  func clearIndexstart() -> PkgPageQueryPhonecallReqBuilder{
       builderResult.hasIndexstart = false
       builderResult.indexstart = Int32(0)
       return self
  }
  var hasIndexend:Bool {
       get {
            return builderResult.hasIndexend
       }
  }
  var indexend:Int32 {
       get {
            return builderResult.indexend
       }
       set (value) {
           builderResult.hasIndexend = true
           builderResult.indexend = value
       }
  }
  func clearIndexend() -> PkgPageQueryPhonecallReqBuilder{
       builderResult.hasIndexend = false
       builderResult.indexend = Int32(0)
       return self
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> PkgPageQueryPhonecallReqBuilder {
    builderResult = PkgPageQueryPhonecallReq()
    return self
  }
  override func clone() -> PkgPageQueryPhonecallReqBuilder {
    return PkgPageQueryPhonecallReq.builderWithPrototype(builderResult)
  }
  override func build() -> PkgPageQueryPhonecallReq {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> PkgPageQueryPhonecallReq {
    var returnMe:PkgPageQueryPhonecallReq = builderResult
    return returnMe
  }
  func mergeFrom(other:PkgPageQueryPhonecallReq) -> PkgPageQueryPhonecallReqBuilder {
    if (other == PkgPageQueryPhonecallReq()) {
     return self
    }
    if other.hasEnconditon {
         enconditon = other.enconditon
    }
    if (other.hasPkgquerycondition) {
        mergePkgquerycondition(other.pkgquerycondition)
    }
    if other.hasPageflag {
         pageflag = other.pageflag
    }
    if other.hasIndexstart {
         indexstart = other.indexstart
    }
    if other.hasIndexend {
         indexend = other.indexend
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->PkgPageQueryPhonecallReqBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PkgPageQueryPhonecallReqBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 16 :
        enconditon = input.readInt32()

      case 26 :
        var subBuilder:PkgQueryConditionBuilder = PkgQueryCondition.builder()
        if hasPkgquerycondition {
          subBuilder.mergeFrom(pkgquerycondition)
        }
        input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
        pkgquerycondition = subBuilder.buildPartial()

      case 32 :
        var value = input.readEnum()
        var enumMergResult:EnPageFlag = EnPageFlag(rawValue:value)!
        if (EnPageFlag.IsValidValue(enumMergResult)) {
             pageflag = enumMergResult
        } else {
             unknownFieldsBuilder.mergeVarintField(4, value:Int64(value))
        }

      case 40 :
        indexstart = input.readInt32()

      case 48 :
        indexend = input.readInt32()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class PkgPageQueryPhonecallReply : GeneratedMessage {
  private(set) var hasIssuccess:Bool = false
  private(set) var issuccess:Bool = false

  private(set) var hasErr:Bool = false
  private(set) var err:String = ""

  private(set) var rows:Array<db_crm_phonecall>  = Array<db_crm_phonecall>()
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
    if !hasIssuccess {
      return false
    }
    var isInitrows:Bool = true
    for element in rows {
        if (!element.isInitialized()) {
            isInitrows = false
            break 
        }
    }
    if !isInitrows {
     return isInitrows
     }
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasIssuccess {
      output.writeBool(1, value:issuccess)
    }
    if hasErr {
      output.writeString(2, value:err)
    }
    for element in rows {
        output.writeMessage(10, value:element)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasIssuccess {
      size += WireFormat.computeBoolSize(1, value:issuccess)
    }
    if hasErr {
      size += WireFormat.computeStringSize(2, value:err)
    }
    for element in rows {
        size += WireFormat.computeMessageSize(10, value:element)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> PkgPageQueryPhonecallReply {
    return PkgPageQueryPhonecallReply.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> PkgPageQueryPhonecallReply {
    return PkgPageQueryPhonecallReply.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> PkgPageQueryPhonecallReply {
    return PkgPageQueryPhonecallReply.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PkgPageQueryPhonecallReply {
    return PkgPageQueryPhonecallReply.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> PkgPageQueryPhonecallReply {
    return PkgPageQueryPhonecallReply.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PkgPageQueryPhonecallReply {
    return PkgPageQueryPhonecallReply.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> PkgPageQueryPhonecallReplyBuilder {
    return PkgPageQueryPhonecallReplyBuilder()
  }
  class func builderWithPrototype(prototype:PkgPageQueryPhonecallReply) -> PkgPageQueryPhonecallReplyBuilder {
    return PkgPageQueryPhonecallReply.builder().mergeFrom(prototype)
  }
  func builder() -> PkgPageQueryPhonecallReplyBuilder {
    return PkgPageQueryPhonecallReply.builder()
  }
  func toBuilder() -> PkgPageQueryPhonecallReplyBuilder {
    return PkgPageQueryPhonecallReply.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if hasIssuccess {
      output += "\(indent) issuccess: \(issuccess) \n"
    }
    if hasErr {
      output += "\(indent) err: \(err) \n"
    }
    var rowsElementIndex:Int = 0
    for element in rows {
        output += "\(indent) rows[\(rowsElementIndex)] {\n"
        element.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent)}\n"
        rowsElementIndex++
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasIssuccess {
             hashCode = (hashCode &* 31) &+ issuccess.hashValue
          }
          if hasErr {
             hashCode = (hashCode &* 31) &+ err.hashValue
          }
          for element in rows {
              hashCode = (hashCode &* 31) &+ element.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "PkgPageQueryPhonecallReply"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return PkgPageQueryPhonecallReply.self
  }


  //Meta information declaration end

}

final class PkgPageQueryPhonecallReplyBuilder : GeneratedMessageBuilder {
  private var builderResult:PkgPageQueryPhonecallReply

  required override init () {
     builderResult = PkgPageQueryPhonecallReply()
     super.init()
  }
  var hasIssuccess:Bool {
       get {
            return builderResult.hasIssuccess
       }
  }
  var issuccess:Bool {
       get {
            return builderResult.issuccess
       }
       set (value) {
           builderResult.hasIssuccess = true
           builderResult.issuccess = value
       }
  }
  func clearIssuccess() -> PkgPageQueryPhonecallReplyBuilder{
       builderResult.hasIssuccess = false
       builderResult.issuccess = false
       return self
  }
  var hasErr:Bool {
       get {
            return builderResult.hasErr
       }
  }
  var err:String {
       get {
            return builderResult.err
       }
       set (value) {
           builderResult.hasErr = true
           builderResult.err = value
       }
  }
  func clearErr() -> PkgPageQueryPhonecallReplyBuilder{
       builderResult.hasErr = false
       builderResult.err = ""
       return self
  }
  var rows:Array<db_crm_phonecall> {
       get {
           return builderResult.rows
       }
       set (value) {
           builderResult.rows = value
       }
  }
  func clearRows() -> PkgPageQueryPhonecallReplyBuilder {
    builderResult.rows.removeAll(keepCapacity: false)
    return self
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> PkgPageQueryPhonecallReplyBuilder {
    builderResult = PkgPageQueryPhonecallReply()
    return self
  }
  override func clone() -> PkgPageQueryPhonecallReplyBuilder {
    return PkgPageQueryPhonecallReply.builderWithPrototype(builderResult)
  }
  override func build() -> PkgPageQueryPhonecallReply {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> PkgPageQueryPhonecallReply {
    var returnMe:PkgPageQueryPhonecallReply = builderResult
    return returnMe
  }
  func mergeFrom(other:PkgPageQueryPhonecallReply) -> PkgPageQueryPhonecallReplyBuilder {
    if (other == PkgPageQueryPhonecallReply()) {
     return self
    }
    if other.hasIssuccess {
         issuccess = other.issuccess
    }
    if other.hasErr {
         err = other.err
    }
    if !other.rows.isEmpty  {
       builderResult.rows += other.rows
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->PkgPageQueryPhonecallReplyBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PkgPageQueryPhonecallReplyBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 8 :
        issuccess = input.readBool()

      case 18 :
        err = input.readString()

      case 82 :
        var subBuilder = db_crm_phonecall.builder()
        input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
        rows += [subBuilder.buildPartial()]

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

//Class extensions: NSData


extension PkgUserLoginReq {
    class func parseFromNSData(data:NSData) -> PkgUserLoginReq {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return PkgUserLoginReq.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> PkgUserLoginReq {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return PkgUserLoginReq.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension PkgUserLoginReply {
    class func parseFromNSData(data:NSData) -> PkgUserLoginReply {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return PkgUserLoginReply.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> PkgUserLoginReply {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return PkgUserLoginReply.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension PkgOptPartnerReq {
    class func parseFromNSData(data:NSData) -> PkgOptPartnerReq {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return PkgOptPartnerReq.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> PkgOptPartnerReq {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return PkgOptPartnerReq.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension PkgOptPartnerReply {
    class func parseFromNSData(data:NSData) -> PkgOptPartnerReply {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return PkgOptPartnerReply.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> PkgOptPartnerReply {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return PkgOptPartnerReply.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension PkgOptLeadReq {
    class func parseFromNSData(data:NSData) -> PkgOptLeadReq {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return PkgOptLeadReq.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> PkgOptLeadReq {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return PkgOptLeadReq.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension PkgOptLeadReply {
    class func parseFromNSData(data:NSData) -> PkgOptLeadReply {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return PkgOptLeadReply.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> PkgOptLeadReply {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return PkgOptLeadReply.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension PkgOptPhonecallReq {
    class func parseFromNSData(data:NSData) -> PkgOptPhonecallReq {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return PkgOptPhonecallReq.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> PkgOptPhonecallReq {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return PkgOptPhonecallReq.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension PkgOptPhonecallReply {
    class func parseFromNSData(data:NSData) -> PkgOptPhonecallReply {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return PkgOptPhonecallReply.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> PkgOptPhonecallReply {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return PkgOptPhonecallReply.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension PkgQueryCondition {
    class func parseFromNSData(data:NSData) -> PkgQueryCondition {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return PkgQueryCondition.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> PkgQueryCondition {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return PkgQueryCondition.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension PkgPageQueryPartnerReq {
    class func parseFromNSData(data:NSData) -> PkgPageQueryPartnerReq {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return PkgPageQueryPartnerReq.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> PkgPageQueryPartnerReq {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return PkgPageQueryPartnerReq.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension PkgPageQueryPartnerReply {
    class func parseFromNSData(data:NSData) -> PkgPageQueryPartnerReply {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return PkgPageQueryPartnerReply.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> PkgPageQueryPartnerReply {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return PkgPageQueryPartnerReply.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension PkgPageQueryLeadReq {
    class func parseFromNSData(data:NSData) -> PkgPageQueryLeadReq {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return PkgPageQueryLeadReq.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> PkgPageQueryLeadReq {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return PkgPageQueryLeadReq.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension PkgPageQueryLeadReply {
    class func parseFromNSData(data:NSData) -> PkgPageQueryLeadReply {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return PkgPageQueryLeadReply.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> PkgPageQueryLeadReply {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return PkgPageQueryLeadReply.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension PkgPageQueryPhonecallReq {
    class func parseFromNSData(data:NSData) -> PkgPageQueryPhonecallReq {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return PkgPageQueryPhonecallReq.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> PkgPageQueryPhonecallReq {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return PkgPageQueryPhonecallReq.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension PkgPageQueryPhonecallReply {
    class func parseFromNSData(data:NSData) -> PkgPageQueryPhonecallReply {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return PkgPageQueryPhonecallReply.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> PkgPageQueryPhonecallReply {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return PkgPageQueryPhonecallReply.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}

// @@protoc_insertion_point(global_scope)
