// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
//import ProtocolBuffers

struct NosqldbRoot {
  static var sharedInstance : NosqldbRoot {
   struct Static {
       static let instance : NosqldbRoot = NosqldbRoot()
   }
   return Static.instance
  }
  var extensionRegistry:ExtensionRegistry

  init() {
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(extensionRegistry)
  }
  func registerAllExtensions(registry:ExtensionRegistry) {
  }
}

func == (lhs: db_res_users, rhs: db_res_users) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasUuiduserid == rhs.hasUuiduserid) && (!lhs.hasUuiduserid || lhs.uuiduserid == rhs.uuiduserid)
  fieldCheck = fieldCheck && (lhs.hasTypes == rhs.hasTypes) && (!lhs.hasTypes || lhs.types == rhs.types)
  fieldCheck = fieldCheck && (lhs.channel == rhs.channel)
  fieldCheck = fieldCheck && (lhs.hasUuidcompanyid == rhs.hasUuidcompanyid) && (!lhs.hasUuidcompanyid || lhs.uuidcompanyid == rhs.uuidcompanyid)
  fieldCheck = fieldCheck && (lhs.hasRealname == rhs.hasRealname) && (!lhs.hasRealname || lhs.realname == rhs.realname)
  fieldCheck = fieldCheck && (lhs.hasPhonenumber == rhs.hasPhonenumber) && (!lhs.hasPhonenumber || lhs.phonenumber == rhs.phonenumber)
  fieldCheck = fieldCheck && (lhs.hasEmailaddress == rhs.hasEmailaddress) && (!lhs.hasEmailaddress || lhs.emailaddress == rhs.emailaddress)
  fieldCheck = fieldCheck && (lhs.hasHashedpassword == rhs.hasHashedpassword) && (!lhs.hasHashedpassword || lhs.hashedpassword == rhs.hashedpassword)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: db_res_company, rhs: db_res_company) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasUuidcompanyid == rhs.hasUuidcompanyid) && (!lhs.hasUuidcompanyid || lhs.uuidcompanyid == rhs.uuidcompanyid)
  fieldCheck = fieldCheck && (lhs.hasTypes == rhs.hasTypes) && (!lhs.hasTypes || lhs.types == rhs.types)
  fieldCheck = fieldCheck && (lhs.channel == rhs.channel)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasEmail == rhs.hasEmail) && (!lhs.hasEmail || lhs.email == rhs.email)
  fieldCheck = fieldCheck && (lhs.hasPhone == rhs.hasPhone) && (!lhs.hasPhone || lhs.phone == rhs.phone)
  fieldCheck = fieldCheck && (lhs.hasWriteDate == rhs.hasWriteDate) && (!lhs.hasWriteDate || lhs.writeDate == rhs.writeDate)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: db_res_partner, rhs: db_res_partner) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasUuidpartner == rhs.hasUuidpartner) && (!lhs.hasUuidpartner || lhs.uuidpartner == rhs.uuidpartner)
  fieldCheck = fieldCheck && (lhs.hasTypes == rhs.hasTypes) && (!lhs.hasTypes || lhs.types == rhs.types)
  fieldCheck = fieldCheck && (lhs.channel == rhs.channel)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasCreateDate == rhs.hasCreateDate) && (!lhs.hasCreateDate || lhs.createDate == rhs.createDate)
  fieldCheck = fieldCheck && (lhs.hasImageSmall == rhs.hasImageSmall) && (!lhs.hasImageSmall || lhs.imageSmall == rhs.imageSmall)
  fieldCheck = fieldCheck && (lhs.hasImage == rhs.hasImage) && (!lhs.hasImage || lhs.image == rhs.image)
  fieldCheck = fieldCheck && (lhs.hasDate == rhs.hasDate) && (!lhs.hasDate || lhs.date == rhs.date)
  fieldCheck = fieldCheck && (lhs.hasStreet == rhs.hasStreet) && (!lhs.hasStreet || lhs.street == rhs.street)
  fieldCheck = fieldCheck && (lhs.hasCity == rhs.hasCity) && (!lhs.hasCity || lhs.city == rhs.city)
  fieldCheck = fieldCheck && (lhs.hasDisplayName == rhs.hasDisplayName) && (!lhs.hasDisplayName || lhs.displayName == rhs.displayName)
  fieldCheck = fieldCheck && (lhs.hasZip == rhs.hasZip) && (!lhs.hasZip || lhs.zip == rhs.zip)
  fieldCheck = fieldCheck && (lhs.hasTitle == rhs.hasTitle) && (!lhs.hasTitle || lhs.title == rhs.title)
  fieldCheck = fieldCheck && (lhs.hasSupplier == rhs.hasSupplier) && (!lhs.hasSupplier || lhs.supplier == rhs.supplier)
  fieldCheck = fieldCheck && (lhs.hasEmail == rhs.hasEmail) && (!lhs.hasEmail || lhs.email == rhs.email)
  fieldCheck = fieldCheck && (lhs.hasIsCompany == rhs.hasIsCompany) && (!lhs.hasIsCompany || lhs.isCompany == rhs.isCompany)
  fieldCheck = fieldCheck && (lhs.hasWebsite == rhs.hasWebsite) && (!lhs.hasWebsite || lhs.website == rhs.website)
  fieldCheck = fieldCheck && (lhs.hasCustomer == rhs.hasCustomer) && (!lhs.hasCustomer || lhs.customer == rhs.customer)
  fieldCheck = fieldCheck && (lhs.hasStreet2 == rhs.hasStreet2) && (!lhs.hasStreet2 || lhs.street2 == rhs.street2)
  fieldCheck = fieldCheck && (lhs.hasFax == rhs.hasFax) && (!lhs.hasFax || lhs.fax == rhs.fax)
  fieldCheck = fieldCheck && (lhs.hasEmployee == rhs.hasEmployee) && (!lhs.hasEmployee || lhs.employee == rhs.employee)
  fieldCheck = fieldCheck && (lhs.hasWriteDate == rhs.hasWriteDate) && (!lhs.hasWriteDate || lhs.writeDate == rhs.writeDate)
  fieldCheck = fieldCheck && (lhs.hasActive == rhs.hasActive) && (!lhs.hasActive || lhs.active == rhs.active)
  fieldCheck = fieldCheck && (lhs.hasMobile == rhs.hasMobile) && (!lhs.hasMobile || lhs.mobile == rhs.mobile)
  fieldCheck = fieldCheck && (lhs.hasPhone == rhs.hasPhone) && (!lhs.hasPhone || lhs.phone == rhs.phone)
  fieldCheck = fieldCheck && (lhs.hasBirthdate == rhs.hasBirthdate) && (!lhs.hasBirthdate || lhs.birthdate == rhs.birthdate)
  fieldCheck = fieldCheck && (lhs.hasNotifyEmail == rhs.hasNotifyEmail) && (!lhs.hasNotifyEmail || lhs.notifyEmail == rhs.notifyEmail)
  fieldCheck = fieldCheck && (lhs.hasColor == rhs.hasColor) && (!lhs.hasColor || lhs.color == rhs.color)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: db_crm_lead, rhs: db_crm_lead) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasUuidleadid == rhs.hasUuidleadid) && (!lhs.hasUuidleadid || lhs.uuidleadid == rhs.uuidleadid)
  fieldCheck = fieldCheck && (lhs.hasTypes == rhs.hasTypes) && (!lhs.hasTypes || lhs.types == rhs.types)
  fieldCheck = fieldCheck && (lhs.channel == rhs.channel)
  fieldCheck = fieldCheck && (lhs.hasUuiduserid == rhs.hasUuiduserid) && (!lhs.hasUuiduserid || lhs.uuiduserid == rhs.uuiduserid)
  fieldCheck = fieldCheck && (lhs.hasUuidpartnerid == rhs.hasUuidpartnerid) && (!lhs.hasUuidpartnerid || lhs.uuidpartnerid == rhs.uuidpartnerid)
  fieldCheck = fieldCheck && (lhs.hasUuidcompanyid == rhs.hasUuidcompanyid) && (!lhs.hasUuidcompanyid || lhs.uuidcompanyid == rhs.uuidcompanyid)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasCreatedate == rhs.hasCreatedate) && (!lhs.hasCreatedate || lhs.createdate == rhs.createdate)
  fieldCheck = fieldCheck && (lhs.hasPartnerName == rhs.hasPartnerName) && (!lhs.hasPartnerName || lhs.partnerName == rhs.partnerName)
  fieldCheck = fieldCheck && (lhs.hasContactName == rhs.hasContactName) && (!lhs.hasContactName || lhs.contactName == rhs.contactName)
  fieldCheck = fieldCheck && (lhs.hasMobile == rhs.hasMobile) && (!lhs.hasMobile || lhs.mobile == rhs.mobile)
  fieldCheck = fieldCheck && (lhs.hasPhone == rhs.hasPhone) && (!lhs.hasPhone || lhs.phone == rhs.phone)
  fieldCheck = fieldCheck && (lhs.hasTitle == rhs.hasTitle) && (!lhs.hasTitle || lhs.title == rhs.title)
  fieldCheck = fieldCheck && (lhs.hasStreet2 == rhs.hasStreet2) && (!lhs.hasStreet2 || lhs.street2 == rhs.street2)
  fieldCheck = fieldCheck && (lhs.hasZip == rhs.hasZip) && (!lhs.hasZip || lhs.zip == rhs.zip)
  fieldCheck = fieldCheck && (lhs.hasFax == rhs.hasFax) && (!lhs.hasFax || lhs.fax == rhs.fax)
  fieldCheck = fieldCheck && (lhs.hasEmailCc == rhs.hasEmailCc) && (!lhs.hasEmailCc || lhs.emailCc == rhs.emailCc)
  fieldCheck = fieldCheck && (lhs.hasPriority == rhs.hasPriority) && (!lhs.hasPriority || lhs.priority == rhs.priority)
  fieldCheck = fieldCheck && (lhs.hasMessageLastPost == rhs.hasMessageLastPost) && (!lhs.hasMessageLastPost || lhs.messageLastPost == rhs.messageLastPost)
  fieldCheck = fieldCheck && (lhs.hasCreateDate == rhs.hasCreateDate) && (!lhs.hasCreateDate || lhs.createDate == rhs.createDate)
  fieldCheck = fieldCheck && (lhs.hasDateClosed == rhs.hasDateClosed) && (!lhs.hasDateClosed || lhs.dateClosed == rhs.dateClosed)
  fieldCheck = fieldCheck && (lhs.hasDateDeadline == rhs.hasDateDeadline) && (!lhs.hasDateDeadline || lhs.dateDeadline == rhs.dateDeadline)
  fieldCheck = fieldCheck && (lhs.hasColor == rhs.hasColor) && (!lhs.hasColor || lhs.color == rhs.color)
  fieldCheck = fieldCheck && (lhs.hasActive == rhs.hasActive) && (!lhs.hasActive || lhs.active == rhs.active)
  fieldCheck = fieldCheck && (lhs.hasDesc == rhs.hasDesc) && (!lhs.hasDesc || lhs.desc == rhs.desc)
  fieldCheck = fieldCheck && (lhs.hasTitleAction == rhs.hasTitleAction) && (!lhs.hasTitleAction || lhs.titleAction == rhs.titleAction)
  fieldCheck = fieldCheck && (lhs.hasProbability == rhs.hasProbability) && (!lhs.hasProbability || lhs.probability == rhs.probability)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: db_crm_phonecall, rhs: db_crm_phonecall) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasUuidphonecallid == rhs.hasUuidphonecallid) && (!lhs.hasUuidphonecallid || lhs.uuidphonecallid == rhs.uuidphonecallid)
  fieldCheck = fieldCheck && (lhs.hasTypes == rhs.hasTypes) && (!lhs.hasTypes || lhs.types == rhs.types)
  fieldCheck = fieldCheck && (lhs.channel == rhs.channel)
  fieldCheck = fieldCheck && (lhs.hasUuiduserid == rhs.hasUuiduserid) && (!lhs.hasUuiduserid || lhs.uuiduserid == rhs.uuiduserid)
  fieldCheck = fieldCheck && (lhs.hasUuidpartner == rhs.hasUuidpartner) && (!lhs.hasUuidpartner || lhs.uuidpartner == rhs.uuidpartner)
  fieldCheck = fieldCheck && (lhs.hasDateClosed == rhs.hasDateClosed) && (!lhs.hasDateClosed || lhs.dateClosed == rhs.dateClosed)
  fieldCheck = fieldCheck && (lhs.hasCreateDate == rhs.hasCreateDate) && (!lhs.hasCreateDate || lhs.createDate == rhs.createDate)
  fieldCheck = fieldCheck && (lhs.hasDate == rhs.hasDate) && (!lhs.hasDate || lhs.date == rhs.date)
  fieldCheck = fieldCheck && (lhs.hasPriority == rhs.hasPriority) && (!lhs.hasPriority || lhs.priority == rhs.priority)
  fieldCheck = fieldCheck && (lhs.hasState == rhs.hasState) && (!lhs.hasState || lhs.state == rhs.state)
  fieldCheck = fieldCheck && (lhs.hasDesc == rhs.hasDesc) && (!lhs.hasDesc || lhs.desc == rhs.desc)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasPartnerMobile == rhs.hasPartnerMobile) && (!lhs.hasPartnerMobile || lhs.partnerMobile == rhs.partnerMobile)
  fieldCheck = fieldCheck && (lhs.hasWriteDate == rhs.hasWriteDate) && (!lhs.hasWriteDate || lhs.writeDate == rhs.writeDate)
  fieldCheck = fieldCheck && (lhs.hasDateOpen == rhs.hasDateOpen) && (!lhs.hasDateOpen || lhs.dateOpen == rhs.dateOpen)
  fieldCheck = fieldCheck && (lhs.hasPartnerPhone == rhs.hasPartnerPhone) && (!lhs.hasPartnerPhone || lhs.partnerPhone == rhs.partnerPhone)
  fieldCheck = fieldCheck && (lhs.hasEmailFrom == rhs.hasEmailFrom) && (!lhs.hasEmailFrom || lhs.emailFrom == rhs.emailFrom)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

final public class db_res_users : GeneratedMessage {
  private(set) var hasUuiduserid:Bool = false
  private(set) var uuiduserid:String = ""

  private(set) var hasTypes:Bool = false
  private(set) var types:String = "res_user"

  private(set) var hasUuidcompanyid:Bool = false
  private(set) var uuidcompanyid:String = ""

  private(set) var hasRealname:Bool = false
  private(set) var realname:String = ""

  private(set) var hasPhonenumber:Bool = false
  private(set) var phonenumber:String = ""

  private(set) var hasEmailaddress:Bool = false
  private(set) var emailaddress:String = ""

  private(set) var hasHashedpassword:Bool = false
  private(set) var hashedpassword:String = ""

  private(set) var channel:Array<String> = Array<String>()
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
    if !hasUuiduserid {
      return false
    }
    if !hasTypes {
      return false
    }
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasUuiduserid {
      output.writeString(1, value:uuiduserid)
    }
    if hasTypes {
      output.writeString(2, value:types)
    }
    if !channel.isEmpty {
      for value in channel {
        output.writeString(3, value:value)
      }
    }
    if hasUuidcompanyid {
      output.writeString(4, value:uuidcompanyid)
    }
    if hasRealname {
      output.writeString(11, value:realname)
    }
    if hasPhonenumber {
      output.writeString(12, value:phonenumber)
    }
    if hasEmailaddress {
      output.writeString(13, value:emailaddress)
    }
    if hasHashedpassword {
      output.writeString(14, value:hashedpassword)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasUuiduserid {
      size += WireFormat.computeStringSize(1, value:uuiduserid)
    }
    if hasTypes {
      size += WireFormat.computeStringSize(2, value:types)
    }
    var dataSizeChannel:Int32 = 0
    for element in channel {
        dataSizeChannel += WireFormat.computeStringSizeNoTag(element)
    }
    size += dataSizeChannel
    size += 1 * Int32(channel.count)
    if hasUuidcompanyid {
      size += WireFormat.computeStringSize(4, value:uuidcompanyid)
    }
    if hasRealname {
      size += WireFormat.computeStringSize(11, value:realname)
    }
    if hasPhonenumber {
      size += WireFormat.computeStringSize(12, value:phonenumber)
    }
    if hasEmailaddress {
      size += WireFormat.computeStringSize(13, value:emailaddress)
    }
    if hasHashedpassword {
      size += WireFormat.computeStringSize(14, value:hashedpassword)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> db_res_users {
    return db_res_users.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> db_res_users {
    return db_res_users.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> db_res_users {
    return db_res_users.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->db_res_users {
    return db_res_users.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> db_res_users {
    return db_res_users.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> db_res_users {
    return db_res_users.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> db_res_usersBuilder {
    return db_res_usersBuilder()
  }
  class func builderWithPrototype(prototype:db_res_users) -> db_res_usersBuilder {
    return db_res_users.builder().mergeFrom(prototype)
  }
  func builder() -> db_res_usersBuilder {
    return db_res_users.builder()
  }
  func toBuilder() -> db_res_usersBuilder {
    return db_res_users.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if hasUuiduserid {
      output += "\(indent) uuiduserid: \(uuiduserid) \n"
    }
    if hasTypes {
      output += "\(indent) types: \(types) \n"
    }
    var channelElementIndex:Int = 0
    for element in channel  {
        output += "\(indent) channel[\(channelElementIndex)]: \(element)\n"
        channelElementIndex++
    }
    if hasUuidcompanyid {
      output += "\(indent) uuidcompanyid: \(uuidcompanyid) \n"
    }
    if hasRealname {
      output += "\(indent) realname: \(realname) \n"
    }
    if hasPhonenumber {
      output += "\(indent) phonenumber: \(phonenumber) \n"
    }
    if hasEmailaddress {
      output += "\(indent) emailaddress: \(emailaddress) \n"
    }
    if hasHashedpassword {
      output += "\(indent) hashedpassword: \(hashedpassword) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasUuiduserid {
             hashCode = (hashCode &* 31) &+ uuiduserid.hashValue
          }
          if hasTypes {
             hashCode = (hashCode &* 31) &+ types.hashValue
          }
          for element in channel {
              hashCode = (hashCode &* 31) &+ element.hashValue
          }
          if hasUuidcompanyid {
             hashCode = (hashCode &* 31) &+ uuidcompanyid.hashValue
          }
          if hasRealname {
             hashCode = (hashCode &* 31) &+ realname.hashValue
          }
          if hasPhonenumber {
             hashCode = (hashCode &* 31) &+ phonenumber.hashValue
          }
          if hasEmailaddress {
             hashCode = (hashCode &* 31) &+ emailaddress.hashValue
          }
          if hasHashedpassword {
             hashCode = (hashCode &* 31) &+ hashedpassword.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "db_res_users"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return db_res_users.self
  }


  //Meta information declaration end

}

final class db_res_usersBuilder : GeneratedMessageBuilder {
  private var builderResult:db_res_users

  required override init () {
     builderResult = db_res_users()
     super.init()
  }
  var hasUuiduserid:Bool {
       get {
            return builderResult.hasUuiduserid
       }
  }
  var uuiduserid:String {
       get {
            return builderResult.uuiduserid
       }
       set (value) {
           builderResult.hasUuiduserid = true
           builderResult.uuiduserid = value
       }
  }
  func clearUuiduserid() -> db_res_usersBuilder{
       builderResult.hasUuiduserid = false
       builderResult.uuiduserid = ""
       return self
  }
  var hasTypes:Bool {
       get {
            return builderResult.hasTypes
       }
  }
  var types:String {
       get {
            return builderResult.types
       }
       set (value) {
           builderResult.hasTypes = true
           builderResult.types = value
       }
  }
  func clearTypes() -> db_res_usersBuilder{
       builderResult.hasTypes = false
       builderResult.types = "res_user"
       return self
  }
  var channel:Array<String> {
       get {
           return builderResult.channel
       }
       set (array) {
           builderResult.channel = array
       }
  }
  func clearChannel() -> db_res_usersBuilder {
     builderResult.channel.removeAll(keepCapacity: false)
     return self
  }
  var hasUuidcompanyid:Bool {
       get {
            return builderResult.hasUuidcompanyid
       }
  }
  var uuidcompanyid:String {
       get {
            return builderResult.uuidcompanyid
       }
       set (value) {
           builderResult.hasUuidcompanyid = true
           builderResult.uuidcompanyid = value
       }
  }
  func clearUuidcompanyid() -> db_res_usersBuilder{
       builderResult.hasUuidcompanyid = false
       builderResult.uuidcompanyid = ""
       return self
  }
  var hasRealname:Bool {
       get {
            return builderResult.hasRealname
       }
  }
  var realname:String {
       get {
            return builderResult.realname
       }
       set (value) {
           builderResult.hasRealname = true
           builderResult.realname = value
       }
  }
  func clearRealname() -> db_res_usersBuilder{
       builderResult.hasRealname = false
       builderResult.realname = ""
       return self
  }
  var hasPhonenumber:Bool {
       get {
            return builderResult.hasPhonenumber
       }
  }
  var phonenumber:String {
       get {
            return builderResult.phonenumber
       }
       set (value) {
           builderResult.hasPhonenumber = true
           builderResult.phonenumber = value
       }
  }
  func clearPhonenumber() -> db_res_usersBuilder{
       builderResult.hasPhonenumber = false
       builderResult.phonenumber = ""
       return self
  }
  var hasEmailaddress:Bool {
       get {
            return builderResult.hasEmailaddress
       }
  }
  var emailaddress:String {
       get {
            return builderResult.emailaddress
       }
       set (value) {
           builderResult.hasEmailaddress = true
           builderResult.emailaddress = value
       }
  }
  func clearEmailaddress() -> db_res_usersBuilder{
       builderResult.hasEmailaddress = false
       builderResult.emailaddress = ""
       return self
  }
  var hasHashedpassword:Bool {
       get {
            return builderResult.hasHashedpassword
       }
  }
  var hashedpassword:String {
       get {
            return builderResult.hashedpassword
       }
       set (value) {
           builderResult.hasHashedpassword = true
           builderResult.hashedpassword = value
       }
  }
  func clearHashedpassword() -> db_res_usersBuilder{
       builderResult.hasHashedpassword = false
       builderResult.hashedpassword = ""
       return self
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> db_res_usersBuilder {
    builderResult = db_res_users()
    return self
  }
  override func clone() -> db_res_usersBuilder {
    return db_res_users.builderWithPrototype(builderResult)
  }
  override func build() -> db_res_users {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> db_res_users {
    var returnMe:db_res_users = builderResult
    return returnMe
  }
  func mergeFrom(other:db_res_users) -> db_res_usersBuilder {
    if (other == db_res_users()) {
     return self
    }
    if other.hasUuiduserid {
         uuiduserid = other.uuiduserid
    }
    if other.hasTypes {
         types = other.types
    }
    if !other.channel.isEmpty {
        builderResult.channel += other.channel
    }
    if other.hasUuidcompanyid {
         uuidcompanyid = other.uuidcompanyid
    }
    if other.hasRealname {
         realname = other.realname
    }
    if other.hasPhonenumber {
         phonenumber = other.phonenumber
    }
    if other.hasEmailaddress {
         emailaddress = other.emailaddress
    }
    if other.hasHashedpassword {
         hashedpassword = other.hashedpassword
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->db_res_usersBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> db_res_usersBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 10 :
        uuiduserid = input.readString()

      case 18 :
        types = input.readString()

      case 26 :
        channel += [input.readString()]

      case 34 :
        uuidcompanyid = input.readString()

      case 90 :
        realname = input.readString()

      case 98 :
        phonenumber = input.readString()

      case 106 :
        emailaddress = input.readString()

      case 114 :
        hashedpassword = input.readString()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class db_res_company : GeneratedMessage {
  private(set) var hasUuidcompanyid:Bool = false
  private(set) var uuidcompanyid:String = ""

  private(set) var hasTypes:Bool = false
  private(set) var types:String = "res_company"

  private(set) var hasName:Bool = false
  private(set) var name:String = ""

  private(set) var hasEmail:Bool = false
  private(set) var email:String = ""

  private(set) var hasPhone:Bool = false
  private(set) var phone:String = ""

  private(set) var hasWriteDate:Bool = false
  private(set) var writeDate:String = ""

  private(set) var channel:Array<String> = Array<String>()
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
    if !hasUuidcompanyid {
      return false
    }
    if !hasTypes {
      return false
    }
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasUuidcompanyid {
      output.writeString(1, value:uuidcompanyid)
    }
    if hasTypes {
      output.writeString(2, value:types)
    }
    if !channel.isEmpty {
      for value in channel {
        output.writeString(3, value:value)
      }
    }
    if hasName {
      output.writeString(11, value:name)
    }
    if hasEmail {
      output.writeString(12, value:email)
    }
    if hasPhone {
      output.writeString(13, value:phone)
    }
    if hasWriteDate {
      output.writeString(14, value:writeDate)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasUuidcompanyid {
      size += WireFormat.computeStringSize(1, value:uuidcompanyid)
    }
    if hasTypes {
      size += WireFormat.computeStringSize(2, value:types)
    }
    var dataSizeChannel:Int32 = 0
    for element in channel {
        dataSizeChannel += WireFormat.computeStringSizeNoTag(element)
    }
    size += dataSizeChannel
    size += 1 * Int32(channel.count)
    if hasName {
      size += WireFormat.computeStringSize(11, value:name)
    }
    if hasEmail {
      size += WireFormat.computeStringSize(12, value:email)
    }
    if hasPhone {
      size += WireFormat.computeStringSize(13, value:phone)
    }
    if hasWriteDate {
      size += WireFormat.computeStringSize(14, value:writeDate)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> db_res_company {
    return db_res_company.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> db_res_company {
    return db_res_company.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> db_res_company {
    return db_res_company.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->db_res_company {
    return db_res_company.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> db_res_company {
    return db_res_company.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> db_res_company {
    return db_res_company.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> db_res_companyBuilder {
    return db_res_companyBuilder()
  }
  class func builderWithPrototype(prototype:db_res_company) -> db_res_companyBuilder {
    return db_res_company.builder().mergeFrom(prototype)
  }
  func builder() -> db_res_companyBuilder {
    return db_res_company.builder()
  }
  func toBuilder() -> db_res_companyBuilder {
    return db_res_company.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if hasUuidcompanyid {
      output += "\(indent) uuidcompanyid: \(uuidcompanyid) \n"
    }
    if hasTypes {
      output += "\(indent) types: \(types) \n"
    }
    var channelElementIndex:Int = 0
    for element in channel  {
        output += "\(indent) channel[\(channelElementIndex)]: \(element)\n"
        channelElementIndex++
    }
    if hasName {
      output += "\(indent) name: \(name) \n"
    }
    if hasEmail {
      output += "\(indent) email: \(email) \n"
    }
    if hasPhone {
      output += "\(indent) phone: \(phone) \n"
    }
    if hasWriteDate {
      output += "\(indent) writeDate: \(writeDate) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasUuidcompanyid {
             hashCode = (hashCode &* 31) &+ uuidcompanyid.hashValue
          }
          if hasTypes {
             hashCode = (hashCode &* 31) &+ types.hashValue
          }
          for element in channel {
              hashCode = (hashCode &* 31) &+ element.hashValue
          }
          if hasName {
             hashCode = (hashCode &* 31) &+ name.hashValue
          }
          if hasEmail {
             hashCode = (hashCode &* 31) &+ email.hashValue
          }
          if hasPhone {
             hashCode = (hashCode &* 31) &+ phone.hashValue
          }
          if hasWriteDate {
             hashCode = (hashCode &* 31) &+ writeDate.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "db_res_company"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return db_res_company.self
  }


  //Meta information declaration end

}

final class db_res_companyBuilder : GeneratedMessageBuilder {
  private var builderResult:db_res_company

  required override init () {
     builderResult = db_res_company()
     super.init()
  }
  var hasUuidcompanyid:Bool {
       get {
            return builderResult.hasUuidcompanyid
       }
  }
  var uuidcompanyid:String {
       get {
            return builderResult.uuidcompanyid
       }
       set (value) {
           builderResult.hasUuidcompanyid = true
           builderResult.uuidcompanyid = value
       }
  }
  func clearUuidcompanyid() -> db_res_companyBuilder{
       builderResult.hasUuidcompanyid = false
       builderResult.uuidcompanyid = ""
       return self
  }
  var hasTypes:Bool {
       get {
            return builderResult.hasTypes
       }
  }
  var types:String {
       get {
            return builderResult.types
       }
       set (value) {
           builderResult.hasTypes = true
           builderResult.types = value
       }
  }
  func clearTypes() -> db_res_companyBuilder{
       builderResult.hasTypes = false
       builderResult.types = "res_company"
       return self
  }
  var channel:Array<String> {
       get {
           return builderResult.channel
       }
       set (array) {
           builderResult.channel = array
       }
  }
  func clearChannel() -> db_res_companyBuilder {
     builderResult.channel.removeAll(keepCapacity: false)
     return self
  }
  var hasName:Bool {
       get {
            return builderResult.hasName
       }
  }
  var name:String {
       get {
            return builderResult.name
       }
       set (value) {
           builderResult.hasName = true
           builderResult.name = value
       }
  }
  func clearName() -> db_res_companyBuilder{
       builderResult.hasName = false
       builderResult.name = ""
       return self
  }
  var hasEmail:Bool {
       get {
            return builderResult.hasEmail
       }
  }
  var email:String {
       get {
            return builderResult.email
       }
       set (value) {
           builderResult.hasEmail = true
           builderResult.email = value
       }
  }
  func clearEmail() -> db_res_companyBuilder{
       builderResult.hasEmail = false
       builderResult.email = ""
       return self
  }
  var hasPhone:Bool {
       get {
            return builderResult.hasPhone
       }
  }
  var phone:String {
       get {
            return builderResult.phone
       }
       set (value) {
           builderResult.hasPhone = true
           builderResult.phone = value
       }
  }
  func clearPhone() -> db_res_companyBuilder{
       builderResult.hasPhone = false
       builderResult.phone = ""
       return self
  }
  var hasWriteDate:Bool {
       get {
            return builderResult.hasWriteDate
       }
  }
  var writeDate:String {
       get {
            return builderResult.writeDate
       }
       set (value) {
           builderResult.hasWriteDate = true
           builderResult.writeDate = value
       }
  }
  func clearWriteDate() -> db_res_companyBuilder{
       builderResult.hasWriteDate = false
       builderResult.writeDate = ""
       return self
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> db_res_companyBuilder {
    builderResult = db_res_company()
    return self
  }
  override func clone() -> db_res_companyBuilder {
    return db_res_company.builderWithPrototype(builderResult)
  }
  override func build() -> db_res_company {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> db_res_company {
    var returnMe:db_res_company = builderResult
    return returnMe
  }
  func mergeFrom(other:db_res_company) -> db_res_companyBuilder {
    if (other == db_res_company()) {
     return self
    }
    if other.hasUuidcompanyid {
         uuidcompanyid = other.uuidcompanyid
    }
    if other.hasTypes {
         types = other.types
    }
    if !other.channel.isEmpty {
        builderResult.channel += other.channel
    }
    if other.hasName {
         name = other.name
    }
    if other.hasEmail {
         email = other.email
    }
    if other.hasPhone {
         phone = other.phone
    }
    if other.hasWriteDate {
         writeDate = other.writeDate
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->db_res_companyBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> db_res_companyBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 10 :
        uuidcompanyid = input.readString()

      case 18 :
        types = input.readString()

      case 26 :
        channel += [input.readString()]

      case 90 :
        name = input.readString()

      case 98 :
        email = input.readString()

      case 106 :
        phone = input.readString()

      case 114 :
        writeDate = input.readString()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class db_res_partner : GeneratedMessage {
  private(set) var hasUuidpartner:Bool = false
  private(set) var uuidpartner:String = ""

  private(set) var hasTypes:Bool = false
  private(set) var types:String = "res_partner"

  private(set) var hasName:Bool = false
  private(set) var name:String = ""

  private(set) var hasCreateDate:Bool = false
  private(set) var createDate:String = ""

  private(set) var hasImageSmall:Bool = false
  private(set) var imageSmall:String = ""

  private(set) var hasImage:Bool = false
  private(set) var image:String = ""

  private(set) var hasDate:Bool = false
  private(set) var date:String = ""

  private(set) var hasStreet:Bool = false
  private(set) var street:String = ""

  private(set) var hasCity:Bool = false
  private(set) var city:String = ""

  private(set) var hasDisplayName:Bool = false
  private(set) var displayName:String = ""

  private(set) var hasZip:Bool = false
  private(set) var zip:String = ""

  private(set) var hasTitle:Bool = false
  private(set) var title:Int32 = Int32(0)

  private(set) var hasSupplier:Bool = false
  private(set) var supplier:Bool = false

  private(set) var hasEmail:Bool = false
  private(set) var email:String = ""

  private(set) var hasIsCompany:Bool = false
  private(set) var isCompany:Bool = false

  private(set) var hasWebsite:Bool = false
  private(set) var website:String = ""

  private(set) var hasCustomer:Bool = false
  private(set) var customer:Bool = false

  private(set) var hasStreet2:Bool = false
  private(set) var street2:String = ""

  private(set) var hasFax:Bool = false
  private(set) var fax:String = ""

  private(set) var hasEmployee:Bool = false
  private(set) var employee:Bool = false

  private(set) var hasWriteDate:Bool = false
  private(set) var writeDate:String = ""

  private(set) var hasActive:Bool = false
  private(set) var active:Bool = false

  private(set) var hasMobile:Bool = false
  private(set) var mobile:String = ""

  private(set) var hasPhone:Bool = false
  private(set) var phone:String = ""

  private(set) var hasBirthdate:Bool = false
  private(set) var birthdate:String = ""

  private(set) var hasNotifyEmail:Bool = false
  private(set) var notifyEmail:String = ""

  private(set) var hasColor:Bool = false
  private(set) var color:Int32 = Int32(0)

  private(set) var channel:Array<String> = Array<String>()
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
    if !hasUuidpartner {
      return false
    }
    if !hasTypes {
      return false
    }
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasUuidpartner {
      output.writeString(1, value:uuidpartner)
    }
    if hasTypes {
      output.writeString(2, value:types)
    }
    if !channel.isEmpty {
      for value in channel {
        output.writeString(3, value:value)
      }
    }
    if hasName {
      output.writeString(11, value:name)
    }
    if hasCreateDate {
      output.writeString(12, value:createDate)
    }
    if hasImageSmall {
      output.writeString(13, value:imageSmall)
    }
    if hasImage {
      output.writeString(14, value:image)
    }
    if hasDate {
      output.writeString(15, value:date)
    }
    if hasStreet {
      output.writeString(16, value:street)
    }
    if hasCity {
      output.writeString(17, value:city)
    }
    if hasDisplayName {
      output.writeString(18, value:displayName)
    }
    if hasZip {
      output.writeString(19, value:zip)
    }
    if hasTitle {
      output.writeInt32(20, value:title)
    }
    if hasSupplier {
      output.writeBool(21, value:supplier)
    }
    if hasEmail {
      output.writeString(22, value:email)
    }
    if hasIsCompany {
      output.writeBool(23, value:isCompany)
    }
    if hasWebsite {
      output.writeString(24, value:website)
    }
    if hasCustomer {
      output.writeBool(25, value:customer)
    }
    if hasStreet2 {
      output.writeString(26, value:street2)
    }
    if hasFax {
      output.writeString(27, value:fax)
    }
    if hasEmployee {
      output.writeBool(28, value:employee)
    }
    if hasWriteDate {
      output.writeString(29, value:writeDate)
    }
    if hasActive {
      output.writeBool(30, value:active)
    }
    if hasMobile {
      output.writeString(31, value:mobile)
    }
    if hasPhone {
      output.writeString(32, value:phone)
    }
    if hasBirthdate {
      output.writeString(33, value:birthdate)
    }
    if hasNotifyEmail {
      output.writeString(34, value:notifyEmail)
    }
    if hasColor {
      output.writeInt32(35, value:color)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasUuidpartner {
      size += WireFormat.computeStringSize(1, value:uuidpartner)
    }
    if hasTypes {
      size += WireFormat.computeStringSize(2, value:types)
    }
    var dataSizeChannel:Int32 = 0
    for element in channel {
        dataSizeChannel += WireFormat.computeStringSizeNoTag(element)
    }
    size += dataSizeChannel
    size += 1 * Int32(channel.count)
    if hasName {
      size += WireFormat.computeStringSize(11, value:name)
    }
    if hasCreateDate {
      size += WireFormat.computeStringSize(12, value:createDate)
    }
    if hasImageSmall {
      size += WireFormat.computeStringSize(13, value:imageSmall)
    }
    if hasImage {
      size += WireFormat.computeStringSize(14, value:image)
    }
    if hasDate {
      size += WireFormat.computeStringSize(15, value:date)
    }
    if hasStreet {
      size += WireFormat.computeStringSize(16, value:street)
    }
    if hasCity {
      size += WireFormat.computeStringSize(17, value:city)
    }
    if hasDisplayName {
      size += WireFormat.computeStringSize(18, value:displayName)
    }
    if hasZip {
      size += WireFormat.computeStringSize(19, value:zip)
    }
    if hasTitle {
      size += WireFormat.computeInt32Size(20, value:title)
    }
    if hasSupplier {
      size += WireFormat.computeBoolSize(21, value:supplier)
    }
    if hasEmail {
      size += WireFormat.computeStringSize(22, value:email)
    }
    if hasIsCompany {
      size += WireFormat.computeBoolSize(23, value:isCompany)
    }
    if hasWebsite {
      size += WireFormat.computeStringSize(24, value:website)
    }
    if hasCustomer {
      size += WireFormat.computeBoolSize(25, value:customer)
    }
    if hasStreet2 {
      size += WireFormat.computeStringSize(26, value:street2)
    }
    if hasFax {
      size += WireFormat.computeStringSize(27, value:fax)
    }
    if hasEmployee {
      size += WireFormat.computeBoolSize(28, value:employee)
    }
    if hasWriteDate {
      size += WireFormat.computeStringSize(29, value:writeDate)
    }
    if hasActive {
      size += WireFormat.computeBoolSize(30, value:active)
    }
    if hasMobile {
      size += WireFormat.computeStringSize(31, value:mobile)
    }
    if hasPhone {
      size += WireFormat.computeStringSize(32, value:phone)
    }
    if hasBirthdate {
      size += WireFormat.computeStringSize(33, value:birthdate)
    }
    if hasNotifyEmail {
      size += WireFormat.computeStringSize(34, value:notifyEmail)
    }
    if hasColor {
      size += WireFormat.computeInt32Size(35, value:color)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> db_res_partner {
    return db_res_partner.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> db_res_partner {
    return db_res_partner.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> db_res_partner {
    return db_res_partner.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->db_res_partner {
    return db_res_partner.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> db_res_partner {
    return db_res_partner.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> db_res_partner {
    return db_res_partner.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> db_res_partnerBuilder {
    return db_res_partnerBuilder()
  }
  class func builderWithPrototype(prototype:db_res_partner) -> db_res_partnerBuilder {
    return db_res_partner.builder().mergeFrom(prototype)
  }
  func builder() -> db_res_partnerBuilder {
    return db_res_partner.builder()
  }
  func toBuilder() -> db_res_partnerBuilder {
    return db_res_partner.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if hasUuidpartner {
      output += "\(indent) uuidpartner: \(uuidpartner) \n"
    }
    if hasTypes {
      output += "\(indent) types: \(types) \n"
    }
    var channelElementIndex:Int = 0
    for element in channel  {
        output += "\(indent) channel[\(channelElementIndex)]: \(element)\n"
        channelElementIndex++
    }
    if hasName {
      output += "\(indent) name: \(name) \n"
    }
    if hasCreateDate {
      output += "\(indent) createDate: \(createDate) \n"
    }
    if hasImageSmall {
      output += "\(indent) imageSmall: \(imageSmall) \n"
    }
    if hasImage {
      output += "\(indent) image: \(image) \n"
    }
    if hasDate {
      output += "\(indent) date: \(date) \n"
    }
    if hasStreet {
      output += "\(indent) street: \(street) \n"
    }
    if hasCity {
      output += "\(indent) city: \(city) \n"
    }
    if hasDisplayName {
      output += "\(indent) displayName: \(displayName) \n"
    }
    if hasZip {
      output += "\(indent) zip: \(zip) \n"
    }
    if hasTitle {
      output += "\(indent) title: \(title) \n"
    }
    if hasSupplier {
      output += "\(indent) supplier: \(supplier) \n"
    }
    if hasEmail {
      output += "\(indent) email: \(email) \n"
    }
    if hasIsCompany {
      output += "\(indent) isCompany: \(isCompany) \n"
    }
    if hasWebsite {
      output += "\(indent) website: \(website) \n"
    }
    if hasCustomer {
      output += "\(indent) customer: \(customer) \n"
    }
    if hasStreet2 {
      output += "\(indent) street2: \(street2) \n"
    }
    if hasFax {
      output += "\(indent) fax: \(fax) \n"
    }
    if hasEmployee {
      output += "\(indent) employee: \(employee) \n"
    }
    if hasWriteDate {
      output += "\(indent) writeDate: \(writeDate) \n"
    }
    if hasActive {
      output += "\(indent) active: \(active) \n"
    }
    if hasMobile {
      output += "\(indent) mobile: \(mobile) \n"
    }
    if hasPhone {
      output += "\(indent) phone: \(phone) \n"
    }
    if hasBirthdate {
      output += "\(indent) birthdate: \(birthdate) \n"
    }
    if hasNotifyEmail {
      output += "\(indent) notifyEmail: \(notifyEmail) \n"
    }
    if hasColor {
      output += "\(indent) color: \(color) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasUuidpartner {
             hashCode = (hashCode &* 31) &+ uuidpartner.hashValue
          }
          if hasTypes {
             hashCode = (hashCode &* 31) &+ types.hashValue
          }
          for element in channel {
              hashCode = (hashCode &* 31) &+ element.hashValue
          }
          if hasName {
             hashCode = (hashCode &* 31) &+ name.hashValue
          }
          if hasCreateDate {
             hashCode = (hashCode &* 31) &+ createDate.hashValue
          }
          if hasImageSmall {
             hashCode = (hashCode &* 31) &+ imageSmall.hashValue
          }
          if hasImage {
             hashCode = (hashCode &* 31) &+ image.hashValue
          }
          if hasDate {
             hashCode = (hashCode &* 31) &+ date.hashValue
          }
          if hasStreet {
             hashCode = (hashCode &* 31) &+ street.hashValue
          }
          if hasCity {
             hashCode = (hashCode &* 31) &+ city.hashValue
          }
          if hasDisplayName {
             hashCode = (hashCode &* 31) &+ displayName.hashValue
          }
          if hasZip {
             hashCode = (hashCode &* 31) &+ zip.hashValue
          }
          if hasTitle {
             hashCode = (hashCode &* 31) &+ title.hashValue
          }
          if hasSupplier {
             hashCode = (hashCode &* 31) &+ supplier.hashValue
          }
          if hasEmail {
             hashCode = (hashCode &* 31) &+ email.hashValue
          }
          if hasIsCompany {
             hashCode = (hashCode &* 31) &+ isCompany.hashValue
          }
          if hasWebsite {
             hashCode = (hashCode &* 31) &+ website.hashValue
          }
          if hasCustomer {
             hashCode = (hashCode &* 31) &+ customer.hashValue
          }
          if hasStreet2 {
             hashCode = (hashCode &* 31) &+ street2.hashValue
          }
          if hasFax {
             hashCode = (hashCode &* 31) &+ fax.hashValue
          }
          if hasEmployee {
             hashCode = (hashCode &* 31) &+ employee.hashValue
          }
          if hasWriteDate {
             hashCode = (hashCode &* 31) &+ writeDate.hashValue
          }
          if hasActive {
             hashCode = (hashCode &* 31) &+ active.hashValue
          }
          if hasMobile {
             hashCode = (hashCode &* 31) &+ mobile.hashValue
          }
          if hasPhone {
             hashCode = (hashCode &* 31) &+ phone.hashValue
          }
          if hasBirthdate {
             hashCode = (hashCode &* 31) &+ birthdate.hashValue
          }
          if hasNotifyEmail {
             hashCode = (hashCode &* 31) &+ notifyEmail.hashValue
          }
          if hasColor {
             hashCode = (hashCode &* 31) &+ color.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "db_res_partner"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return db_res_partner.self
  }


  //Meta information declaration end

}

final class db_res_partnerBuilder : GeneratedMessageBuilder {
  private var builderResult:db_res_partner

  required override init () {
     builderResult = db_res_partner()
     super.init()
  }
  var hasUuidpartner:Bool {
       get {
            return builderResult.hasUuidpartner
       }
  }
  var uuidpartner:String {
       get {
            return builderResult.uuidpartner
       }
       set (value) {
           builderResult.hasUuidpartner = true
           builderResult.uuidpartner = value
       }
  }
  func clearUuidpartner() -> db_res_partnerBuilder{
       builderResult.hasUuidpartner = false
       builderResult.uuidpartner = ""
       return self
  }
  var hasTypes:Bool {
       get {
            return builderResult.hasTypes
       }
  }
  var types:String {
       get {
            return builderResult.types
       }
       set (value) {
           builderResult.hasTypes = true
           builderResult.types = value
       }
  }
  func clearTypes() -> db_res_partnerBuilder{
       builderResult.hasTypes = false
       builderResult.types = "res_partner"
       return self
  }
  var channel:Array<String> {
       get {
           return builderResult.channel
       }
       set (array) {
           builderResult.channel = array
       }
  }
  func clearChannel() -> db_res_partnerBuilder {
     builderResult.channel.removeAll(keepCapacity: false)
     return self
  }
  var hasName:Bool {
       get {
            return builderResult.hasName
       }
  }
  var name:String {
       get {
            return builderResult.name
       }
       set (value) {
           builderResult.hasName = true
           builderResult.name = value
       }
  }
  func clearName() -> db_res_partnerBuilder{
       builderResult.hasName = false
       builderResult.name = ""
       return self
  }
  var hasCreateDate:Bool {
       get {
            return builderResult.hasCreateDate
       }
  }
  var createDate:String {
       get {
            return builderResult.createDate
       }
       set (value) {
           builderResult.hasCreateDate = true
           builderResult.createDate = value
       }
  }
  func clearCreateDate() -> db_res_partnerBuilder{
       builderResult.hasCreateDate = false
       builderResult.createDate = ""
       return self
  }
  var hasImageSmall:Bool {
       get {
            return builderResult.hasImageSmall
       }
  }
  var imageSmall:String {
       get {
            return builderResult.imageSmall
       }
       set (value) {
           builderResult.hasImageSmall = true
           builderResult.imageSmall = value
       }
  }
  func clearImageSmall() -> db_res_partnerBuilder{
       builderResult.hasImageSmall = false
       builderResult.imageSmall = ""
       return self
  }
  var hasImage:Bool {
       get {
            return builderResult.hasImage
       }
  }
  var image:String {
       get {
            return builderResult.image
       }
       set (value) {
           builderResult.hasImage = true
           builderResult.image = value
       }
  }
  func clearImage() -> db_res_partnerBuilder{
       builderResult.hasImage = false
       builderResult.image = ""
       return self
  }
  var hasDate:Bool {
       get {
            return builderResult.hasDate
       }
  }
  var date:String {
       get {
            return builderResult.date
       }
       set (value) {
           builderResult.hasDate = true
           builderResult.date = value
       }
  }
  func clearDate() -> db_res_partnerBuilder{
       builderResult.hasDate = false
       builderResult.date = ""
       return self
  }
  var hasStreet:Bool {
       get {
            return builderResult.hasStreet
       }
  }
  var street:String {
       get {
            return builderResult.street
       }
       set (value) {
           builderResult.hasStreet = true
           builderResult.street = value
       }
  }
  func clearStreet() -> db_res_partnerBuilder{
       builderResult.hasStreet = false
       builderResult.street = ""
       return self
  }
  var hasCity:Bool {
       get {
            return builderResult.hasCity
       }
  }
  var city:String {
       get {
            return builderResult.city
       }
       set (value) {
           builderResult.hasCity = true
           builderResult.city = value
       }
  }
  func clearCity() -> db_res_partnerBuilder{
       builderResult.hasCity = false
       builderResult.city = ""
       return self
  }
  var hasDisplayName:Bool {
       get {
            return builderResult.hasDisplayName
       }
  }
  var displayName:String {
       get {
            return builderResult.displayName
       }
       set (value) {
           builderResult.hasDisplayName = true
           builderResult.displayName = value
       }
  }
  func clearDisplayName() -> db_res_partnerBuilder{
       builderResult.hasDisplayName = false
       builderResult.displayName = ""
       return self
  }
  var hasZip:Bool {
       get {
            return builderResult.hasZip
       }
  }
  var zip:String {
       get {
            return builderResult.zip
       }
       set (value) {
           builderResult.hasZip = true
           builderResult.zip = value
       }
  }
  func clearZip() -> db_res_partnerBuilder{
       builderResult.hasZip = false
       builderResult.zip = ""
       return self
  }
  var hasTitle:Bool {
       get {
            return builderResult.hasTitle
       }
  }
  var title:Int32 {
       get {
            return builderResult.title
       }
       set (value) {
           builderResult.hasTitle = true
           builderResult.title = value
       }
  }
  func clearTitle() -> db_res_partnerBuilder{
       builderResult.hasTitle = false
       builderResult.title = Int32(0)
       return self
  }
  var hasSupplier:Bool {
       get {
            return builderResult.hasSupplier
       }
  }
  var supplier:Bool {
       get {
            return builderResult.supplier
       }
       set (value) {
           builderResult.hasSupplier = true
           builderResult.supplier = value
       }
  }
  func clearSupplier() -> db_res_partnerBuilder{
       builderResult.hasSupplier = false
       builderResult.supplier = false
       return self
  }
  var hasEmail:Bool {
       get {
            return builderResult.hasEmail
       }
  }
  var email:String {
       get {
            return builderResult.email
       }
       set (value) {
           builderResult.hasEmail = true
           builderResult.email = value
       }
  }
  func clearEmail() -> db_res_partnerBuilder{
       builderResult.hasEmail = false
       builderResult.email = ""
       return self
  }
  var hasIsCompany:Bool {
       get {
            return builderResult.hasIsCompany
       }
  }
  var isCompany:Bool {
       get {
            return builderResult.isCompany
       }
       set (value) {
           builderResult.hasIsCompany = true
           builderResult.isCompany = value
       }
  }
  func clearIsCompany() -> db_res_partnerBuilder{
       builderResult.hasIsCompany = false
       builderResult.isCompany = false
       return self
  }
  var hasWebsite:Bool {
       get {
            return builderResult.hasWebsite
       }
  }
  var website:String {
       get {
            return builderResult.website
       }
       set (value) {
           builderResult.hasWebsite = true
           builderResult.website = value
       }
  }
  func clearWebsite() -> db_res_partnerBuilder{
       builderResult.hasWebsite = false
       builderResult.website = ""
       return self
  }
  var hasCustomer:Bool {
       get {
            return builderResult.hasCustomer
       }
  }
  var customer:Bool {
       get {
            return builderResult.customer
       }
       set (value) {
           builderResult.hasCustomer = true
           builderResult.customer = value
       }
  }
  func clearCustomer() -> db_res_partnerBuilder{
       builderResult.hasCustomer = false
       builderResult.customer = false
       return self
  }
  var hasStreet2:Bool {
       get {
            return builderResult.hasStreet2
       }
  }
  var street2:String {
       get {
            return builderResult.street2
       }
       set (value) {
           builderResult.hasStreet2 = true
           builderResult.street2 = value
       }
  }
  func clearStreet2() -> db_res_partnerBuilder{
       builderResult.hasStreet2 = false
       builderResult.street2 = ""
       return self
  }
  var hasFax:Bool {
       get {
            return builderResult.hasFax
       }
  }
  var fax:String {
       get {
            return builderResult.fax
       }
       set (value) {
           builderResult.hasFax = true
           builderResult.fax = value
       }
  }
  func clearFax() -> db_res_partnerBuilder{
       builderResult.hasFax = false
       builderResult.fax = ""
       return self
  }
  var hasEmployee:Bool {
       get {
            return builderResult.hasEmployee
       }
  }
  var employee:Bool {
       get {
            return builderResult.employee
       }
       set (value) {
           builderResult.hasEmployee = true
           builderResult.employee = value
       }
  }
  func clearEmployee() -> db_res_partnerBuilder{
       builderResult.hasEmployee = false
       builderResult.employee = false
       return self
  }
  var hasWriteDate:Bool {
       get {
            return builderResult.hasWriteDate
       }
  }
  var writeDate:String {
       get {
            return builderResult.writeDate
       }
       set (value) {
           builderResult.hasWriteDate = true
           builderResult.writeDate = value
       }
  }
  func clearWriteDate() -> db_res_partnerBuilder{
       builderResult.hasWriteDate = false
       builderResult.writeDate = ""
       return self
  }
  var hasActive:Bool {
       get {
            return builderResult.hasActive
       }
  }
  var active:Bool {
       get {
            return builderResult.active
       }
       set (value) {
           builderResult.hasActive = true
           builderResult.active = value
       }
  }
  func clearActive() -> db_res_partnerBuilder{
       builderResult.hasActive = false
       builderResult.active = false
       return self
  }
  var hasMobile:Bool {
       get {
            return builderResult.hasMobile
       }
  }
  var mobile:String {
       get {
            return builderResult.mobile
       }
       set (value) {
           builderResult.hasMobile = true
           builderResult.mobile = value
       }
  }
  func clearMobile() -> db_res_partnerBuilder{
       builderResult.hasMobile = false
       builderResult.mobile = ""
       return self
  }
  var hasPhone:Bool {
       get {
            return builderResult.hasPhone
       }
  }
  var phone:String {
       get {
            return builderResult.phone
       }
       set (value) {
           builderResult.hasPhone = true
           builderResult.phone = value
       }
  }
  func clearPhone() -> db_res_partnerBuilder{
       builderResult.hasPhone = false
       builderResult.phone = ""
       return self
  }
  var hasBirthdate:Bool {
       get {
            return builderResult.hasBirthdate
       }
  }
  var birthdate:String {
       get {
            return builderResult.birthdate
       }
       set (value) {
           builderResult.hasBirthdate = true
           builderResult.birthdate = value
       }
  }
  func clearBirthdate() -> db_res_partnerBuilder{
       builderResult.hasBirthdate = false
       builderResult.birthdate = ""
       return self
  }
  var hasNotifyEmail:Bool {
       get {
            return builderResult.hasNotifyEmail
       }
  }
  var notifyEmail:String {
       get {
            return builderResult.notifyEmail
       }
       set (value) {
           builderResult.hasNotifyEmail = true
           builderResult.notifyEmail = value
       }
  }
  func clearNotifyEmail() -> db_res_partnerBuilder{
       builderResult.hasNotifyEmail = false
       builderResult.notifyEmail = ""
       return self
  }
  var hasColor:Bool {
       get {
            return builderResult.hasColor
       }
  }
  var color:Int32 {
       get {
            return builderResult.color
       }
       set (value) {
           builderResult.hasColor = true
           builderResult.color = value
       }
  }
  func clearColor() -> db_res_partnerBuilder{
       builderResult.hasColor = false
       builderResult.color = Int32(0)
       return self
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> db_res_partnerBuilder {
    builderResult = db_res_partner()
    return self
  }
  override func clone() -> db_res_partnerBuilder {
    return db_res_partner.builderWithPrototype(builderResult)
  }
  override func build() -> db_res_partner {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> db_res_partner {
    var returnMe:db_res_partner = builderResult
    return returnMe
  }
  func mergeFrom(other:db_res_partner) -> db_res_partnerBuilder {
    if (other == db_res_partner()) {
     return self
    }
    if other.hasUuidpartner {
         uuidpartner = other.uuidpartner
    }
    if other.hasTypes {
         types = other.types
    }
    if !other.channel.isEmpty {
        builderResult.channel += other.channel
    }
    if other.hasName {
         name = other.name
    }
    if other.hasCreateDate {
         createDate = other.createDate
    }
    if other.hasImageSmall {
         imageSmall = other.imageSmall
    }
    if other.hasImage {
         image = other.image
    }
    if other.hasDate {
         date = other.date
    }
    if other.hasStreet {
         street = other.street
    }
    if other.hasCity {
         city = other.city
    }
    if other.hasDisplayName {
         displayName = other.displayName
    }
    if other.hasZip {
         zip = other.zip
    }
    if other.hasTitle {
         title = other.title
    }
    if other.hasSupplier {
         supplier = other.supplier
    }
    if other.hasEmail {
         email = other.email
    }
    if other.hasIsCompany {
         isCompany = other.isCompany
    }
    if other.hasWebsite {
         website = other.website
    }
    if other.hasCustomer {
         customer = other.customer
    }
    if other.hasStreet2 {
         street2 = other.street2
    }
    if other.hasFax {
         fax = other.fax
    }
    if other.hasEmployee {
         employee = other.employee
    }
    if other.hasWriteDate {
         writeDate = other.writeDate
    }
    if other.hasActive {
         active = other.active
    }
    if other.hasMobile {
         mobile = other.mobile
    }
    if other.hasPhone {
         phone = other.phone
    }
    if other.hasBirthdate {
         birthdate = other.birthdate
    }
    if other.hasNotifyEmail {
         notifyEmail = other.notifyEmail
    }
    if other.hasColor {
         color = other.color
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->db_res_partnerBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> db_res_partnerBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 10 :
        uuidpartner = input.readString()

      case 18 :
        types = input.readString()

      case 26 :
        channel += [input.readString()]

      case 90 :
        name = input.readString()

      case 98 :
        createDate = input.readString()

      case 106 :
        imageSmall = input.readString()

      case 114 :
        image = input.readString()

      case 122 :
        date = input.readString()

      case 130 :
        street = input.readString()

      case 138 :
        city = input.readString()

      case 146 :
        displayName = input.readString()

      case 154 :
        zip = input.readString()

      case 160 :
        title = input.readInt32()

      case 168 :
        supplier = input.readBool()

      case 178 :
        email = input.readString()

      case 184 :
        isCompany = input.readBool()

      case 194 :
        website = input.readString()

      case 200 :
        customer = input.readBool()

      case 210 :
        street2 = input.readString()

      case 218 :
        fax = input.readString()

      case 224 :
        employee = input.readBool()

      case 234 :
        writeDate = input.readString()

      case 240 :
        active = input.readBool()

      case 250 :
        mobile = input.readString()

      case 258 :
        phone = input.readString()

      case 266 :
        birthdate = input.readString()

      case 274 :
        notifyEmail = input.readString()

      case 280 :
        color = input.readInt32()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class db_crm_lead : GeneratedMessage {
  private(set) var hasUuidleadid:Bool = false
  private(set) var uuidleadid:String = ""

  private(set) var hasTypes:Bool = false
  private(set) var types:String = "crm_lead"

  private(set) var hasUuiduserid:Bool = false
  private(set) var uuiduserid:String = ""

  private(set) var hasUuidpartnerid:Bool = false
  private(set) var uuidpartnerid:String = ""

  private(set) var hasUuidcompanyid:Bool = false
  private(set) var uuidcompanyid:String = ""

  private(set) var hasName:Bool = false
  private(set) var name:String = ""

  private(set) var hasCreatedate:Bool = false
  private(set) var createdate:String = ""

  private(set) var hasPartnerName:Bool = false
  private(set) var partnerName:String = ""

  private(set) var hasContactName:Bool = false
  private(set) var contactName:String = ""

  private(set) var hasMobile:Bool = false
  private(set) var mobile:String = ""

  private(set) var hasPhone:Bool = false
  private(set) var phone:String = ""

  private(set) var hasTitle:Bool = false
  private(set) var title:String = ""

  private(set) var hasStreet2:Bool = false
  private(set) var street2:String = ""

  private(set) var hasZip:Bool = false
  private(set) var zip:String = ""

  private(set) var hasFax:Bool = false
  private(set) var fax:String = ""

  private(set) var hasEmailCc:Bool = false
  private(set) var emailCc:String = ""

  private(set) var hasPriority:Bool = false
  private(set) var priority:Int32 = Int32(0)

  private(set) var hasMessageLastPost:Bool = false
  private(set) var messageLastPost:String = ""

  private(set) var hasCreateDate:Bool = false
  private(set) var createDate:String = ""

  private(set) var hasDateClosed:Bool = false
  private(set) var dateClosed:String = ""

  private(set) var hasDateDeadline:Bool = false
  private(set) var dateDeadline:String = ""

  private(set) var hasColor:Bool = false
  private(set) var color:Int32 = Int32(0)

  private(set) var hasActive:Bool = false
  private(set) var active:Bool = false

  private(set) var hasDesc:Bool = false
  private(set) var desc:String = ""

  private(set) var hasTitleAction:Bool = false
  private(set) var titleAction:String = ""

  private(set) var hasProbability:Bool = false
  private(set) var probability:Double = Double(0)

  private(set) var channel:Array<String> = Array<String>()
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
    if !hasUuidleadid {
      return false
    }
    if !hasTypes {
      return false
    }
    if !hasUuiduserid {
      return false
    }
    if !hasUuidpartnerid {
      return false
    }
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasUuidleadid {
      output.writeString(1, value:uuidleadid)
    }
    if hasTypes {
      output.writeString(2, value:types)
    }
    if !channel.isEmpty {
      for value in channel {
        output.writeString(3, value:value)
      }
    }
    if hasUuiduserid {
      output.writeString(4, value:uuiduserid)
    }
    if hasUuidpartnerid {
      output.writeString(5, value:uuidpartnerid)
    }
    if hasUuidcompanyid {
      output.writeString(6, value:uuidcompanyid)
    }
    if hasName {
      output.writeString(10, value:name)
    }
    if hasCreatedate {
      output.writeString(11, value:createdate)
    }
    if hasPartnerName {
      output.writeString(12, value:partnerName)
    }
    if hasContactName {
      output.writeString(13, value:contactName)
    }
    if hasMobile {
      output.writeString(14, value:mobile)
    }
    if hasPhone {
      output.writeString(15, value:phone)
    }
    if hasTitle {
      output.writeString(16, value:title)
    }
    if hasStreet2 {
      output.writeString(17, value:street2)
    }
    if hasZip {
      output.writeString(18, value:zip)
    }
    if hasFax {
      output.writeString(19, value:fax)
    }
    if hasEmailCc {
      output.writeString(20, value:emailCc)
    }
    if hasPriority {
      output.writeInt32(21, value:priority)
    }
    if hasMessageLastPost {
      output.writeString(22, value:messageLastPost)
    }
    if hasCreateDate {
      output.writeString(23, value:createDate)
    }
    if hasDateClosed {
      output.writeString(24, value:dateClosed)
    }
    if hasDateDeadline {
      output.writeString(25, value:dateDeadline)
    }
    if hasColor {
      output.writeInt32(26, value:color)
    }
    if hasActive {
      output.writeBool(27, value:active)
    }
    if hasDesc {
      output.writeString(28, value:desc)
    }
    if hasTitleAction {
      output.writeString(29, value:titleAction)
    }
    if hasProbability {
      output.writeDouble(30, value:probability)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasUuidleadid {
      size += WireFormat.computeStringSize(1, value:uuidleadid)
    }
    if hasTypes {
      size += WireFormat.computeStringSize(2, value:types)
    }
    var dataSizeChannel:Int32 = 0
    for element in channel {
        dataSizeChannel += WireFormat.computeStringSizeNoTag(element)
    }
    size += dataSizeChannel
    size += 1 * Int32(channel.count)
    if hasUuiduserid {
      size += WireFormat.computeStringSize(4, value:uuiduserid)
    }
    if hasUuidpartnerid {
      size += WireFormat.computeStringSize(5, value:uuidpartnerid)
    }
    if hasUuidcompanyid {
      size += WireFormat.computeStringSize(6, value:uuidcompanyid)
    }
    if hasName {
      size += WireFormat.computeStringSize(10, value:name)
    }
    if hasCreatedate {
      size += WireFormat.computeStringSize(11, value:createdate)
    }
    if hasPartnerName {
      size += WireFormat.computeStringSize(12, value:partnerName)
    }
    if hasContactName {
      size += WireFormat.computeStringSize(13, value:contactName)
    }
    if hasMobile {
      size += WireFormat.computeStringSize(14, value:mobile)
    }
    if hasPhone {
      size += WireFormat.computeStringSize(15, value:phone)
    }
    if hasTitle {
      size += WireFormat.computeStringSize(16, value:title)
    }
    if hasStreet2 {
      size += WireFormat.computeStringSize(17, value:street2)
    }
    if hasZip {
      size += WireFormat.computeStringSize(18, value:zip)
    }
    if hasFax {
      size += WireFormat.computeStringSize(19, value:fax)
    }
    if hasEmailCc {
      size += WireFormat.computeStringSize(20, value:emailCc)
    }
    if hasPriority {
      size += WireFormat.computeInt32Size(21, value:priority)
    }
    if hasMessageLastPost {
      size += WireFormat.computeStringSize(22, value:messageLastPost)
    }
    if hasCreateDate {
      size += WireFormat.computeStringSize(23, value:createDate)
    }
    if hasDateClosed {
      size += WireFormat.computeStringSize(24, value:dateClosed)
    }
    if hasDateDeadline {
      size += WireFormat.computeStringSize(25, value:dateDeadline)
    }
    if hasColor {
      size += WireFormat.computeInt32Size(26, value:color)
    }
    if hasActive {
      size += WireFormat.computeBoolSize(27, value:active)
    }
    if hasDesc {
      size += WireFormat.computeStringSize(28, value:desc)
    }
    if hasTitleAction {
      size += WireFormat.computeStringSize(29, value:titleAction)
    }
    if hasProbability {
      size += WireFormat.computeDoubleSize(30, value:probability)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> db_crm_lead {
    return db_crm_lead.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> db_crm_lead {
    return db_crm_lead.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> db_crm_lead {
    return db_crm_lead.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->db_crm_lead {
    return db_crm_lead.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> db_crm_lead {
    return db_crm_lead.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> db_crm_lead {
    return db_crm_lead.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> db_crm_leadBuilder {
    return db_crm_leadBuilder()
  }
  class func builderWithPrototype(prototype:db_crm_lead) -> db_crm_leadBuilder {
    return db_crm_lead.builder().mergeFrom(prototype)
  }
  func builder() -> db_crm_leadBuilder {
    return db_crm_lead.builder()
  }
  func toBuilder() -> db_crm_leadBuilder {
    return db_crm_lead.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if hasUuidleadid {
      output += "\(indent) uuidleadid: \(uuidleadid) \n"
    }
    if hasTypes {
      output += "\(indent) types: \(types) \n"
    }
    var channelElementIndex:Int = 0
    for element in channel  {
        output += "\(indent) channel[\(channelElementIndex)]: \(element)\n"
        channelElementIndex++
    }
    if hasUuiduserid {
      output += "\(indent) uuiduserid: \(uuiduserid) \n"
    }
    if hasUuidpartnerid {
      output += "\(indent) uuidpartnerid: \(uuidpartnerid) \n"
    }
    if hasUuidcompanyid {
      output += "\(indent) uuidcompanyid: \(uuidcompanyid) \n"
    }
    if hasName {
      output += "\(indent) name: \(name) \n"
    }
    if hasCreatedate {
      output += "\(indent) createdate: \(createdate) \n"
    }
    if hasPartnerName {
      output += "\(indent) partnerName: \(partnerName) \n"
    }
    if hasContactName {
      output += "\(indent) contactName: \(contactName) \n"
    }
    if hasMobile {
      output += "\(indent) mobile: \(mobile) \n"
    }
    if hasPhone {
      output += "\(indent) phone: \(phone) \n"
    }
    if hasTitle {
      output += "\(indent) title: \(title) \n"
    }
    if hasStreet2 {
      output += "\(indent) street2: \(street2) \n"
    }
    if hasZip {
      output += "\(indent) zip: \(zip) \n"
    }
    if hasFax {
      output += "\(indent) fax: \(fax) \n"
    }
    if hasEmailCc {
      output += "\(indent) emailCc: \(emailCc) \n"
    }
    if hasPriority {
      output += "\(indent) priority: \(priority) \n"
    }
    if hasMessageLastPost {
      output += "\(indent) messageLastPost: \(messageLastPost) \n"
    }
    if hasCreateDate {
      output += "\(indent) createDate: \(createDate) \n"
    }
    if hasDateClosed {
      output += "\(indent) dateClosed: \(dateClosed) \n"
    }
    if hasDateDeadline {
      output += "\(indent) dateDeadline: \(dateDeadline) \n"
    }
    if hasColor {
      output += "\(indent) color: \(color) \n"
    }
    if hasActive {
      output += "\(indent) active: \(active) \n"
    }
    if hasDesc {
      output += "\(indent) desc: \(desc) \n"
    }
    if hasTitleAction {
      output += "\(indent) titleAction: \(titleAction) \n"
    }
    if hasProbability {
      output += "\(indent) probability: \(probability) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasUuidleadid {
             hashCode = (hashCode &* 31) &+ uuidleadid.hashValue
          }
          if hasTypes {
             hashCode = (hashCode &* 31) &+ types.hashValue
          }
          for element in channel {
              hashCode = (hashCode &* 31) &+ element.hashValue
          }
          if hasUuiduserid {
             hashCode = (hashCode &* 31) &+ uuiduserid.hashValue
          }
          if hasUuidpartnerid {
             hashCode = (hashCode &* 31) &+ uuidpartnerid.hashValue
          }
          if hasUuidcompanyid {
             hashCode = (hashCode &* 31) &+ uuidcompanyid.hashValue
          }
          if hasName {
             hashCode = (hashCode &* 31) &+ name.hashValue
          }
          if hasCreatedate {
             hashCode = (hashCode &* 31) &+ createdate.hashValue
          }
          if hasPartnerName {
             hashCode = (hashCode &* 31) &+ partnerName.hashValue
          }
          if hasContactName {
             hashCode = (hashCode &* 31) &+ contactName.hashValue
          }
          if hasMobile {
             hashCode = (hashCode &* 31) &+ mobile.hashValue
          }
          if hasPhone {
             hashCode = (hashCode &* 31) &+ phone.hashValue
          }
          if hasTitle {
             hashCode = (hashCode &* 31) &+ title.hashValue
          }
          if hasStreet2 {
             hashCode = (hashCode &* 31) &+ street2.hashValue
          }
          if hasZip {
             hashCode = (hashCode &* 31) &+ zip.hashValue
          }
          if hasFax {
             hashCode = (hashCode &* 31) &+ fax.hashValue
          }
          if hasEmailCc {
             hashCode = (hashCode &* 31) &+ emailCc.hashValue
          }
          if hasPriority {
             hashCode = (hashCode &* 31) &+ priority.hashValue
          }
          if hasMessageLastPost {
             hashCode = (hashCode &* 31) &+ messageLastPost.hashValue
          }
          if hasCreateDate {
             hashCode = (hashCode &* 31) &+ createDate.hashValue
          }
          if hasDateClosed {
             hashCode = (hashCode &* 31) &+ dateClosed.hashValue
          }
          if hasDateDeadline {
             hashCode = (hashCode &* 31) &+ dateDeadline.hashValue
          }
          if hasColor {
             hashCode = (hashCode &* 31) &+ color.hashValue
          }
          if hasActive {
             hashCode = (hashCode &* 31) &+ active.hashValue
          }
          if hasDesc {
             hashCode = (hashCode &* 31) &+ desc.hashValue
          }
          if hasTitleAction {
             hashCode = (hashCode &* 31) &+ titleAction.hashValue
          }
          if hasProbability {
             hashCode = (hashCode &* 31) &+ probability.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "db_crm_lead"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return db_crm_lead.self
  }


  //Meta information declaration end

}

final class db_crm_leadBuilder : GeneratedMessageBuilder {
  private var builderResult:db_crm_lead

  required override init () {
     builderResult = db_crm_lead()
     super.init()
  }
  var hasUuidleadid:Bool {
       get {
            return builderResult.hasUuidleadid
       }
  }
  var uuidleadid:String {
       get {
            return builderResult.uuidleadid
       }
       set (value) {
           builderResult.hasUuidleadid = true
           builderResult.uuidleadid = value
       }
  }
  func clearUuidleadid() -> db_crm_leadBuilder{
       builderResult.hasUuidleadid = false
       builderResult.uuidleadid = ""
       return self
  }
  var hasTypes:Bool {
       get {
            return builderResult.hasTypes
       }
  }
  var types:String {
       get {
            return builderResult.types
       }
       set (value) {
           builderResult.hasTypes = true
           builderResult.types = value
       }
  }
  func clearTypes() -> db_crm_leadBuilder{
       builderResult.hasTypes = false
       builderResult.types = "crm_lead"
       return self
  }
  var channel:Array<String> {
       get {
           return builderResult.channel
       }
       set (array) {
           builderResult.channel = array
       }
  }
  func clearChannel() -> db_crm_leadBuilder {
     builderResult.channel.removeAll(keepCapacity: false)
     return self
  }
  var hasUuiduserid:Bool {
       get {
            return builderResult.hasUuiduserid
       }
  }
  var uuiduserid:String {
       get {
            return builderResult.uuiduserid
       }
       set (value) {
           builderResult.hasUuiduserid = true
           builderResult.uuiduserid = value
       }
  }
  func clearUuiduserid() -> db_crm_leadBuilder{
       builderResult.hasUuiduserid = false
       builderResult.uuiduserid = ""
       return self
  }
  var hasUuidpartnerid:Bool {
       get {
            return builderResult.hasUuidpartnerid
       }
  }
  var uuidpartnerid:String {
       get {
            return builderResult.uuidpartnerid
       }
       set (value) {
           builderResult.hasUuidpartnerid = true
           builderResult.uuidpartnerid = value
       }
  }
  func clearUuidpartnerid() -> db_crm_leadBuilder{
       builderResult.hasUuidpartnerid = false
       builderResult.uuidpartnerid = ""
       return self
  }
  var hasUuidcompanyid:Bool {
       get {
            return builderResult.hasUuidcompanyid
       }
  }
  var uuidcompanyid:String {
       get {
            return builderResult.uuidcompanyid
       }
       set (value) {
           builderResult.hasUuidcompanyid = true
           builderResult.uuidcompanyid = value
       }
  }
  func clearUuidcompanyid() -> db_crm_leadBuilder{
       builderResult.hasUuidcompanyid = false
       builderResult.uuidcompanyid = ""
       return self
  }
  var hasName:Bool {
       get {
            return builderResult.hasName
       }
  }
  var name:String {
       get {
            return builderResult.name
       }
       set (value) {
           builderResult.hasName = true
           builderResult.name = value
       }
  }
  func clearName() -> db_crm_leadBuilder{
       builderResult.hasName = false
       builderResult.name = ""
       return self
  }
  var hasCreatedate:Bool {
       get {
            return builderResult.hasCreatedate
       }
  }
  var createdate:String {
       get {
            return builderResult.createdate
       }
       set (value) {
           builderResult.hasCreatedate = true
           builderResult.createdate = value
       }
  }
  func clearCreatedate() -> db_crm_leadBuilder{
       builderResult.hasCreatedate = false
       builderResult.createdate = ""
       return self
  }
  var hasPartnerName:Bool {
       get {
            return builderResult.hasPartnerName
       }
  }
  var partnerName:String {
       get {
            return builderResult.partnerName
       }
       set (value) {
           builderResult.hasPartnerName = true
           builderResult.partnerName = value
       }
  }
  func clearPartnerName() -> db_crm_leadBuilder{
       builderResult.hasPartnerName = false
       builderResult.partnerName = ""
       return self
  }
  var hasContactName:Bool {
       get {
            return builderResult.hasContactName
       }
  }
  var contactName:String {
       get {
            return builderResult.contactName
       }
       set (value) {
           builderResult.hasContactName = true
           builderResult.contactName = value
       }
  }
  func clearContactName() -> db_crm_leadBuilder{
       builderResult.hasContactName = false
       builderResult.contactName = ""
       return self
  }
  var hasMobile:Bool {
       get {
            return builderResult.hasMobile
       }
  }
  var mobile:String {
       get {
            return builderResult.mobile
       }
       set (value) {
           builderResult.hasMobile = true
           builderResult.mobile = value
       }
  }
  func clearMobile() -> db_crm_leadBuilder{
       builderResult.hasMobile = false
       builderResult.mobile = ""
       return self
  }
  var hasPhone:Bool {
       get {
            return builderResult.hasPhone
       }
  }
  var phone:String {
       get {
            return builderResult.phone
       }
       set (value) {
           builderResult.hasPhone = true
           builderResult.phone = value
       }
  }
  func clearPhone() -> db_crm_leadBuilder{
       builderResult.hasPhone = false
       builderResult.phone = ""
       return self
  }
  var hasTitle:Bool {
       get {
            return builderResult.hasTitle
       }
  }
  var title:String {
       get {
            return builderResult.title
       }
       set (value) {
           builderResult.hasTitle = true
           builderResult.title = value
       }
  }
  func clearTitle() -> db_crm_leadBuilder{
       builderResult.hasTitle = false
       builderResult.title = ""
       return self
  }
  var hasStreet2:Bool {
       get {
            return builderResult.hasStreet2
       }
  }
  var street2:String {
       get {
            return builderResult.street2
       }
       set (value) {
           builderResult.hasStreet2 = true
           builderResult.street2 = value
       }
  }
  func clearStreet2() -> db_crm_leadBuilder{
       builderResult.hasStreet2 = false
       builderResult.street2 = ""
       return self
  }
  var hasZip:Bool {
       get {
            return builderResult.hasZip
       }
  }
  var zip:String {
       get {
            return builderResult.zip
       }
       set (value) {
           builderResult.hasZip = true
           builderResult.zip = value
       }
  }
  func clearZip() -> db_crm_leadBuilder{
       builderResult.hasZip = false
       builderResult.zip = ""
       return self
  }
  var hasFax:Bool {
       get {
            return builderResult.hasFax
       }
  }
  var fax:String {
       get {
            return builderResult.fax
       }
       set (value) {
           builderResult.hasFax = true
           builderResult.fax = value
       }
  }
  func clearFax() -> db_crm_leadBuilder{
       builderResult.hasFax = false
       builderResult.fax = ""
       return self
  }
  var hasEmailCc:Bool {
       get {
            return builderResult.hasEmailCc
       }
  }
  var emailCc:String {
       get {
            return builderResult.emailCc
       }
       set (value) {
           builderResult.hasEmailCc = true
           builderResult.emailCc = value
       }
  }
  func clearEmailCc() -> db_crm_leadBuilder{
       builderResult.hasEmailCc = false
       builderResult.emailCc = ""
       return self
  }
  var hasPriority:Bool {
       get {
            return builderResult.hasPriority
       }
  }
  var priority:Int32 {
       get {
            return builderResult.priority
       }
       set (value) {
           builderResult.hasPriority = true
           builderResult.priority = value
       }
  }
  func clearPriority() -> db_crm_leadBuilder{
       builderResult.hasPriority = false
       builderResult.priority = Int32(0)
       return self
  }
  var hasMessageLastPost:Bool {
       get {
            return builderResult.hasMessageLastPost
       }
  }
  var messageLastPost:String {
       get {
            return builderResult.messageLastPost
       }
       set (value) {
           builderResult.hasMessageLastPost = true
           builderResult.messageLastPost = value
       }
  }
  func clearMessageLastPost() -> db_crm_leadBuilder{
       builderResult.hasMessageLastPost = false
       builderResult.messageLastPost = ""
       return self
  }
  var hasCreateDate:Bool {
       get {
            return builderResult.hasCreateDate
       }
  }
  var createDate:String {
       get {
            return builderResult.createDate
       }
       set (value) {
           builderResult.hasCreateDate = true
           builderResult.createDate = value
       }
  }
  func clearCreateDate() -> db_crm_leadBuilder{
       builderResult.hasCreateDate = false
       builderResult.createDate = ""
       return self
  }
  var hasDateClosed:Bool {
       get {
            return builderResult.hasDateClosed
       }
  }
  var dateClosed:String {
       get {
            return builderResult.dateClosed
       }
       set (value) {
           builderResult.hasDateClosed = true
           builderResult.dateClosed = value
       }
  }
  func clearDateClosed() -> db_crm_leadBuilder{
       builderResult.hasDateClosed = false
       builderResult.dateClosed = ""
       return self
  }
  var hasDateDeadline:Bool {
       get {
            return builderResult.hasDateDeadline
       }
  }
  var dateDeadline:String {
       get {
            return builderResult.dateDeadline
       }
       set (value) {
           builderResult.hasDateDeadline = true
           builderResult.dateDeadline = value
       }
  }
  func clearDateDeadline() -> db_crm_leadBuilder{
       builderResult.hasDateDeadline = false
       builderResult.dateDeadline = ""
       return self
  }
  var hasColor:Bool {
       get {
            return builderResult.hasColor
       }
  }
  var color:Int32 {
       get {
            return builderResult.color
       }
       set (value) {
           builderResult.hasColor = true
           builderResult.color = value
       }
  }
  func clearColor() -> db_crm_leadBuilder{
       builderResult.hasColor = false
       builderResult.color = Int32(0)
       return self
  }
  var hasActive:Bool {
       get {
            return builderResult.hasActive
       }
  }
  var active:Bool {
       get {
            return builderResult.active
       }
       set (value) {
           builderResult.hasActive = true
           builderResult.active = value
       }
  }
  func clearActive() -> db_crm_leadBuilder{
       builderResult.hasActive = false
       builderResult.active = false
       return self
  }
  var hasDesc:Bool {
       get {
            return builderResult.hasDesc
       }
  }
  var desc:String {
       get {
            return builderResult.desc
       }
       set (value) {
           builderResult.hasDesc = true
           builderResult.desc = value
       }
  }
  func clearDesc() -> db_crm_leadBuilder{
       builderResult.hasDesc = false
       builderResult.desc = ""
       return self
  }
  var hasTitleAction:Bool {
       get {
            return builderResult.hasTitleAction
       }
  }
  var titleAction:String {
       get {
            return builderResult.titleAction
       }
       set (value) {
           builderResult.hasTitleAction = true
           builderResult.titleAction = value
       }
  }
  func clearTitleAction() -> db_crm_leadBuilder{
       builderResult.hasTitleAction = false
       builderResult.titleAction = ""
       return self
  }
  var hasProbability:Bool {
       get {
            return builderResult.hasProbability
       }
  }
  var probability:Double {
       get {
            return builderResult.probability
       }
       set (value) {
           builderResult.hasProbability = true
           builderResult.probability = value
       }
  }
  func clearProbability() -> db_crm_leadBuilder{
       builderResult.hasProbability = false
       builderResult.probability = Double(0)
       return self
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> db_crm_leadBuilder {
    builderResult = db_crm_lead()
    return self
  }
  override func clone() -> db_crm_leadBuilder {
    return db_crm_lead.builderWithPrototype(builderResult)
  }
  override func build() -> db_crm_lead {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> db_crm_lead {
    var returnMe:db_crm_lead = builderResult
    return returnMe
  }
  func mergeFrom(other:db_crm_lead) -> db_crm_leadBuilder {
    if (other == db_crm_lead()) {
     return self
    }
    if other.hasUuidleadid {
         uuidleadid = other.uuidleadid
    }
    if other.hasTypes {
         types = other.types
    }
    if !other.channel.isEmpty {
        builderResult.channel += other.channel
    }
    if other.hasUuiduserid {
         uuiduserid = other.uuiduserid
    }
    if other.hasUuidpartnerid {
         uuidpartnerid = other.uuidpartnerid
    }
    if other.hasUuidcompanyid {
         uuidcompanyid = other.uuidcompanyid
    }
    if other.hasName {
         name = other.name
    }
    if other.hasCreatedate {
         createdate = other.createdate
    }
    if other.hasPartnerName {
         partnerName = other.partnerName
    }
    if other.hasContactName {
         contactName = other.contactName
    }
    if other.hasMobile {
         mobile = other.mobile
    }
    if other.hasPhone {
         phone = other.phone
    }
    if other.hasTitle {
         title = other.title
    }
    if other.hasStreet2 {
         street2 = other.street2
    }
    if other.hasZip {
         zip = other.zip
    }
    if other.hasFax {
         fax = other.fax
    }
    if other.hasEmailCc {
         emailCc = other.emailCc
    }
    if other.hasPriority {
         priority = other.priority
    }
    if other.hasMessageLastPost {
         messageLastPost = other.messageLastPost
    }
    if other.hasCreateDate {
         createDate = other.createDate
    }
    if other.hasDateClosed {
         dateClosed = other.dateClosed
    }
    if other.hasDateDeadline {
         dateDeadline = other.dateDeadline
    }
    if other.hasColor {
         color = other.color
    }
    if other.hasActive {
         active = other.active
    }
    if other.hasDesc {
         desc = other.desc
    }
    if other.hasTitleAction {
         titleAction = other.titleAction
    }
    if other.hasProbability {
         probability = other.probability
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->db_crm_leadBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> db_crm_leadBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 10 :
        uuidleadid = input.readString()

      case 18 :
        types = input.readString()

      case 26 :
        channel += [input.readString()]

      case 34 :
        uuiduserid = input.readString()

      case 42 :
        uuidpartnerid = input.readString()

      case 50 :
        uuidcompanyid = input.readString()

      case 82 :
        name = input.readString()

      case 90 :
        createdate = input.readString()

      case 98 :
        partnerName = input.readString()

      case 106 :
        contactName = input.readString()

      case 114 :
        mobile = input.readString()

      case 122 :
        phone = input.readString()

      case 130 :
        title = input.readString()

      case 138 :
        street2 = input.readString()

      case 146 :
        zip = input.readString()

      case 154 :
        fax = input.readString()

      case 162 :
        emailCc = input.readString()

      case 168 :
        priority = input.readInt32()

      case 178 :
        messageLastPost = input.readString()

      case 186 :
        createDate = input.readString()

      case 194 :
        dateClosed = input.readString()

      case 202 :
        dateDeadline = input.readString()

      case 208 :
        color = input.readInt32()

      case 216 :
        active = input.readBool()

      case 226 :
        desc = input.readString()

      case 234 :
        titleAction = input.readString()

      case 241 :
        probability = input.readDouble()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class db_crm_phonecall : GeneratedMessage {
  private(set) var hasUuidphonecallid:Bool = false
  private(set) var uuidphonecallid:String = ""

  private(set) var hasTypes:Bool = false
  private(set) var types:String = "crm_phonecall"

  private(set) var hasUuiduserid:Bool = false
  private(set) var uuiduserid:String = ""

  private(set) var hasUuidpartner:Bool = false
  private(set) var uuidpartner:String = ""

  private(set) var hasDateClosed:Bool = false
  private(set) var dateClosed:String = ""

  private(set) var hasCreateDate:Bool = false
  private(set) var createDate:String = ""

  private(set) var hasDate:Bool = false
  private(set) var date:String = ""

  private(set) var hasPriority:Bool = false
  private(set) var priority:Int32 = Int32(0)

  private(set) var hasState:Bool = false
  private(set) var state:String = ""

  private(set) var hasDesc:Bool = false
  private(set) var desc:String = ""

  private(set) var hasName:Bool = false
  private(set) var name:String = ""

  private(set) var hasPartnerMobile:Bool = false
  private(set) var partnerMobile:String = ""

  private(set) var hasWriteDate:Bool = false
  private(set) var writeDate:String = ""

  private(set) var hasDateOpen:Bool = false
  private(set) var dateOpen:String = ""

  private(set) var hasPartnerPhone:Bool = false
  private(set) var partnerPhone:String = ""

  private(set) var hasEmailFrom:Bool = false
  private(set) var emailFrom:String = ""

  private(set) var channel:Array<String> = Array<String>()
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
    if !hasUuidphonecallid {
      return false
    }
    if !hasTypes {
      return false
    }
    if !hasUuiduserid {
      return false
    }
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasUuidphonecallid {
      output.writeString(1, value:uuidphonecallid)
    }
    if hasTypes {
      output.writeString(2, value:types)
    }
    if !channel.isEmpty {
      for value in channel {
        output.writeString(3, value:value)
      }
    }
    if hasUuiduserid {
      output.writeString(4, value:uuiduserid)
    }
    if hasUuidpartner {
      output.writeString(5, value:uuidpartner)
    }
    if hasDateClosed {
      output.writeString(11, value:dateClosed)
    }
    if hasCreateDate {
      output.writeString(12, value:createDate)
    }
    if hasDate {
      output.writeString(13, value:date)
    }
    if hasPriority {
      output.writeInt32(14, value:priority)
    }
    if hasState {
      output.writeString(15, value:state)
    }
    if hasDesc {
      output.writeString(16, value:desc)
    }
    if hasName {
      output.writeString(17, value:name)
    }
    if hasPartnerMobile {
      output.writeString(18, value:partnerMobile)
    }
    if hasWriteDate {
      output.writeString(19, value:writeDate)
    }
    if hasDateOpen {
      output.writeString(20, value:dateOpen)
    }
    if hasPartnerPhone {
      output.writeString(21, value:partnerPhone)
    }
    if hasEmailFrom {
      output.writeString(22, value:emailFrom)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasUuidphonecallid {
      size += WireFormat.computeStringSize(1, value:uuidphonecallid)
    }
    if hasTypes {
      size += WireFormat.computeStringSize(2, value:types)
    }
    var dataSizeChannel:Int32 = 0
    for element in channel {
        dataSizeChannel += WireFormat.computeStringSizeNoTag(element)
    }
    size += dataSizeChannel
    size += 1 * Int32(channel.count)
    if hasUuiduserid {
      size += WireFormat.computeStringSize(4, value:uuiduserid)
    }
    if hasUuidpartner {
      size += WireFormat.computeStringSize(5, value:uuidpartner)
    }
    if hasDateClosed {
      size += WireFormat.computeStringSize(11, value:dateClosed)
    }
    if hasCreateDate {
      size += WireFormat.computeStringSize(12, value:createDate)
    }
    if hasDate {
      size += WireFormat.computeStringSize(13, value:date)
    }
    if hasPriority {
      size += WireFormat.computeInt32Size(14, value:priority)
    }
    if hasState {
      size += WireFormat.computeStringSize(15, value:state)
    }
    if hasDesc {
      size += WireFormat.computeStringSize(16, value:desc)
    }
    if hasName {
      size += WireFormat.computeStringSize(17, value:name)
    }
    if hasPartnerMobile {
      size += WireFormat.computeStringSize(18, value:partnerMobile)
    }
    if hasWriteDate {
      size += WireFormat.computeStringSize(19, value:writeDate)
    }
    if hasDateOpen {
      size += WireFormat.computeStringSize(20, value:dateOpen)
    }
    if hasPartnerPhone {
      size += WireFormat.computeStringSize(21, value:partnerPhone)
    }
    if hasEmailFrom {
      size += WireFormat.computeStringSize(22, value:emailFrom)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> db_crm_phonecall {
    return db_crm_phonecall.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> db_crm_phonecall {
    return db_crm_phonecall.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> db_crm_phonecall {
    return db_crm_phonecall.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->db_crm_phonecall {
    return db_crm_phonecall.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> db_crm_phonecall {
    return db_crm_phonecall.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> db_crm_phonecall {
    return db_crm_phonecall.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> db_crm_phonecallBuilder {
    return db_crm_phonecallBuilder()
  }
  class func builderWithPrototype(prototype:db_crm_phonecall) -> db_crm_phonecallBuilder {
    return db_crm_phonecall.builder().mergeFrom(prototype)
  }
  func builder() -> db_crm_phonecallBuilder {
    return db_crm_phonecall.builder()
  }
  func toBuilder() -> db_crm_phonecallBuilder {
    return db_crm_phonecall.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if hasUuidphonecallid {
      output += "\(indent) uuidphonecallid: \(uuidphonecallid) \n"
    }
    if hasTypes {
      output += "\(indent) types: \(types) \n"
    }
    var channelElementIndex:Int = 0
    for element in channel  {
        output += "\(indent) channel[\(channelElementIndex)]: \(element)\n"
        channelElementIndex++
    }
    if hasUuiduserid {
      output += "\(indent) uuiduserid: \(uuiduserid) \n"
    }
    if hasUuidpartner {
      output += "\(indent) uuidpartner: \(uuidpartner) \n"
    }
    if hasDateClosed {
      output += "\(indent) dateClosed: \(dateClosed) \n"
    }
    if hasCreateDate {
      output += "\(indent) createDate: \(createDate) \n"
    }
    if hasDate {
      output += "\(indent) date: \(date) \n"
    }
    if hasPriority {
      output += "\(indent) priority: \(priority) \n"
    }
    if hasState {
      output += "\(indent) state: \(state) \n"
    }
    if hasDesc {
      output += "\(indent) desc: \(desc) \n"
    }
    if hasName {
      output += "\(indent) name: \(name) \n"
    }
    if hasPartnerMobile {
      output += "\(indent) partnerMobile: \(partnerMobile) \n"
    }
    if hasWriteDate {
      output += "\(indent) writeDate: \(writeDate) \n"
    }
    if hasDateOpen {
      output += "\(indent) dateOpen: \(dateOpen) \n"
    }
    if hasPartnerPhone {
      output += "\(indent) partnerPhone: \(partnerPhone) \n"
    }
    if hasEmailFrom {
      output += "\(indent) emailFrom: \(emailFrom) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasUuidphonecallid {
             hashCode = (hashCode &* 31) &+ uuidphonecallid.hashValue
          }
          if hasTypes {
             hashCode = (hashCode &* 31) &+ types.hashValue
          }
          for element in channel {
              hashCode = (hashCode &* 31) &+ element.hashValue
          }
          if hasUuiduserid {
             hashCode = (hashCode &* 31) &+ uuiduserid.hashValue
          }
          if hasUuidpartner {
             hashCode = (hashCode &* 31) &+ uuidpartner.hashValue
          }
          if hasDateClosed {
             hashCode = (hashCode &* 31) &+ dateClosed.hashValue
          }
          if hasCreateDate {
             hashCode = (hashCode &* 31) &+ createDate.hashValue
          }
          if hasDate {
             hashCode = (hashCode &* 31) &+ date.hashValue
          }
          if hasPriority {
             hashCode = (hashCode &* 31) &+ priority.hashValue
          }
          if hasState {
             hashCode = (hashCode &* 31) &+ state.hashValue
          }
          if hasDesc {
             hashCode = (hashCode &* 31) &+ desc.hashValue
          }
          if hasName {
             hashCode = (hashCode &* 31) &+ name.hashValue
          }
          if hasPartnerMobile {
             hashCode = (hashCode &* 31) &+ partnerMobile.hashValue
          }
          if hasWriteDate {
             hashCode = (hashCode &* 31) &+ writeDate.hashValue
          }
          if hasDateOpen {
             hashCode = (hashCode &* 31) &+ dateOpen.hashValue
          }
          if hasPartnerPhone {
             hashCode = (hashCode &* 31) &+ partnerPhone.hashValue
          }
          if hasEmailFrom {
             hashCode = (hashCode &* 31) &+ emailFrom.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "db_crm_phonecall"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return db_crm_phonecall.self
  }


  //Meta information declaration end

}

final class db_crm_phonecallBuilder : GeneratedMessageBuilder {
  private var builderResult:db_crm_phonecall

  required override init () {
     builderResult = db_crm_phonecall()
     super.init()
  }
  var hasUuidphonecallid:Bool {
       get {
            return builderResult.hasUuidphonecallid
       }
  }
  var uuidphonecallid:String {
       get {
            return builderResult.uuidphonecallid
       }
       set (value) {
           builderResult.hasUuidphonecallid = true
           builderResult.uuidphonecallid = value
       }
  }
  func clearUuidphonecallid() -> db_crm_phonecallBuilder{
       builderResult.hasUuidphonecallid = false
       builderResult.uuidphonecallid = ""
       return self
  }
  var hasTypes:Bool {
       get {
            return builderResult.hasTypes
       }
  }
  var types:String {
       get {
            return builderResult.types
       }
       set (value) {
           builderResult.hasTypes = true
           builderResult.types = value
       }
  }
  func clearTypes() -> db_crm_phonecallBuilder{
       builderResult.hasTypes = false
       builderResult.types = "crm_phonecall"
       return self
  }
  var channel:Array<String> {
       get {
           return builderResult.channel
       }
       set (array) {
           builderResult.channel = array
       }
  }
  func clearChannel() -> db_crm_phonecallBuilder {
     builderResult.channel.removeAll(keepCapacity: false)
     return self
  }
  var hasUuiduserid:Bool {
       get {
            return builderResult.hasUuiduserid
       }
  }
  var uuiduserid:String {
       get {
            return builderResult.uuiduserid
       }
       set (value) {
           builderResult.hasUuiduserid = true
           builderResult.uuiduserid = value
       }
  }
  func clearUuiduserid() -> db_crm_phonecallBuilder{
       builderResult.hasUuiduserid = false
       builderResult.uuiduserid = ""
       return self
  }
  var hasUuidpartner:Bool {
       get {
            return builderResult.hasUuidpartner
       }
  }
  var uuidpartner:String {
       get {
            return builderResult.uuidpartner
       }
       set (value) {
           builderResult.hasUuidpartner = true
           builderResult.uuidpartner = value
       }
  }
  func clearUuidpartner() -> db_crm_phonecallBuilder{
       builderResult.hasUuidpartner = false
       builderResult.uuidpartner = ""
       return self
  }
  var hasDateClosed:Bool {
       get {
            return builderResult.hasDateClosed
       }
  }
  var dateClosed:String {
       get {
            return builderResult.dateClosed
       }
       set (value) {
           builderResult.hasDateClosed = true
           builderResult.dateClosed = value
       }
  }
  func clearDateClosed() -> db_crm_phonecallBuilder{
       builderResult.hasDateClosed = false
       builderResult.dateClosed = ""
       return self
  }
  var hasCreateDate:Bool {
       get {
            return builderResult.hasCreateDate
       }
  }
  var createDate:String {
       get {
            return builderResult.createDate
       }
       set (value) {
           builderResult.hasCreateDate = true
           builderResult.createDate = value
       }
  }
  func clearCreateDate() -> db_crm_phonecallBuilder{
       builderResult.hasCreateDate = false
       builderResult.createDate = ""
       return self
  }
  var hasDate:Bool {
       get {
            return builderResult.hasDate
       }
  }
  var date:String {
       get {
            return builderResult.date
       }
       set (value) {
           builderResult.hasDate = true
           builderResult.date = value
       }
  }
  func clearDate() -> db_crm_phonecallBuilder{
       builderResult.hasDate = false
       builderResult.date = ""
       return self
  }
  var hasPriority:Bool {
       get {
            return builderResult.hasPriority
       }
  }
  var priority:Int32 {
       get {
            return builderResult.priority
       }
       set (value) {
           builderResult.hasPriority = true
           builderResult.priority = value
       }
  }
  func clearPriority() -> db_crm_phonecallBuilder{
       builderResult.hasPriority = false
       builderResult.priority = Int32(0)
       return self
  }
  var hasState:Bool {
       get {
            return builderResult.hasState
       }
  }
  var state:String {
       get {
            return builderResult.state
       }
       set (value) {
           builderResult.hasState = true
           builderResult.state = value
       }
  }
  func clearState() -> db_crm_phonecallBuilder{
       builderResult.hasState = false
       builderResult.state = ""
       return self
  }
  var hasDesc:Bool {
       get {
            return builderResult.hasDesc
       }
  }
  var desc:String {
       get {
            return builderResult.desc
       }
       set (value) {
           builderResult.hasDesc = true
           builderResult.desc = value
       }
  }
  func clearDesc() -> db_crm_phonecallBuilder{
       builderResult.hasDesc = false
       builderResult.desc = ""
       return self
  }
  var hasName:Bool {
       get {
            return builderResult.hasName
       }
  }
  var name:String {
       get {
            return builderResult.name
       }
       set (value) {
           builderResult.hasName = true
           builderResult.name = value
       }
  }
  func clearName() -> db_crm_phonecallBuilder{
       builderResult.hasName = false
       builderResult.name = ""
       return self
  }
  var hasPartnerMobile:Bool {
       get {
            return builderResult.hasPartnerMobile
       }
  }
  var partnerMobile:String {
       get {
            return builderResult.partnerMobile
       }
       set (value) {
           builderResult.hasPartnerMobile = true
           builderResult.partnerMobile = value
       }
  }
  func clearPartnerMobile() -> db_crm_phonecallBuilder{
       builderResult.hasPartnerMobile = false
       builderResult.partnerMobile = ""
       return self
  }
  var hasWriteDate:Bool {
       get {
            return builderResult.hasWriteDate
       }
  }
  var writeDate:String {
       get {
            return builderResult.writeDate
       }
       set (value) {
           builderResult.hasWriteDate = true
           builderResult.writeDate = value
       }
  }
  func clearWriteDate() -> db_crm_phonecallBuilder{
       builderResult.hasWriteDate = false
       builderResult.writeDate = ""
       return self
  }
  var hasDateOpen:Bool {
       get {
            return builderResult.hasDateOpen
       }
  }
  var dateOpen:String {
       get {
            return builderResult.dateOpen
       }
       set (value) {
           builderResult.hasDateOpen = true
           builderResult.dateOpen = value
       }
  }
  func clearDateOpen() -> db_crm_phonecallBuilder{
       builderResult.hasDateOpen = false
       builderResult.dateOpen = ""
       return self
  }
  var hasPartnerPhone:Bool {
       get {
            return builderResult.hasPartnerPhone
       }
  }
  var partnerPhone:String {
       get {
            return builderResult.partnerPhone
       }
       set (value) {
           builderResult.hasPartnerPhone = true
           builderResult.partnerPhone = value
       }
  }
  func clearPartnerPhone() -> db_crm_phonecallBuilder{
       builderResult.hasPartnerPhone = false
       builderResult.partnerPhone = ""
       return self
  }
  var hasEmailFrom:Bool {
       get {
            return builderResult.hasEmailFrom
       }
  }
  var emailFrom:String {
       get {
            return builderResult.emailFrom
       }
       set (value) {
           builderResult.hasEmailFrom = true
           builderResult.emailFrom = value
       }
  }
  func clearEmailFrom() -> db_crm_phonecallBuilder{
       builderResult.hasEmailFrom = false
       builderResult.emailFrom = ""
       return self
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> db_crm_phonecallBuilder {
    builderResult = db_crm_phonecall()
    return self
  }
  override func clone() -> db_crm_phonecallBuilder {
    return db_crm_phonecall.builderWithPrototype(builderResult)
  }
  override func build() -> db_crm_phonecall {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> db_crm_phonecall {
    var returnMe:db_crm_phonecall = builderResult
    return returnMe
  }
  func mergeFrom(other:db_crm_phonecall) -> db_crm_phonecallBuilder {
    if (other == db_crm_phonecall()) {
     return self
    }
    if other.hasUuidphonecallid {
         uuidphonecallid = other.uuidphonecallid
    }
    if other.hasTypes {
         types = other.types
    }
    if !other.channel.isEmpty {
        builderResult.channel += other.channel
    }
    if other.hasUuiduserid {
         uuiduserid = other.uuiduserid
    }
    if other.hasUuidpartner {
         uuidpartner = other.uuidpartner
    }
    if other.hasDateClosed {
         dateClosed = other.dateClosed
    }
    if other.hasCreateDate {
         createDate = other.createDate
    }
    if other.hasDate {
         date = other.date
    }
    if other.hasPriority {
         priority = other.priority
    }
    if other.hasState {
         state = other.state
    }
    if other.hasDesc {
         desc = other.desc
    }
    if other.hasName {
         name = other.name
    }
    if other.hasPartnerMobile {
         partnerMobile = other.partnerMobile
    }
    if other.hasWriteDate {
         writeDate = other.writeDate
    }
    if other.hasDateOpen {
         dateOpen = other.dateOpen
    }
    if other.hasPartnerPhone {
         partnerPhone = other.partnerPhone
    }
    if other.hasEmailFrom {
         emailFrom = other.emailFrom
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->db_crm_phonecallBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> db_crm_phonecallBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 10 :
        uuidphonecallid = input.readString()

      case 18 :
        types = input.readString()

      case 26 :
        channel += [input.readString()]

      case 34 :
        uuiduserid = input.readString()

      case 42 :
        uuidpartner = input.readString()

      case 90 :
        dateClosed = input.readString()

      case 98 :
        createDate = input.readString()

      case 106 :
        date = input.readString()

      case 112 :
        priority = input.readInt32()

      case 122 :
        state = input.readString()

      case 130 :
        desc = input.readString()

      case 138 :
        name = input.readString()

      case 146 :
        partnerMobile = input.readString()

      case 154 :
        writeDate = input.readString()

      case 162 :
        dateOpen = input.readString()

      case 170 :
        partnerPhone = input.readString()

      case 178 :
        emailFrom = input.readString()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

//Class extensions: NSData


extension db_res_users {
    class func parseFromNSData(data:NSData) -> db_res_users {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return db_res_users.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> db_res_users {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return db_res_users.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension db_res_company {
    class func parseFromNSData(data:NSData) -> db_res_company {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return db_res_company.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> db_res_company {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return db_res_company.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension db_res_partner {
    class func parseFromNSData(data:NSData) -> db_res_partner {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return db_res_partner.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> db_res_partner {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return db_res_partner.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension db_crm_lead {
    class func parseFromNSData(data:NSData) -> db_crm_lead {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return db_crm_lead.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> db_crm_lead {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return db_crm_lead.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension db_crm_phonecall {
    class func parseFromNSData(data:NSData) -> db_crm_phonecall {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return db_crm_phonecall.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> db_crm_phonecall {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return db_crm_phonecall.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}

// @@protoc_insertion_point(global_scope)
